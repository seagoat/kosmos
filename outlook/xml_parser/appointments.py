#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Aug  2 14:55:05 2018 by generateDS.py version 2.29.19.
# Python 3.5.4 |Anaconda custom (64-bit)| (default, Oct  5 2017, 02:58:14)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
#
# Command line options:
#   ('-o', 'appointments.py')
#
# Command line arguments:
#   ../../schema/appointments.xsd
#
# Command line:
#   /Users/brian/anaconda/bin/generateDS -o "appointments.py" ../../schema/appointments.xsd
#
# Current working directory (os.getcwd()):
#   parser
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class appointments(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, elementCount=None, appointment=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.elementCount = _cast(int, elementCount)
        if appointment is None:
            self.appointment = []
        else:
            self.appointment = appointment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, appointments)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if appointments.subclass:
            return appointments.subclass(*args_, **kwargs_)
        else:
            return appointments(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_appointment(self): return self.appointment
    def set_appointment(self, appointment): self.appointment = appointment
    def add_appointment(self, value): self.appointment.append(value)
    def insert_appointment_at(self, index, value): self.appointment.insert(index, value)
    def replace_appointment_at(self, index, value): self.appointment[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_elementCount(self): return self.elementCount
    def set_elementCount(self, elementCount): self.elementCount = elementCount
    def hasContent_(self):
        if (
            self.appointment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='appointments', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('appointments')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='appointments')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='appointments', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='appointments'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.elementCount is not None and 'elementCount' not in already_processed:
            already_processed.add('elementCount')
            outfile.write(' elementCount="%s"' % self.gds_format_integer(self.elementCount, input_name='elementCount'))
    def exportChildren(self, outfile, level, namespace_='', name_='appointments', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for appointment_ in self.appointment:
            appointment_.export(outfile, level, namespace_, name_='appointment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('elementCount', node)
        if value is not None and 'elementCount' not in already_processed:
            already_processed.add('elementCount')
            try:
                self.elementCount = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'appointment':
            obj_ = appointmentType.factory()
            obj_.build(child_)
            self.appointment.append(obj_)
            obj_.original_tagname_ = 'appointment'
# end class appointments


class appointmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFCalendarEventCopyCategoryList=None, OPFCalendarEventCopyPrimaryCategory=None, InvitationsHaveBeenSent=None, OPFCalendarEventAllowNewTimeProposal=None, OPFCalendarEventCopyDismissTime=None, OPFCalendarEventCopyEndTime=None, OPFCalendarEventCopyEndTimeZone=None, OPFCalendarEventCopyFreeBusyStatus=None, OPFCalendarEventCopyModDate=None, OPFCalendarEventCopyReminderDelta=None, OPFCalendarEventCopyStartTime=None, OPFCalendarEventCopyReminderTime=None, OPFCalendarEventCopySummary=None, OPFCalendarEventCopyTravelTime=None, OPFCalendarEventCopyUUID=None, OPFCalendarEventGetAcceptStatus=None, OPFCalendarEventGetEndTimeZoneSetToDefault=None, OPFCalendarEventGetHasReminder=None, OPFCalendarEventGetIsAllDayEvent=None, OPFCalendarEventGetIsPrivate=None, OPFCalendarEventGetStartTimeZoneICSData=None, OPFCalendarEventGetStartTimeZoneSetToDefault=None, OPFCalendarEventIsRecurring=None, OPFCalendarEventSetIsOwner=None, OPFCalendarEventCopyLocation=None, OPFCalendarEventCopyStartTimeZone=None, OPFCalendarEventCopyOriginalReminderTime=None, OPFCalendarEventCopyRecurrence=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFCalendarEventCopyCategoryList = OPFCalendarEventCopyCategoryList
        self.OPFCalendarEventCopyPrimaryCategory = OPFCalendarEventCopyPrimaryCategory
        self.InvitationsHaveBeenSent = InvitationsHaveBeenSent
        self.OPFCalendarEventAllowNewTimeProposal = OPFCalendarEventAllowNewTimeProposal
        self.OPFCalendarEventCopyDismissTime = OPFCalendarEventCopyDismissTime
        self.OPFCalendarEventCopyEndTime = OPFCalendarEventCopyEndTime
        self.OPFCalendarEventCopyEndTimeZone = OPFCalendarEventCopyEndTimeZone
        self.OPFCalendarEventCopyFreeBusyStatus = OPFCalendarEventCopyFreeBusyStatus
        self.OPFCalendarEventCopyModDate = OPFCalendarEventCopyModDate
        self.OPFCalendarEventCopyReminderDelta = OPFCalendarEventCopyReminderDelta
        self.OPFCalendarEventCopyStartTime = OPFCalendarEventCopyStartTime
        self.OPFCalendarEventCopyReminderTime = OPFCalendarEventCopyReminderTime
        self.OPFCalendarEventCopySummary = OPFCalendarEventCopySummary
        self.OPFCalendarEventCopyTravelTime = OPFCalendarEventCopyTravelTime
        self.OPFCalendarEventCopyUUID = OPFCalendarEventCopyUUID
        self.OPFCalendarEventGetAcceptStatus = OPFCalendarEventGetAcceptStatus
        self.OPFCalendarEventGetEndTimeZoneSetToDefault = OPFCalendarEventGetEndTimeZoneSetToDefault
        self.OPFCalendarEventGetHasReminder = OPFCalendarEventGetHasReminder
        self.OPFCalendarEventGetIsAllDayEvent = OPFCalendarEventGetIsAllDayEvent
        self.OPFCalendarEventGetIsPrivate = OPFCalendarEventGetIsPrivate
        self.OPFCalendarEventGetStartTimeZoneICSData = OPFCalendarEventGetStartTimeZoneICSData
        self.OPFCalendarEventGetStartTimeZoneSetToDefault = OPFCalendarEventGetStartTimeZoneSetToDefault
        self.OPFCalendarEventIsRecurring = OPFCalendarEventIsRecurring
        self.OPFCalendarEventSetIsOwner = OPFCalendarEventSetIsOwner
        self.OPFCalendarEventCopyLocation = OPFCalendarEventCopyLocation
        self.OPFCalendarEventCopyStartTimeZone = OPFCalendarEventCopyStartTimeZone
        self.OPFCalendarEventCopyOriginalReminderTime = OPFCalendarEventCopyOriginalReminderTime
        self.OPFCalendarEventCopyRecurrence = OPFCalendarEventCopyRecurrence
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, appointmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if appointmentType.subclass:
            return appointmentType.subclass(*args_, **kwargs_)
        else:
            return appointmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCalendarEventCopyCategoryList(self): return self.OPFCalendarEventCopyCategoryList
    def set_OPFCalendarEventCopyCategoryList(self, OPFCalendarEventCopyCategoryList): self.OPFCalendarEventCopyCategoryList = OPFCalendarEventCopyCategoryList
    def get_OPFCalendarEventCopyPrimaryCategory(self): return self.OPFCalendarEventCopyPrimaryCategory
    def set_OPFCalendarEventCopyPrimaryCategory(self, OPFCalendarEventCopyPrimaryCategory): self.OPFCalendarEventCopyPrimaryCategory = OPFCalendarEventCopyPrimaryCategory
    def get_InvitationsHaveBeenSent(self): return self.InvitationsHaveBeenSent
    def set_InvitationsHaveBeenSent(self, InvitationsHaveBeenSent): self.InvitationsHaveBeenSent = InvitationsHaveBeenSent
    def get_OPFCalendarEventAllowNewTimeProposal(self): return self.OPFCalendarEventAllowNewTimeProposal
    def set_OPFCalendarEventAllowNewTimeProposal(self, OPFCalendarEventAllowNewTimeProposal): self.OPFCalendarEventAllowNewTimeProposal = OPFCalendarEventAllowNewTimeProposal
    def get_OPFCalendarEventCopyDismissTime(self): return self.OPFCalendarEventCopyDismissTime
    def set_OPFCalendarEventCopyDismissTime(self, OPFCalendarEventCopyDismissTime): self.OPFCalendarEventCopyDismissTime = OPFCalendarEventCopyDismissTime
    def get_OPFCalendarEventCopyEndTime(self): return self.OPFCalendarEventCopyEndTime
    def set_OPFCalendarEventCopyEndTime(self, OPFCalendarEventCopyEndTime): self.OPFCalendarEventCopyEndTime = OPFCalendarEventCopyEndTime
    def get_OPFCalendarEventCopyEndTimeZone(self): return self.OPFCalendarEventCopyEndTimeZone
    def set_OPFCalendarEventCopyEndTimeZone(self, OPFCalendarEventCopyEndTimeZone): self.OPFCalendarEventCopyEndTimeZone = OPFCalendarEventCopyEndTimeZone
    def get_OPFCalendarEventCopyFreeBusyStatus(self): return self.OPFCalendarEventCopyFreeBusyStatus
    def set_OPFCalendarEventCopyFreeBusyStatus(self, OPFCalendarEventCopyFreeBusyStatus): self.OPFCalendarEventCopyFreeBusyStatus = OPFCalendarEventCopyFreeBusyStatus
    def get_OPFCalendarEventCopyModDate(self): return self.OPFCalendarEventCopyModDate
    def set_OPFCalendarEventCopyModDate(self, OPFCalendarEventCopyModDate): self.OPFCalendarEventCopyModDate = OPFCalendarEventCopyModDate
    def get_OPFCalendarEventCopyReminderDelta(self): return self.OPFCalendarEventCopyReminderDelta
    def set_OPFCalendarEventCopyReminderDelta(self, OPFCalendarEventCopyReminderDelta): self.OPFCalendarEventCopyReminderDelta = OPFCalendarEventCopyReminderDelta
    def get_OPFCalendarEventCopyStartTime(self): return self.OPFCalendarEventCopyStartTime
    def set_OPFCalendarEventCopyStartTime(self, OPFCalendarEventCopyStartTime): self.OPFCalendarEventCopyStartTime = OPFCalendarEventCopyStartTime
    def get_OPFCalendarEventCopyReminderTime(self): return self.OPFCalendarEventCopyReminderTime
    def set_OPFCalendarEventCopyReminderTime(self, OPFCalendarEventCopyReminderTime): self.OPFCalendarEventCopyReminderTime = OPFCalendarEventCopyReminderTime
    def get_OPFCalendarEventCopySummary(self): return self.OPFCalendarEventCopySummary
    def set_OPFCalendarEventCopySummary(self, OPFCalendarEventCopySummary): self.OPFCalendarEventCopySummary = OPFCalendarEventCopySummary
    def get_OPFCalendarEventCopyTravelTime(self): return self.OPFCalendarEventCopyTravelTime
    def set_OPFCalendarEventCopyTravelTime(self, OPFCalendarEventCopyTravelTime): self.OPFCalendarEventCopyTravelTime = OPFCalendarEventCopyTravelTime
    def get_OPFCalendarEventCopyUUID(self): return self.OPFCalendarEventCopyUUID
    def set_OPFCalendarEventCopyUUID(self, OPFCalendarEventCopyUUID): self.OPFCalendarEventCopyUUID = OPFCalendarEventCopyUUID
    def get_OPFCalendarEventGetAcceptStatus(self): return self.OPFCalendarEventGetAcceptStatus
    def set_OPFCalendarEventGetAcceptStatus(self, OPFCalendarEventGetAcceptStatus): self.OPFCalendarEventGetAcceptStatus = OPFCalendarEventGetAcceptStatus
    def get_OPFCalendarEventGetEndTimeZoneSetToDefault(self): return self.OPFCalendarEventGetEndTimeZoneSetToDefault
    def set_OPFCalendarEventGetEndTimeZoneSetToDefault(self, OPFCalendarEventGetEndTimeZoneSetToDefault): self.OPFCalendarEventGetEndTimeZoneSetToDefault = OPFCalendarEventGetEndTimeZoneSetToDefault
    def get_OPFCalendarEventGetHasReminder(self): return self.OPFCalendarEventGetHasReminder
    def set_OPFCalendarEventGetHasReminder(self, OPFCalendarEventGetHasReminder): self.OPFCalendarEventGetHasReminder = OPFCalendarEventGetHasReminder
    def get_OPFCalendarEventGetIsAllDayEvent(self): return self.OPFCalendarEventGetIsAllDayEvent
    def set_OPFCalendarEventGetIsAllDayEvent(self, OPFCalendarEventGetIsAllDayEvent): self.OPFCalendarEventGetIsAllDayEvent = OPFCalendarEventGetIsAllDayEvent
    def get_OPFCalendarEventGetIsPrivate(self): return self.OPFCalendarEventGetIsPrivate
    def set_OPFCalendarEventGetIsPrivate(self, OPFCalendarEventGetIsPrivate): self.OPFCalendarEventGetIsPrivate = OPFCalendarEventGetIsPrivate
    def get_OPFCalendarEventGetStartTimeZoneICSData(self): return self.OPFCalendarEventGetStartTimeZoneICSData
    def set_OPFCalendarEventGetStartTimeZoneICSData(self, OPFCalendarEventGetStartTimeZoneICSData): self.OPFCalendarEventGetStartTimeZoneICSData = OPFCalendarEventGetStartTimeZoneICSData
    def get_OPFCalendarEventGetStartTimeZoneSetToDefault(self): return self.OPFCalendarEventGetStartTimeZoneSetToDefault
    def set_OPFCalendarEventGetStartTimeZoneSetToDefault(self, OPFCalendarEventGetStartTimeZoneSetToDefault): self.OPFCalendarEventGetStartTimeZoneSetToDefault = OPFCalendarEventGetStartTimeZoneSetToDefault
    def get_OPFCalendarEventIsRecurring(self): return self.OPFCalendarEventIsRecurring
    def set_OPFCalendarEventIsRecurring(self, OPFCalendarEventIsRecurring): self.OPFCalendarEventIsRecurring = OPFCalendarEventIsRecurring
    def get_OPFCalendarEventSetIsOwner(self): return self.OPFCalendarEventSetIsOwner
    def set_OPFCalendarEventSetIsOwner(self, OPFCalendarEventSetIsOwner): self.OPFCalendarEventSetIsOwner = OPFCalendarEventSetIsOwner
    def get_OPFCalendarEventCopyLocation(self): return self.OPFCalendarEventCopyLocation
    def set_OPFCalendarEventCopyLocation(self, OPFCalendarEventCopyLocation): self.OPFCalendarEventCopyLocation = OPFCalendarEventCopyLocation
    def get_OPFCalendarEventCopyStartTimeZone(self): return self.OPFCalendarEventCopyStartTimeZone
    def set_OPFCalendarEventCopyStartTimeZone(self, OPFCalendarEventCopyStartTimeZone): self.OPFCalendarEventCopyStartTimeZone = OPFCalendarEventCopyStartTimeZone
    def get_OPFCalendarEventCopyOriginalReminderTime(self): return self.OPFCalendarEventCopyOriginalReminderTime
    def set_OPFCalendarEventCopyOriginalReminderTime(self, OPFCalendarEventCopyOriginalReminderTime): self.OPFCalendarEventCopyOriginalReminderTime = OPFCalendarEventCopyOriginalReminderTime
    def get_OPFCalendarEventCopyRecurrence(self): return self.OPFCalendarEventCopyRecurrence
    def set_OPFCalendarEventCopyRecurrence(self, OPFCalendarEventCopyRecurrence): self.OPFCalendarEventCopyRecurrence = OPFCalendarEventCopyRecurrence
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFCalendarEventCopyCategoryList is not None or
            self.OPFCalendarEventCopyPrimaryCategory is not None or
            self.InvitationsHaveBeenSent is not None or
            self.OPFCalendarEventAllowNewTimeProposal is not None or
            self.OPFCalendarEventCopyDismissTime is not None or
            self.OPFCalendarEventCopyEndTime is not None or
            self.OPFCalendarEventCopyEndTimeZone is not None or
            self.OPFCalendarEventCopyFreeBusyStatus is not None or
            self.OPFCalendarEventCopyModDate is not None or
            self.OPFCalendarEventCopyReminderDelta is not None or
            self.OPFCalendarEventCopyStartTime is not None or
            self.OPFCalendarEventCopyReminderTime is not None or
            self.OPFCalendarEventCopySummary is not None or
            self.OPFCalendarEventCopyTravelTime is not None or
            self.OPFCalendarEventCopyUUID is not None or
            self.OPFCalendarEventGetAcceptStatus is not None or
            self.OPFCalendarEventGetEndTimeZoneSetToDefault is not None or
            self.OPFCalendarEventGetHasReminder is not None or
            self.OPFCalendarEventGetIsAllDayEvent is not None or
            self.OPFCalendarEventGetIsPrivate is not None or
            self.OPFCalendarEventGetStartTimeZoneICSData is not None or
            self.OPFCalendarEventGetStartTimeZoneSetToDefault is not None or
            self.OPFCalendarEventIsRecurring is not None or
            self.OPFCalendarEventSetIsOwner is not None or
            self.OPFCalendarEventCopyLocation is not None or
            self.OPFCalendarEventCopyStartTimeZone is not None or
            self.OPFCalendarEventCopyOriginalReminderTime is not None or
            self.OPFCalendarEventCopyRecurrence is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='appointmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('appointmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='appointmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='appointmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='appointmentType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='appointmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFCalendarEventCopyCategoryList is not None:
            self.OPFCalendarEventCopyCategoryList.export(outfile, level, namespace_, name_='OPFCalendarEventCopyCategoryList', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyPrimaryCategory is not None:
            self.OPFCalendarEventCopyPrimaryCategory.export(outfile, level, namespace_, name_='OPFCalendarEventCopyPrimaryCategory', pretty_print=pretty_print)
        if self.InvitationsHaveBeenSent is not None:
            self.InvitationsHaveBeenSent.export(outfile, level, namespace_, name_='InvitationsHaveBeenSent', pretty_print=pretty_print)
        if self.OPFCalendarEventAllowNewTimeProposal is not None:
            self.OPFCalendarEventAllowNewTimeProposal.export(outfile, level, namespace_, name_='OPFCalendarEventAllowNewTimeProposal', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyDismissTime is not None:
            self.OPFCalendarEventCopyDismissTime.export(outfile, level, namespace_, name_='OPFCalendarEventCopyDismissTime', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyEndTime is not None:
            self.OPFCalendarEventCopyEndTime.export(outfile, level, namespace_, name_='OPFCalendarEventCopyEndTime', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyEndTimeZone is not None:
            self.OPFCalendarEventCopyEndTimeZone.export(outfile, level, namespace_, name_='OPFCalendarEventCopyEndTimeZone', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyFreeBusyStatus is not None:
            self.OPFCalendarEventCopyFreeBusyStatus.export(outfile, level, namespace_, name_='OPFCalendarEventCopyFreeBusyStatus', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyModDate is not None:
            self.OPFCalendarEventCopyModDate.export(outfile, level, namespace_, name_='OPFCalendarEventCopyModDate', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyReminderDelta is not None:
            self.OPFCalendarEventCopyReminderDelta.export(outfile, level, namespace_, name_='OPFCalendarEventCopyReminderDelta', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyStartTime is not None:
            self.OPFCalendarEventCopyStartTime.export(outfile, level, namespace_, name_='OPFCalendarEventCopyStartTime', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyReminderTime is not None:
            self.OPFCalendarEventCopyReminderTime.export(outfile, level, namespace_, name_='OPFCalendarEventCopyReminderTime', pretty_print=pretty_print)
        if self.OPFCalendarEventCopySummary is not None:
            self.OPFCalendarEventCopySummary.export(outfile, level, namespace_, name_='OPFCalendarEventCopySummary', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyTravelTime is not None:
            self.OPFCalendarEventCopyTravelTime.export(outfile, level, namespace_, name_='OPFCalendarEventCopyTravelTime', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyUUID is not None:
            self.OPFCalendarEventCopyUUID.export(outfile, level, namespace_, name_='OPFCalendarEventCopyUUID', pretty_print=pretty_print)
        if self.OPFCalendarEventGetAcceptStatus is not None:
            self.OPFCalendarEventGetAcceptStatus.export(outfile, level, namespace_, name_='OPFCalendarEventGetAcceptStatus', pretty_print=pretty_print)
        if self.OPFCalendarEventGetEndTimeZoneSetToDefault is not None:
            self.OPFCalendarEventGetEndTimeZoneSetToDefault.export(outfile, level, namespace_, name_='OPFCalendarEventGetEndTimeZoneSetToDefault', pretty_print=pretty_print)
        if self.OPFCalendarEventGetHasReminder is not None:
            self.OPFCalendarEventGetHasReminder.export(outfile, level, namespace_, name_='OPFCalendarEventGetHasReminder', pretty_print=pretty_print)
        if self.OPFCalendarEventGetIsAllDayEvent is not None:
            self.OPFCalendarEventGetIsAllDayEvent.export(outfile, level, namespace_, name_='OPFCalendarEventGetIsAllDayEvent', pretty_print=pretty_print)
        if self.OPFCalendarEventGetIsPrivate is not None:
            self.OPFCalendarEventGetIsPrivate.export(outfile, level, namespace_, name_='OPFCalendarEventGetIsPrivate', pretty_print=pretty_print)
        if self.OPFCalendarEventGetStartTimeZoneICSData is not None:
            self.OPFCalendarEventGetStartTimeZoneICSData.export(outfile, level, namespace_, name_='OPFCalendarEventGetStartTimeZoneICSData', pretty_print=pretty_print)
        if self.OPFCalendarEventGetStartTimeZoneSetToDefault is not None:
            self.OPFCalendarEventGetStartTimeZoneSetToDefault.export(outfile, level, namespace_, name_='OPFCalendarEventGetStartTimeZoneSetToDefault', pretty_print=pretty_print)
        if self.OPFCalendarEventIsRecurring is not None:
            self.OPFCalendarEventIsRecurring.export(outfile, level, namespace_, name_='OPFCalendarEventIsRecurring', pretty_print=pretty_print)
        if self.OPFCalendarEventSetIsOwner is not None:
            self.OPFCalendarEventSetIsOwner.export(outfile, level, namespace_, name_='OPFCalendarEventSetIsOwner', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyLocation is not None:
            self.OPFCalendarEventCopyLocation.export(outfile, level, namespace_, name_='OPFCalendarEventCopyLocation', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyStartTimeZone is not None:
            self.OPFCalendarEventCopyStartTimeZone.export(outfile, level, namespace_, name_='OPFCalendarEventCopyStartTimeZone', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyOriginalReminderTime is not None:
            self.OPFCalendarEventCopyOriginalReminderTime.export(outfile, level, namespace_, name_='OPFCalendarEventCopyOriginalReminderTime', pretty_print=pretty_print)
        if self.OPFCalendarEventCopyRecurrence is not None:
            self.OPFCalendarEventCopyRecurrence.export(outfile, level, namespace_, name_='OPFCalendarEventCopyRecurrence', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFCalendarEventCopyCategoryList':
            obj_ = OPFCalendarEventCopyCategoryListType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyCategoryList = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyCategoryList'
        elif nodeName_ == 'OPFCalendarEventCopyPrimaryCategory':
            obj_ = OPFCalendarEventCopyPrimaryCategoryType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyPrimaryCategory = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyPrimaryCategory'
        elif nodeName_ == 'InvitationsHaveBeenSent':
            obj_ = InvitationsHaveBeenSentType.factory()
            obj_.build(child_)
            self.InvitationsHaveBeenSent = obj_
            obj_.original_tagname_ = 'InvitationsHaveBeenSent'
        elif nodeName_ == 'OPFCalendarEventAllowNewTimeProposal':
            obj_ = OPFCalendarEventAllowNewTimeProposalType.factory()
            obj_.build(child_)
            self.OPFCalendarEventAllowNewTimeProposal = obj_
            obj_.original_tagname_ = 'OPFCalendarEventAllowNewTimeProposal'
        elif nodeName_ == 'OPFCalendarEventCopyDismissTime':
            obj_ = OPFCalendarEventCopyDismissTimeType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyDismissTime = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyDismissTime'
        elif nodeName_ == 'OPFCalendarEventCopyEndTime':
            obj_ = OPFCalendarEventCopyEndTimeType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyEndTime = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyEndTime'
        elif nodeName_ == 'OPFCalendarEventCopyEndTimeZone':
            obj_ = OPFCalendarEventCopyEndTimeZoneType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyEndTimeZone = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyEndTimeZone'
        elif nodeName_ == 'OPFCalendarEventCopyFreeBusyStatus':
            obj_ = OPFCalendarEventCopyFreeBusyStatusType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyFreeBusyStatus = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyFreeBusyStatus'
        elif nodeName_ == 'OPFCalendarEventCopyModDate':
            obj_ = OPFCalendarEventCopyModDateType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyModDate = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyModDate'
        elif nodeName_ == 'OPFCalendarEventCopyReminderDelta':
            obj_ = OPFCalendarEventCopyReminderDeltaType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyReminderDelta = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyReminderDelta'
        elif nodeName_ == 'OPFCalendarEventCopyStartTime':
            obj_ = OPFCalendarEventCopyStartTimeType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyStartTime = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyStartTime'
        elif nodeName_ == 'OPFCalendarEventCopyReminderTime':
            obj_ = OPFCalendarEventCopyReminderTimeType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyReminderTime = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyReminderTime'
        elif nodeName_ == 'OPFCalendarEventCopySummary':
            obj_ = OPFCalendarEventCopySummaryType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopySummary = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopySummary'
        elif nodeName_ == 'OPFCalendarEventCopyTravelTime':
            obj_ = OPFCalendarEventCopyTravelTimeType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyTravelTime = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyTravelTime'
        elif nodeName_ == 'OPFCalendarEventCopyUUID':
            obj_ = OPFCalendarEventCopyUUIDType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyUUID = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyUUID'
        elif nodeName_ == 'OPFCalendarEventGetAcceptStatus':
            obj_ = OPFCalendarEventGetAcceptStatusType.factory()
            obj_.build(child_)
            self.OPFCalendarEventGetAcceptStatus = obj_
            obj_.original_tagname_ = 'OPFCalendarEventGetAcceptStatus'
        elif nodeName_ == 'OPFCalendarEventGetEndTimeZoneSetToDefault':
            obj_ = OPFCalendarEventGetEndTimeZoneSetToDefaultType.factory()
            obj_.build(child_)
            self.OPFCalendarEventGetEndTimeZoneSetToDefault = obj_
            obj_.original_tagname_ = 'OPFCalendarEventGetEndTimeZoneSetToDefault'
        elif nodeName_ == 'OPFCalendarEventGetHasReminder':
            obj_ = OPFCalendarEventGetHasReminderType.factory()
            obj_.build(child_)
            self.OPFCalendarEventGetHasReminder = obj_
            obj_.original_tagname_ = 'OPFCalendarEventGetHasReminder'
        elif nodeName_ == 'OPFCalendarEventGetIsAllDayEvent':
            obj_ = OPFCalendarEventGetIsAllDayEventType.factory()
            obj_.build(child_)
            self.OPFCalendarEventGetIsAllDayEvent = obj_
            obj_.original_tagname_ = 'OPFCalendarEventGetIsAllDayEvent'
        elif nodeName_ == 'OPFCalendarEventGetIsPrivate':
            obj_ = OPFCalendarEventGetIsPrivateType.factory()
            obj_.build(child_)
            self.OPFCalendarEventGetIsPrivate = obj_
            obj_.original_tagname_ = 'OPFCalendarEventGetIsPrivate'
        elif nodeName_ == 'OPFCalendarEventGetStartTimeZoneICSData':
            obj_ = OPFCalendarEventGetStartTimeZoneICSDataType.factory()
            obj_.build(child_)
            self.OPFCalendarEventGetStartTimeZoneICSData = obj_
            obj_.original_tagname_ = 'OPFCalendarEventGetStartTimeZoneICSData'
        elif nodeName_ == 'OPFCalendarEventGetStartTimeZoneSetToDefault':
            obj_ = OPFCalendarEventGetStartTimeZoneSetToDefaultType.factory()
            obj_.build(child_)
            self.OPFCalendarEventGetStartTimeZoneSetToDefault = obj_
            obj_.original_tagname_ = 'OPFCalendarEventGetStartTimeZoneSetToDefault'
        elif nodeName_ == 'OPFCalendarEventIsRecurring':
            obj_ = OPFCalendarEventIsRecurringType.factory()
            obj_.build(child_)
            self.OPFCalendarEventIsRecurring = obj_
            obj_.original_tagname_ = 'OPFCalendarEventIsRecurring'
        elif nodeName_ == 'OPFCalendarEventSetIsOwner':
            obj_ = OPFCalendarEventSetIsOwnerType.factory()
            obj_.build(child_)
            self.OPFCalendarEventSetIsOwner = obj_
            obj_.original_tagname_ = 'OPFCalendarEventSetIsOwner'
        elif nodeName_ == 'OPFCalendarEventCopyLocation':
            obj_ = OPFCalendarEventCopyLocationType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyLocation = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyLocation'
        elif nodeName_ == 'OPFCalendarEventCopyStartTimeZone':
            obj_ = OPFCalendarEventCopyStartTimeZoneType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyStartTimeZone = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyStartTimeZone'
        elif nodeName_ == 'OPFCalendarEventCopyOriginalReminderTime':
            obj_ = OPFCalendarEventCopyOriginalReminderTimeType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyOriginalReminderTime = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyOriginalReminderTime'
        elif nodeName_ == 'OPFCalendarEventCopyRecurrence':
            obj_ = OPFCalendarEventCopyRecurrenceType.factory()
            obj_.build(child_)
            self.OPFCalendarEventCopyRecurrence = obj_
            obj_.original_tagname_ = 'OPFCalendarEventCopyRecurrence'
# end class appointmentType


class OPFCalendarEventCopyCategoryListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, category=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        if category is None:
            self.category = []
        else:
            self.category = category
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyCategoryListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyCategoryListType.subclass:
            return OPFCalendarEventCopyCategoryListType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyCategoryListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def add_category(self, value): self.category.append(value)
    def insert_category_at(self, index, value): self.category.insert(index, value)
    def replace_category_at(self, index, value): self.category[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.category
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyCategoryListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyCategoryListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyCategoryListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyCategoryListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyCategoryListType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyCategoryListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for category_ in self.category:
            category_.export(outfile, level, namespace_, name_='category', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'category':
            obj_ = categoryType.factory()
            obj_.build(child_)
            self.category.append(obj_)
            obj_.original_tagname_ = 'category'
# end class OPFCalendarEventCopyCategoryListType


class categoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OPFCategoryCopyBackgroundColor=None, OPFCategoryCopyName=None, space=None):
        self.original_tagname_ = None
        self.OPFCategoryCopyBackgroundColor = _cast(None, OPFCategoryCopyBackgroundColor)
        self.OPFCategoryCopyName = _cast(None, OPFCategoryCopyName)
        self.space = _cast(None, space)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType.subclass:
            return categoryType.subclass(*args_, **kwargs_)
        else:
            return categoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCategoryCopyBackgroundColor(self): return self.OPFCategoryCopyBackgroundColor
    def set_OPFCategoryCopyBackgroundColor(self, OPFCategoryCopyBackgroundColor): self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
    def get_OPFCategoryCopyName(self): return self.OPFCategoryCopyName
    def set_OPFCategoryCopyName(self, OPFCategoryCopyName): self.OPFCategoryCopyName = OPFCategoryCopyName
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='categoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='categoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='categoryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='categoryType'):
        if self.OPFCategoryCopyBackgroundColor is not None and 'OPFCategoryCopyBackgroundColor' not in already_processed:
            already_processed.add('OPFCategoryCopyBackgroundColor')
            outfile.write(' OPFCategoryCopyBackgroundColor=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFCategoryCopyBackgroundColor), input_name='OPFCategoryCopyBackgroundColor')), ))
        if self.OPFCategoryCopyName is not None and 'OPFCategoryCopyName' not in already_processed:
            already_processed.add('OPFCategoryCopyName')
            outfile.write(' OPFCategoryCopyName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFCategoryCopyName), input_name='OPFCategoryCopyName')), ))
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='categoryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('OPFCategoryCopyBackgroundColor', node)
        if value is not None and 'OPFCategoryCopyBackgroundColor' not in already_processed:
            already_processed.add('OPFCategoryCopyBackgroundColor')
            self.OPFCategoryCopyBackgroundColor = value
        value = find_attr_value_('OPFCategoryCopyName', node)
        if value is not None and 'OPFCategoryCopyName' not in already_processed:
            already_processed.add('OPFCategoryCopyName')
            self.OPFCategoryCopyName = value
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class categoryType


class OPFCalendarEventCopyPrimaryCategoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFCategoryCopyBackgroundColor=None, OPFCategoryCopyName=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
        self.OPFCategoryCopyName = OPFCategoryCopyName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyPrimaryCategoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyPrimaryCategoryType.subclass:
            return OPFCalendarEventCopyPrimaryCategoryType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyPrimaryCategoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCategoryCopyBackgroundColor(self): return self.OPFCategoryCopyBackgroundColor
    def set_OPFCategoryCopyBackgroundColor(self, OPFCategoryCopyBackgroundColor): self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
    def get_OPFCategoryCopyName(self): return self.OPFCategoryCopyName
    def set_OPFCategoryCopyName(self, OPFCategoryCopyName): self.OPFCategoryCopyName = OPFCategoryCopyName
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFCategoryCopyBackgroundColor is not None or
            self.OPFCategoryCopyName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyPrimaryCategoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyPrimaryCategoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyPrimaryCategoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyPrimaryCategoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyPrimaryCategoryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyPrimaryCategoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFCategoryCopyBackgroundColor is not None:
            self.OPFCategoryCopyBackgroundColor.export(outfile, level, namespace_, name_='OPFCategoryCopyBackgroundColor', pretty_print=pretty_print)
        if self.OPFCategoryCopyName is not None:
            self.OPFCategoryCopyName.export(outfile, level, namespace_, name_='OPFCategoryCopyName', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFCategoryCopyBackgroundColor':
            obj_ = OPFCategoryCopyBackgroundColorType.factory()
            obj_.build(child_)
            self.OPFCategoryCopyBackgroundColor = obj_
            obj_.original_tagname_ = 'OPFCategoryCopyBackgroundColor'
        elif nodeName_ == 'OPFCategoryCopyName':
            obj_ = OPFCategoryCopyNameType.factory()
            obj_.build(child_)
            self.OPFCategoryCopyName = obj_
            obj_.original_tagname_ = 'OPFCategoryCopyName'
# end class OPFCalendarEventCopyPrimaryCategoryType


class OPFCategoryCopyBackgroundColorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCategoryCopyBackgroundColorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCategoryCopyBackgroundColorType.subclass:
            return OPFCategoryCopyBackgroundColorType.subclass(*args_, **kwargs_)
        else:
            return OPFCategoryCopyBackgroundColorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCategoryCopyBackgroundColorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCategoryCopyBackgroundColorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCategoryCopyBackgroundColorType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCategoryCopyBackgroundColorType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCategoryCopyBackgroundColorType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCategoryCopyBackgroundColorType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCategoryCopyBackgroundColorType


class OPFCategoryCopyNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCategoryCopyNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCategoryCopyNameType.subclass:
            return OPFCategoryCopyNameType.subclass(*args_, **kwargs_)
        else:
            return OPFCategoryCopyNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCategoryCopyNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCategoryCopyNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCategoryCopyNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCategoryCopyNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCategoryCopyNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCategoryCopyNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCategoryCopyNameType


class InvitationsHaveBeenSentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InvitationsHaveBeenSentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InvitationsHaveBeenSentType.subclass:
            return InvitationsHaveBeenSentType.subclass(*args_, **kwargs_)
        else:
            return InvitationsHaveBeenSentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='InvitationsHaveBeenSentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InvitationsHaveBeenSentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InvitationsHaveBeenSentType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='InvitationsHaveBeenSentType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InvitationsHaveBeenSentType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='InvitationsHaveBeenSentType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class InvitationsHaveBeenSentType


class OPFCalendarEventAllowNewTimeProposalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventAllowNewTimeProposalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventAllowNewTimeProposalType.subclass:
            return OPFCalendarEventAllowNewTimeProposalType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventAllowNewTimeProposalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventAllowNewTimeProposalType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventAllowNewTimeProposalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventAllowNewTimeProposalType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventAllowNewTimeProposalType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventAllowNewTimeProposalType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventAllowNewTimeProposalType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventAllowNewTimeProposalType


class OPFCalendarEventCopyDismissTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyDismissTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyDismissTimeType.subclass:
            return OPFCalendarEventCopyDismissTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyDismissTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyDismissTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyDismissTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyDismissTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyDismissTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyDismissTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyDismissTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyDismissTimeType


class OPFCalendarEventCopyEndTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyEndTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyEndTimeType.subclass:
            return OPFCalendarEventCopyEndTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyEndTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyEndTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyEndTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyEndTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyEndTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyEndTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyEndTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyEndTimeType


class OPFCalendarEventCopyEndTimeZoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyEndTimeZoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyEndTimeZoneType.subclass:
            return OPFCalendarEventCopyEndTimeZoneType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyEndTimeZoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyEndTimeZoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyEndTimeZoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyEndTimeZoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyEndTimeZoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyEndTimeZoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyEndTimeZoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyEndTimeZoneType


class OPFCalendarEventCopyFreeBusyStatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyFreeBusyStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyFreeBusyStatusType.subclass:
            return OPFCalendarEventCopyFreeBusyStatusType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyFreeBusyStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyFreeBusyStatusType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyFreeBusyStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyFreeBusyStatusType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyFreeBusyStatusType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyFreeBusyStatusType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyFreeBusyStatusType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyFreeBusyStatusType


class OPFCalendarEventCopyModDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyModDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyModDateType.subclass:
            return OPFCalendarEventCopyModDateType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyModDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyModDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyModDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyModDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyModDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyModDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyModDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyModDateType


class OPFCalendarEventCopyReminderDeltaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyReminderDeltaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyReminderDeltaType.subclass:
            return OPFCalendarEventCopyReminderDeltaType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyReminderDeltaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyReminderDeltaType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyReminderDeltaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyReminderDeltaType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyReminderDeltaType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyReminderDeltaType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyReminderDeltaType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyReminderDeltaType


class OPFCalendarEventCopyStartTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyStartTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyStartTimeType.subclass:
            return OPFCalendarEventCopyStartTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyStartTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyStartTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyStartTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyStartTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyStartTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyStartTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyStartTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyStartTimeType


class OPFCalendarEventCopyReminderTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyReminderTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyReminderTimeType.subclass:
            return OPFCalendarEventCopyReminderTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyReminderTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyReminderTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyReminderTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyReminderTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyReminderTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyReminderTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyReminderTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyReminderTimeType


class OPFCalendarEventCopySummaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopySummaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopySummaryType.subclass:
            return OPFCalendarEventCopySummaryType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopySummaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopySummaryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopySummaryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopySummaryType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopySummaryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopySummaryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopySummaryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopySummaryType


class OPFCalendarEventCopyTravelTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyTravelTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyTravelTimeType.subclass:
            return OPFCalendarEventCopyTravelTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyTravelTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyTravelTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyTravelTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyTravelTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyTravelTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyTravelTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyTravelTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyTravelTimeType


class OPFCalendarEventCopyUUIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyUUIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyUUIDType.subclass:
            return OPFCalendarEventCopyUUIDType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyUUIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyUUIDType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyUUIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyUUIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyUUIDType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyUUIDType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyUUIDType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyUUIDType


class OPFCalendarEventGetAcceptStatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventGetAcceptStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventGetAcceptStatusType.subclass:
            return OPFCalendarEventGetAcceptStatusType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventGetAcceptStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventGetAcceptStatusType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventGetAcceptStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventGetAcceptStatusType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventGetAcceptStatusType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventGetAcceptStatusType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventGetAcceptStatusType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventGetAcceptStatusType


class OPFCalendarEventGetEndTimeZoneSetToDefaultType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventGetEndTimeZoneSetToDefaultType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventGetEndTimeZoneSetToDefaultType.subclass:
            return OPFCalendarEventGetEndTimeZoneSetToDefaultType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventGetEndTimeZoneSetToDefaultType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventGetEndTimeZoneSetToDefaultType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventGetEndTimeZoneSetToDefaultType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventGetEndTimeZoneSetToDefaultType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventGetEndTimeZoneSetToDefaultType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventGetEndTimeZoneSetToDefaultType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventGetEndTimeZoneSetToDefaultType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventGetEndTimeZoneSetToDefaultType


class OPFCalendarEventGetHasReminderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventGetHasReminderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventGetHasReminderType.subclass:
            return OPFCalendarEventGetHasReminderType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventGetHasReminderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventGetHasReminderType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventGetHasReminderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventGetHasReminderType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventGetHasReminderType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventGetHasReminderType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventGetHasReminderType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventGetHasReminderType


class OPFCalendarEventGetIsAllDayEventType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventGetIsAllDayEventType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventGetIsAllDayEventType.subclass:
            return OPFCalendarEventGetIsAllDayEventType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventGetIsAllDayEventType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventGetIsAllDayEventType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventGetIsAllDayEventType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventGetIsAllDayEventType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventGetIsAllDayEventType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventGetIsAllDayEventType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventGetIsAllDayEventType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventGetIsAllDayEventType


class OPFCalendarEventGetIsPrivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventGetIsPrivateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventGetIsPrivateType.subclass:
            return OPFCalendarEventGetIsPrivateType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventGetIsPrivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventGetIsPrivateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventGetIsPrivateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventGetIsPrivateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventGetIsPrivateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventGetIsPrivateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventGetIsPrivateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventGetIsPrivateType


class OPFCalendarEventGetStartTimeZoneICSDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventGetStartTimeZoneICSDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventGetStartTimeZoneICSDataType.subclass:
            return OPFCalendarEventGetStartTimeZoneICSDataType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventGetStartTimeZoneICSDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventGetStartTimeZoneICSDataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventGetStartTimeZoneICSDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventGetStartTimeZoneICSDataType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventGetStartTimeZoneICSDataType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventGetStartTimeZoneICSDataType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventGetStartTimeZoneICSDataType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventGetStartTimeZoneICSDataType


class OPFCalendarEventGetStartTimeZoneSetToDefaultType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventGetStartTimeZoneSetToDefaultType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventGetStartTimeZoneSetToDefaultType.subclass:
            return OPFCalendarEventGetStartTimeZoneSetToDefaultType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventGetStartTimeZoneSetToDefaultType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventGetStartTimeZoneSetToDefaultType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventGetStartTimeZoneSetToDefaultType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventGetStartTimeZoneSetToDefaultType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventGetStartTimeZoneSetToDefaultType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventGetStartTimeZoneSetToDefaultType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventGetStartTimeZoneSetToDefaultType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventGetStartTimeZoneSetToDefaultType


class OPFCalendarEventIsRecurringType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventIsRecurringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventIsRecurringType.subclass:
            return OPFCalendarEventIsRecurringType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventIsRecurringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventIsRecurringType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventIsRecurringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventIsRecurringType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventIsRecurringType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventIsRecurringType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventIsRecurringType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventIsRecurringType


class OPFCalendarEventSetIsOwnerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventSetIsOwnerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventSetIsOwnerType.subclass:
            return OPFCalendarEventSetIsOwnerType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventSetIsOwnerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventSetIsOwnerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventSetIsOwnerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventSetIsOwnerType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventSetIsOwnerType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventSetIsOwnerType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventSetIsOwnerType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventSetIsOwnerType


class OPFCalendarEventCopyLocationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyLocationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyLocationType.subclass:
            return OPFCalendarEventCopyLocationType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyLocationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyLocationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyLocationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyLocationType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyLocationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyLocationType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyLocationType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyLocationType


class OPFCalendarEventCopyStartTimeZoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyStartTimeZoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyStartTimeZoneType.subclass:
            return OPFCalendarEventCopyStartTimeZoneType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyStartTimeZoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyStartTimeZoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyStartTimeZoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyStartTimeZoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyStartTimeZoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyStartTimeZoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyStartTimeZoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyStartTimeZoneType


class OPFCalendarEventCopyOriginalReminderTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyOriginalReminderTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyOriginalReminderTimeType.subclass:
            return OPFCalendarEventCopyOriginalReminderTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyOriginalReminderTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyOriginalReminderTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyOriginalReminderTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyOriginalReminderTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyOriginalReminderTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyOriginalReminderTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyOriginalReminderTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCalendarEventCopyOriginalReminderTimeType


class OPFCalendarEventCopyRecurrenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFRecurrenceCopyEndDate=None, OPFRecurrenceCopyStartDate=None, OPFRecurrenceGetOccurenceCount=None, OPFRecurrenceHasEndDate=None, OPFRecurrenceIsNoEnd=None, OPFRecurrenceIsNumbered=None, OPFRecurrencePattern=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFRecurrenceCopyEndDate = OPFRecurrenceCopyEndDate
        self.OPFRecurrenceCopyStartDate = OPFRecurrenceCopyStartDate
        self.OPFRecurrenceGetOccurenceCount = OPFRecurrenceGetOccurenceCount
        self.OPFRecurrenceHasEndDate = OPFRecurrenceHasEndDate
        self.OPFRecurrenceIsNoEnd = OPFRecurrenceIsNoEnd
        self.OPFRecurrenceIsNumbered = OPFRecurrenceIsNumbered
        self.OPFRecurrencePattern = OPFRecurrencePattern
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCalendarEventCopyRecurrenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCalendarEventCopyRecurrenceType.subclass:
            return OPFCalendarEventCopyRecurrenceType.subclass(*args_, **kwargs_)
        else:
            return OPFCalendarEventCopyRecurrenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFRecurrenceCopyEndDate(self): return self.OPFRecurrenceCopyEndDate
    def set_OPFRecurrenceCopyEndDate(self, OPFRecurrenceCopyEndDate): self.OPFRecurrenceCopyEndDate = OPFRecurrenceCopyEndDate
    def get_OPFRecurrenceCopyStartDate(self): return self.OPFRecurrenceCopyStartDate
    def set_OPFRecurrenceCopyStartDate(self, OPFRecurrenceCopyStartDate): self.OPFRecurrenceCopyStartDate = OPFRecurrenceCopyStartDate
    def get_OPFRecurrenceGetOccurenceCount(self): return self.OPFRecurrenceGetOccurenceCount
    def set_OPFRecurrenceGetOccurenceCount(self, OPFRecurrenceGetOccurenceCount): self.OPFRecurrenceGetOccurenceCount = OPFRecurrenceGetOccurenceCount
    def get_OPFRecurrenceHasEndDate(self): return self.OPFRecurrenceHasEndDate
    def set_OPFRecurrenceHasEndDate(self, OPFRecurrenceHasEndDate): self.OPFRecurrenceHasEndDate = OPFRecurrenceHasEndDate
    def get_OPFRecurrenceIsNoEnd(self): return self.OPFRecurrenceIsNoEnd
    def set_OPFRecurrenceIsNoEnd(self, OPFRecurrenceIsNoEnd): self.OPFRecurrenceIsNoEnd = OPFRecurrenceIsNoEnd
    def get_OPFRecurrenceIsNumbered(self): return self.OPFRecurrenceIsNumbered
    def set_OPFRecurrenceIsNumbered(self, OPFRecurrenceIsNumbered): self.OPFRecurrenceIsNumbered = OPFRecurrenceIsNumbered
    def get_OPFRecurrencePattern(self): return self.OPFRecurrencePattern
    def set_OPFRecurrencePattern(self, OPFRecurrencePattern): self.OPFRecurrencePattern = OPFRecurrencePattern
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFRecurrenceCopyEndDate is not None or
            self.OPFRecurrenceCopyStartDate is not None or
            self.OPFRecurrenceGetOccurenceCount is not None or
            self.OPFRecurrenceHasEndDate is not None or
            self.OPFRecurrenceIsNoEnd is not None or
            self.OPFRecurrenceIsNumbered is not None or
            self.OPFRecurrencePattern is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyRecurrenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCalendarEventCopyRecurrenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCalendarEventCopyRecurrenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCalendarEventCopyRecurrenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCalendarEventCopyRecurrenceType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCalendarEventCopyRecurrenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFRecurrenceCopyEndDate is not None:
            self.OPFRecurrenceCopyEndDate.export(outfile, level, namespace_, name_='OPFRecurrenceCopyEndDate', pretty_print=pretty_print)
        if self.OPFRecurrenceCopyStartDate is not None:
            self.OPFRecurrenceCopyStartDate.export(outfile, level, namespace_, name_='OPFRecurrenceCopyStartDate', pretty_print=pretty_print)
        if self.OPFRecurrenceGetOccurenceCount is not None:
            self.OPFRecurrenceGetOccurenceCount.export(outfile, level, namespace_, name_='OPFRecurrenceGetOccurenceCount', pretty_print=pretty_print)
        if self.OPFRecurrenceHasEndDate is not None:
            self.OPFRecurrenceHasEndDate.export(outfile, level, namespace_, name_='OPFRecurrenceHasEndDate', pretty_print=pretty_print)
        if self.OPFRecurrenceIsNoEnd is not None:
            self.OPFRecurrenceIsNoEnd.export(outfile, level, namespace_, name_='OPFRecurrenceIsNoEnd', pretty_print=pretty_print)
        if self.OPFRecurrenceIsNumbered is not None:
            self.OPFRecurrenceIsNumbered.export(outfile, level, namespace_, name_='OPFRecurrenceIsNumbered', pretty_print=pretty_print)
        if self.OPFRecurrencePattern is not None:
            self.OPFRecurrencePattern.export(outfile, level, namespace_, name_='OPFRecurrencePattern', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFRecurrenceCopyEndDate':
            obj_ = OPFRecurrenceCopyEndDateType.factory()
            obj_.build(child_)
            self.OPFRecurrenceCopyEndDate = obj_
            obj_.original_tagname_ = 'OPFRecurrenceCopyEndDate'
        elif nodeName_ == 'OPFRecurrenceCopyStartDate':
            obj_ = OPFRecurrenceCopyStartDateType.factory()
            obj_.build(child_)
            self.OPFRecurrenceCopyStartDate = obj_
            obj_.original_tagname_ = 'OPFRecurrenceCopyStartDate'
        elif nodeName_ == 'OPFRecurrenceGetOccurenceCount':
            obj_ = OPFRecurrenceGetOccurenceCountType.factory()
            obj_.build(child_)
            self.OPFRecurrenceGetOccurenceCount = obj_
            obj_.original_tagname_ = 'OPFRecurrenceGetOccurenceCount'
        elif nodeName_ == 'OPFRecurrenceHasEndDate':
            obj_ = OPFRecurrenceHasEndDateType.factory()
            obj_.build(child_)
            self.OPFRecurrenceHasEndDate = obj_
            obj_.original_tagname_ = 'OPFRecurrenceHasEndDate'
        elif nodeName_ == 'OPFRecurrenceIsNoEnd':
            obj_ = OPFRecurrenceIsNoEndType.factory()
            obj_.build(child_)
            self.OPFRecurrenceIsNoEnd = obj_
            obj_.original_tagname_ = 'OPFRecurrenceIsNoEnd'
        elif nodeName_ == 'OPFRecurrenceIsNumbered':
            obj_ = OPFRecurrenceIsNumberedType.factory()
            obj_.build(child_)
            self.OPFRecurrenceIsNumbered = obj_
            obj_.original_tagname_ = 'OPFRecurrenceIsNumbered'
        elif nodeName_ == 'OPFRecurrencePattern':
            obj_ = OPFRecurrencePatternType1.factory()
            obj_.build(child_)
            self.OPFRecurrencePattern = obj_
            obj_.original_tagname_ = 'OPFRecurrencePattern'
# end class OPFCalendarEventCopyRecurrenceType


class OPFRecurrenceCopyEndDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceCopyEndDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceCopyEndDateType.subclass:
            return OPFRecurrenceCopyEndDateType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceCopyEndDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceCopyEndDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceCopyEndDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceCopyEndDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceCopyEndDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceCopyEndDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceCopyEndDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceCopyEndDateType


class OPFRecurrenceCopyStartDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceCopyStartDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceCopyStartDateType.subclass:
            return OPFRecurrenceCopyStartDateType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceCopyStartDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceCopyStartDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceCopyStartDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceCopyStartDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceCopyStartDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceCopyStartDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceCopyStartDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceCopyStartDateType


class OPFRecurrenceGetOccurenceCountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceGetOccurenceCountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceGetOccurenceCountType.subclass:
            return OPFRecurrenceGetOccurenceCountType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceGetOccurenceCountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceGetOccurenceCountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceGetOccurenceCountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceGetOccurenceCountType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceGetOccurenceCountType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceGetOccurenceCountType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceGetOccurenceCountType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceGetOccurenceCountType


class OPFRecurrenceHasEndDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceHasEndDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceHasEndDateType.subclass:
            return OPFRecurrenceHasEndDateType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceHasEndDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceHasEndDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceHasEndDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceHasEndDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceHasEndDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceHasEndDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceHasEndDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceHasEndDateType


class OPFRecurrenceIsNoEndType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceIsNoEndType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceIsNoEndType.subclass:
            return OPFRecurrenceIsNoEndType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceIsNoEndType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceIsNoEndType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceIsNoEndType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceIsNoEndType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceIsNoEndType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceIsNoEndType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceIsNoEndType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceIsNoEndType


class OPFRecurrenceIsNumberedType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceIsNumberedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceIsNumberedType.subclass:
            return OPFRecurrenceIsNumberedType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceIsNumberedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceIsNumberedType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceIsNumberedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceIsNumberedType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceIsNumberedType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceIsNumberedType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceIsNumberedType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceIsNumberedType


class OPFRecurrencePatternType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFRecurrencePatternDaysOfWeek=None, OPFRecurrencePatternInterval=None, OPFRecurrencePatternType=None, OPFRecurrencePatternDayOfMonth=None, OPFRecurrencePatternMonth=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFRecurrencePatternDaysOfWeek = OPFRecurrencePatternDaysOfWeek
        self.OPFRecurrencePatternInterval = OPFRecurrencePatternInterval
        self.OPFRecurrencePatternType = OPFRecurrencePatternType
        self.OPFRecurrencePatternDayOfMonth = OPFRecurrencePatternDayOfMonth
        self.OPFRecurrencePatternMonth = OPFRecurrencePatternMonth
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternType1.subclass:
            return OPFRecurrencePatternType1.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFRecurrencePatternDaysOfWeek(self): return self.OPFRecurrencePatternDaysOfWeek
    def set_OPFRecurrencePatternDaysOfWeek(self, OPFRecurrencePatternDaysOfWeek): self.OPFRecurrencePatternDaysOfWeek = OPFRecurrencePatternDaysOfWeek
    def get_OPFRecurrencePatternInterval(self): return self.OPFRecurrencePatternInterval
    def set_OPFRecurrencePatternInterval(self, OPFRecurrencePatternInterval): self.OPFRecurrencePatternInterval = OPFRecurrencePatternInterval
    def get_OPFRecurrencePatternType(self): return self.OPFRecurrencePatternType
    def set_OPFRecurrencePatternType(self, OPFRecurrencePatternType): self.OPFRecurrencePatternType = OPFRecurrencePatternType
    def get_OPFRecurrencePatternDayOfMonth(self): return self.OPFRecurrencePatternDayOfMonth
    def set_OPFRecurrencePatternDayOfMonth(self, OPFRecurrencePatternDayOfMonth): self.OPFRecurrencePatternDayOfMonth = OPFRecurrencePatternDayOfMonth
    def get_OPFRecurrencePatternMonth(self): return self.OPFRecurrencePatternMonth
    def set_OPFRecurrencePatternMonth(self, OPFRecurrencePatternMonth): self.OPFRecurrencePatternMonth = OPFRecurrencePatternMonth
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFRecurrencePatternDaysOfWeek is not None or
            self.OPFRecurrencePatternInterval is not None or
            self.OPFRecurrencePatternType is not None or
            self.OPFRecurrencePatternDayOfMonth is not None or
            self.OPFRecurrencePatternMonth is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternType1', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternType1'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFRecurrencePatternDaysOfWeek is not None:
            self.OPFRecurrencePatternDaysOfWeek.export(outfile, level, namespace_, name_='OPFRecurrencePatternDaysOfWeek', pretty_print=pretty_print)
        if self.OPFRecurrencePatternInterval is not None:
            self.OPFRecurrencePatternInterval.export(outfile, level, namespace_, name_='OPFRecurrencePatternInterval', pretty_print=pretty_print)
        if self.OPFRecurrencePatternType is not None:
            self.OPFRecurrencePatternType.export(outfile, level, namespace_, name_='OPFRecurrencePatternType', pretty_print=pretty_print)
        if self.OPFRecurrencePatternDayOfMonth is not None:
            self.OPFRecurrencePatternDayOfMonth.export(outfile, level, namespace_, name_='OPFRecurrencePatternDayOfMonth', pretty_print=pretty_print)
        if self.OPFRecurrencePatternMonth is not None:
            self.OPFRecurrencePatternMonth.export(outfile, level, namespace_, name_='OPFRecurrencePatternMonth', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFRecurrencePatternDaysOfWeek':
            obj_ = OPFRecurrencePatternDaysOfWeekType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternDaysOfWeek = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternDaysOfWeek'
        elif nodeName_ == 'OPFRecurrencePatternInterval':
            obj_ = OPFRecurrencePatternIntervalType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternInterval = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternInterval'
        elif nodeName_ == 'OPFRecurrencePatternType':
            obj_ = OPFRecurrencePatternTypeType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternType = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternType'
        elif nodeName_ == 'OPFRecurrencePatternDayOfMonth':
            obj_ = OPFRecurrencePatternDayOfMonthType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternDayOfMonth = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternDayOfMonth'
        elif nodeName_ == 'OPFRecurrencePatternMonth':
            obj_ = OPFRecurrencePatternMonthType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternMonth = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternMonth'
# end class OPFRecurrencePatternType1


class OPFRecurrencePatternDaysOfWeekType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, allDays=None, friday=None, monday=None, tuesday=None, wednesday=None, thursday=None, sunday=None, saturday=None, weekdays=None, weekenddays=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.allDays = allDays
        self.friday = friday
        self.monday = monday
        self.tuesday = tuesday
        self.wednesday = wednesday
        self.thursday = thursday
        self.sunday = sunday
        self.saturday = saturday
        self.weekdays = weekdays
        self.weekenddays = weekenddays
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternDaysOfWeekType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternDaysOfWeekType.subclass:
            return OPFRecurrencePatternDaysOfWeekType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternDaysOfWeekType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_allDays(self): return self.allDays
    def set_allDays(self, allDays): self.allDays = allDays
    def get_friday(self): return self.friday
    def set_friday(self, friday): self.friday = friday
    def get_monday(self): return self.monday
    def set_monday(self, monday): self.monday = monday
    def get_tuesday(self): return self.tuesday
    def set_tuesday(self, tuesday): self.tuesday = tuesday
    def get_wednesday(self): return self.wednesday
    def set_wednesday(self, wednesday): self.wednesday = wednesday
    def get_thursday(self): return self.thursday
    def set_thursday(self, thursday): self.thursday = thursday
    def get_sunday(self): return self.sunday
    def set_sunday(self, sunday): self.sunday = sunday
    def get_saturday(self): return self.saturday
    def set_saturday(self, saturday): self.saturday = saturday
    def get_weekdays(self): return self.weekdays
    def set_weekdays(self, weekdays): self.weekdays = weekdays
    def get_weekenddays(self): return self.weekenddays
    def set_weekenddays(self, weekenddays): self.weekenddays = weekenddays
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.allDays is not None or
            self.friday is not None or
            self.monday is not None or
            self.tuesday is not None or
            self.wednesday is not None or
            self.thursday is not None or
            self.sunday is not None or
            self.saturday is not None or
            self.weekdays is not None or
            self.weekenddays is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternDaysOfWeekType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternDaysOfWeekType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternDaysOfWeekType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternDaysOfWeekType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternDaysOfWeekType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternDaysOfWeekType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.allDays is not None:
            self.allDays.export(outfile, level, namespace_, name_='allDays', pretty_print=pretty_print)
        if self.friday is not None:
            self.friday.export(outfile, level, namespace_, name_='friday', pretty_print=pretty_print)
        if self.monday is not None:
            self.monday.export(outfile, level, namespace_, name_='monday', pretty_print=pretty_print)
        if self.tuesday is not None:
            self.tuesday.export(outfile, level, namespace_, name_='tuesday', pretty_print=pretty_print)
        if self.wednesday is not None:
            self.wednesday.export(outfile, level, namespace_, name_='wednesday', pretty_print=pretty_print)
        if self.thursday is not None:
            self.thursday.export(outfile, level, namespace_, name_='thursday', pretty_print=pretty_print)
        if self.sunday is not None:
            self.sunday.export(outfile, level, namespace_, name_='sunday', pretty_print=pretty_print)
        if self.saturday is not None:
            self.saturday.export(outfile, level, namespace_, name_='saturday', pretty_print=pretty_print)
        if self.weekdays is not None:
            self.weekdays.export(outfile, level, namespace_, name_='weekdays', pretty_print=pretty_print)
        if self.weekenddays is not None:
            self.weekenddays.export(outfile, level, namespace_, name_='weekenddays', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'allDays':
            obj_ = allDaysType.factory()
            obj_.build(child_)
            self.allDays = obj_
            obj_.original_tagname_ = 'allDays'
        elif nodeName_ == 'friday':
            obj_ = fridayType.factory()
            obj_.build(child_)
            self.friday = obj_
            obj_.original_tagname_ = 'friday'
        elif nodeName_ == 'monday':
            obj_ = mondayType.factory()
            obj_.build(child_)
            self.monday = obj_
            obj_.original_tagname_ = 'monday'
        elif nodeName_ == 'tuesday':
            obj_ = tuesdayType.factory()
            obj_.build(child_)
            self.tuesday = obj_
            obj_.original_tagname_ = 'tuesday'
        elif nodeName_ == 'wednesday':
            obj_ = wednesdayType.factory()
            obj_.build(child_)
            self.wednesday = obj_
            obj_.original_tagname_ = 'wednesday'
        elif nodeName_ == 'thursday':
            obj_ = thursdayType.factory()
            obj_.build(child_)
            self.thursday = obj_
            obj_.original_tagname_ = 'thursday'
        elif nodeName_ == 'sunday':
            obj_ = sundayType.factory()
            obj_.build(child_)
            self.sunday = obj_
            obj_.original_tagname_ = 'sunday'
        elif nodeName_ == 'saturday':
            obj_ = saturdayType.factory()
            obj_.build(child_)
            self.saturday = obj_
            obj_.original_tagname_ = 'saturday'
        elif nodeName_ == 'weekdays':
            obj_ = weekdaysType.factory()
            obj_.build(child_)
            self.weekdays = obj_
            obj_.original_tagname_ = 'weekdays'
        elif nodeName_ == 'weekenddays':
            obj_ = weekenddaysType.factory()
            obj_.build(child_)
            self.weekenddays = obj_
            obj_.original_tagname_ = 'weekenddays'
# end class OPFRecurrencePatternDaysOfWeekType


class allDaysType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, allDaysType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if allDaysType.subclass:
            return allDaysType.subclass(*args_, **kwargs_)
        else:
            return allDaysType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='allDaysType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('allDaysType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='allDaysType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='allDaysType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='allDaysType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='allDaysType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class allDaysType


class fridayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fridayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fridayType.subclass:
            return fridayType.subclass(*args_, **kwargs_)
        else:
            return fridayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='fridayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fridayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='fridayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='fridayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='fridayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='fridayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class fridayType


class mondayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, mondayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if mondayType.subclass:
            return mondayType.subclass(*args_, **kwargs_)
        else:
            return mondayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='mondayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('mondayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mondayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='mondayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='mondayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='mondayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class mondayType


class tuesdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tuesdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tuesdayType.subclass:
            return tuesdayType.subclass(*args_, **kwargs_)
        else:
            return tuesdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tuesdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tuesdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tuesdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tuesdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tuesdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='tuesdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tuesdayType


class wednesdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, wednesdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if wednesdayType.subclass:
            return wednesdayType.subclass(*args_, **kwargs_)
        else:
            return wednesdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='wednesdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('wednesdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='wednesdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='wednesdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='wednesdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='wednesdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class wednesdayType


class thursdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, thursdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if thursdayType.subclass:
            return thursdayType.subclass(*args_, **kwargs_)
        else:
            return thursdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='thursdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('thursdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='thursdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='thursdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='thursdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='thursdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class thursdayType


class sundayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, sundayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if sundayType.subclass:
            return sundayType.subclass(*args_, **kwargs_)
        else:
            return sundayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sundayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('sundayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sundayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='sundayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sundayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='sundayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class sundayType


class saturdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, saturdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if saturdayType.subclass:
            return saturdayType.subclass(*args_, **kwargs_)
        else:
            return saturdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='saturdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('saturdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='saturdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='saturdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='saturdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='saturdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class saturdayType


class weekdaysType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, weekdaysType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if weekdaysType.subclass:
            return weekdaysType.subclass(*args_, **kwargs_)
        else:
            return weekdaysType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='weekdaysType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('weekdaysType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='weekdaysType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='weekdaysType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='weekdaysType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='weekdaysType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class weekdaysType


class weekenddaysType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, weekenddaysType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if weekenddaysType.subclass:
            return weekenddaysType.subclass(*args_, **kwargs_)
        else:
            return weekenddaysType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='weekenddaysType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('weekenddaysType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='weekenddaysType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='weekenddaysType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='weekenddaysType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='weekenddaysType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class weekenddaysType


class OPFRecurrencePatternIntervalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternIntervalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternIntervalType.subclass:
            return OPFRecurrencePatternIntervalType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternIntervalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternIntervalType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternIntervalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternIntervalType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternIntervalType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternIntervalType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternIntervalType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrencePatternIntervalType


class OPFRecurrencePatternTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternTypeType.subclass:
            return OPFRecurrencePatternTypeType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternTypeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternTypeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternTypeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternTypeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternTypeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrencePatternTypeType


class OPFRecurrencePatternDayOfMonthType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternDayOfMonthType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternDayOfMonthType.subclass:
            return OPFRecurrencePatternDayOfMonthType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternDayOfMonthType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternDayOfMonthType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternDayOfMonthType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternDayOfMonthType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternDayOfMonthType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternDayOfMonthType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternDayOfMonthType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrencePatternDayOfMonthType


class OPFRecurrencePatternMonthType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternMonthType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternMonthType.subclass:
            return OPFRecurrencePatternMonthType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternMonthType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternMonthType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternMonthType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternMonthType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternMonthType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternMonthType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternMonthType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrencePatternMonthType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'appointments'
        rootClass = appointments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'appointments'
        rootClass = appointments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'appointments'
        rootClass = appointments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'appointments'
        rootClass = appointments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from appointments import *\n\n')
        sys.stdout.write('import appointments as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "InvitationsHaveBeenSentType",
    "OPFCalendarEventAllowNewTimeProposalType",
    "OPFCalendarEventCopyCategoryListType",
    "OPFCalendarEventCopyDismissTimeType",
    "OPFCalendarEventCopyEndTimeType",
    "OPFCalendarEventCopyEndTimeZoneType",
    "OPFCalendarEventCopyFreeBusyStatusType",
    "OPFCalendarEventCopyLocationType",
    "OPFCalendarEventCopyModDateType",
    "OPFCalendarEventCopyOriginalReminderTimeType",
    "OPFCalendarEventCopyPrimaryCategoryType",
    "OPFCalendarEventCopyRecurrenceType",
    "OPFCalendarEventCopyReminderDeltaType",
    "OPFCalendarEventCopyReminderTimeType",
    "OPFCalendarEventCopyStartTimeType",
    "OPFCalendarEventCopyStartTimeZoneType",
    "OPFCalendarEventCopySummaryType",
    "OPFCalendarEventCopyTravelTimeType",
    "OPFCalendarEventCopyUUIDType",
    "OPFCalendarEventGetAcceptStatusType",
    "OPFCalendarEventGetEndTimeZoneSetToDefaultType",
    "OPFCalendarEventGetHasReminderType",
    "OPFCalendarEventGetIsAllDayEventType",
    "OPFCalendarEventGetIsPrivateType",
    "OPFCalendarEventGetStartTimeZoneICSDataType",
    "OPFCalendarEventGetStartTimeZoneSetToDefaultType",
    "OPFCalendarEventIsRecurringType",
    "OPFCalendarEventSetIsOwnerType",
    "OPFCategoryCopyBackgroundColorType",
    "OPFCategoryCopyNameType",
    "OPFRecurrenceCopyEndDateType",
    "OPFRecurrenceCopyStartDateType",
    "OPFRecurrenceGetOccurenceCountType",
    "OPFRecurrenceHasEndDateType",
    "OPFRecurrenceIsNoEndType",
    "OPFRecurrenceIsNumberedType",
    "OPFRecurrencePatternDayOfMonthType",
    "OPFRecurrencePatternDaysOfWeekType",
    "OPFRecurrencePatternIntervalType",
    "OPFRecurrencePatternMonthType",
    "OPFRecurrencePatternType1",
    "OPFRecurrencePatternTypeType",
    "allDaysType",
    "appointmentType",
    "appointments",
    "categoryType",
    "fridayType",
    "mondayType",
    "saturdayType",
    "sundayType",
    "thursdayType",
    "tuesdayType",
    "wednesdayType",
    "weekdaysType",
    "weekenddaysType"
]
