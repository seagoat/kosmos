#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Aug  2 14:56:15 2018 by generateDS.py version 2.29.19.
# Python 3.5.4 |Anaconda custom (64-bit)| (default, Oct  5 2017, 02:58:14)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
#
# Command line options:
#   ('-o', 'groups.py')
#
# Command line arguments:
#   ../../schema/groups.xsd
#
# Command line:
#   /Users/brian/anaconda/bin/generateDS -o "groups.py" ../../schema/groups.xsd
#
# Current working directory (os.getcwd()):
#   parser
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class groups(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, elementCount=None, group=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.elementCount = _cast(int, elementCount)
        if group is None:
            self.group = []
        else:
            self.group = group
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, groups)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if groups.subclass:
            return groups.subclass(*args_, **kwargs_)
        else:
            return groups(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_group(self): return self.group
    def set_group(self, group): self.group = group
    def add_group(self, value): self.group.append(value)
    def insert_group_at(self, index, value): self.group.insert(index, value)
    def replace_group_at(self, index, value): self.group[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_elementCount(self): return self.elementCount
    def set_elementCount(self, elementCount): self.elementCount = elementCount
    def hasContent_(self):
        if (
            self.group
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='groups', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('groups')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='groups')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='groups', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='groups'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.elementCount is not None and 'elementCount' not in already_processed:
            already_processed.add('elementCount')
            outfile.write(' elementCount="%s"' % self.gds_format_integer(self.elementCount, input_name='elementCount'))
    def exportChildren(self, outfile, level, namespace_='', name_='groups', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for group_ in self.group:
            group_.export(outfile, level, namespace_, name_='group', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('elementCount', node)
        if value is not None and 'elementCount' not in already_processed:
            already_processed.add('elementCount')
            try:
                self.elementCount = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'group':
            obj_ = groupType.factory()
            obj_.build(child_)
            self.group.append(obj_)
            obj_.original_tagname_ = 'group'
# end class groups


class groupType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFGroupCopyDisplayName=None, OPFGroupCopyGetFlagStatus=None, OPFGroupCopyMemberList=None, OPFGroupCopyModDate=None, OPFGroupSuppressNames=None, OPFGroupCopyDueDateTime=None, OPFGroupCopyStartDateTime=None, OPFGroupCopyCategoryList=None, OPFGroupCopyGetPrimaryCategory=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFGroupCopyDisplayName = OPFGroupCopyDisplayName
        self.OPFGroupCopyGetFlagStatus = OPFGroupCopyGetFlagStatus
        self.OPFGroupCopyMemberList = OPFGroupCopyMemberList
        self.OPFGroupCopyModDate = OPFGroupCopyModDate
        self.OPFGroupSuppressNames = OPFGroupSuppressNames
        self.OPFGroupCopyDueDateTime = OPFGroupCopyDueDateTime
        self.OPFGroupCopyStartDateTime = OPFGroupCopyStartDateTime
        self.OPFGroupCopyCategoryList = OPFGroupCopyCategoryList
        self.OPFGroupCopyGetPrimaryCategory = OPFGroupCopyGetPrimaryCategory
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, groupType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if groupType.subclass:
            return groupType.subclass(*args_, **kwargs_)
        else:
            return groupType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFGroupCopyDisplayName(self): return self.OPFGroupCopyDisplayName
    def set_OPFGroupCopyDisplayName(self, OPFGroupCopyDisplayName): self.OPFGroupCopyDisplayName = OPFGroupCopyDisplayName
    def get_OPFGroupCopyGetFlagStatus(self): return self.OPFGroupCopyGetFlagStatus
    def set_OPFGroupCopyGetFlagStatus(self, OPFGroupCopyGetFlagStatus): self.OPFGroupCopyGetFlagStatus = OPFGroupCopyGetFlagStatus
    def get_OPFGroupCopyMemberList(self): return self.OPFGroupCopyMemberList
    def set_OPFGroupCopyMemberList(self, OPFGroupCopyMemberList): self.OPFGroupCopyMemberList = OPFGroupCopyMemberList
    def get_OPFGroupCopyModDate(self): return self.OPFGroupCopyModDate
    def set_OPFGroupCopyModDate(self, OPFGroupCopyModDate): self.OPFGroupCopyModDate = OPFGroupCopyModDate
    def get_OPFGroupSuppressNames(self): return self.OPFGroupSuppressNames
    def set_OPFGroupSuppressNames(self, OPFGroupSuppressNames): self.OPFGroupSuppressNames = OPFGroupSuppressNames
    def get_OPFGroupCopyDueDateTime(self): return self.OPFGroupCopyDueDateTime
    def set_OPFGroupCopyDueDateTime(self, OPFGroupCopyDueDateTime): self.OPFGroupCopyDueDateTime = OPFGroupCopyDueDateTime
    def get_OPFGroupCopyStartDateTime(self): return self.OPFGroupCopyStartDateTime
    def set_OPFGroupCopyStartDateTime(self, OPFGroupCopyStartDateTime): self.OPFGroupCopyStartDateTime = OPFGroupCopyStartDateTime
    def get_OPFGroupCopyCategoryList(self): return self.OPFGroupCopyCategoryList
    def set_OPFGroupCopyCategoryList(self, OPFGroupCopyCategoryList): self.OPFGroupCopyCategoryList = OPFGroupCopyCategoryList
    def get_OPFGroupCopyGetPrimaryCategory(self): return self.OPFGroupCopyGetPrimaryCategory
    def set_OPFGroupCopyGetPrimaryCategory(self, OPFGroupCopyGetPrimaryCategory): self.OPFGroupCopyGetPrimaryCategory = OPFGroupCopyGetPrimaryCategory
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFGroupCopyDisplayName is not None or
            self.OPFGroupCopyGetFlagStatus is not None or
            self.OPFGroupCopyMemberList is not None or
            self.OPFGroupCopyModDate is not None or
            self.OPFGroupSuppressNames is not None or
            self.OPFGroupCopyDueDateTime is not None or
            self.OPFGroupCopyStartDateTime is not None or
            self.OPFGroupCopyCategoryList is not None or
            self.OPFGroupCopyGetPrimaryCategory is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='groupType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('groupType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='groupType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='groupType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='groupType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='groupType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFGroupCopyDisplayName is not None:
            self.OPFGroupCopyDisplayName.export(outfile, level, namespace_, name_='OPFGroupCopyDisplayName', pretty_print=pretty_print)
        if self.OPFGroupCopyGetFlagStatus is not None:
            self.OPFGroupCopyGetFlagStatus.export(outfile, level, namespace_, name_='OPFGroupCopyGetFlagStatus', pretty_print=pretty_print)
        if self.OPFGroupCopyMemberList is not None:
            self.OPFGroupCopyMemberList.export(outfile, level, namespace_, name_='OPFGroupCopyMemberList', pretty_print=pretty_print)
        if self.OPFGroupCopyModDate is not None:
            self.OPFGroupCopyModDate.export(outfile, level, namespace_, name_='OPFGroupCopyModDate', pretty_print=pretty_print)
        if self.OPFGroupSuppressNames is not None:
            self.OPFGroupSuppressNames.export(outfile, level, namespace_, name_='OPFGroupSuppressNames', pretty_print=pretty_print)
        if self.OPFGroupCopyDueDateTime is not None:
            self.OPFGroupCopyDueDateTime.export(outfile, level, namespace_, name_='OPFGroupCopyDueDateTime', pretty_print=pretty_print)
        if self.OPFGroupCopyStartDateTime is not None:
            self.OPFGroupCopyStartDateTime.export(outfile, level, namespace_, name_='OPFGroupCopyStartDateTime', pretty_print=pretty_print)
        if self.OPFGroupCopyCategoryList is not None:
            self.OPFGroupCopyCategoryList.export(outfile, level, namespace_, name_='OPFGroupCopyCategoryList', pretty_print=pretty_print)
        if self.OPFGroupCopyGetPrimaryCategory is not None:
            self.OPFGroupCopyGetPrimaryCategory.export(outfile, level, namespace_, name_='OPFGroupCopyGetPrimaryCategory', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFGroupCopyDisplayName':
            obj_ = OPFGroupCopyDisplayNameType.factory()
            obj_.build(child_)
            self.OPFGroupCopyDisplayName = obj_
            obj_.original_tagname_ = 'OPFGroupCopyDisplayName'
        elif nodeName_ == 'OPFGroupCopyGetFlagStatus':
            obj_ = OPFGroupCopyGetFlagStatusType.factory()
            obj_.build(child_)
            self.OPFGroupCopyGetFlagStatus = obj_
            obj_.original_tagname_ = 'OPFGroupCopyGetFlagStatus'
        elif nodeName_ == 'OPFGroupCopyMemberList':
            obj_ = OPFGroupCopyMemberListType.factory()
            obj_.build(child_)
            self.OPFGroupCopyMemberList = obj_
            obj_.original_tagname_ = 'OPFGroupCopyMemberList'
        elif nodeName_ == 'OPFGroupCopyModDate':
            obj_ = OPFGroupCopyModDateType.factory()
            obj_.build(child_)
            self.OPFGroupCopyModDate = obj_
            obj_.original_tagname_ = 'OPFGroupCopyModDate'
        elif nodeName_ == 'OPFGroupSuppressNames':
            obj_ = OPFGroupSuppressNamesType.factory()
            obj_.build(child_)
            self.OPFGroupSuppressNames = obj_
            obj_.original_tagname_ = 'OPFGroupSuppressNames'
        elif nodeName_ == 'OPFGroupCopyDueDateTime':
            obj_ = OPFGroupCopyDueDateTimeType.factory()
            obj_.build(child_)
            self.OPFGroupCopyDueDateTime = obj_
            obj_.original_tagname_ = 'OPFGroupCopyDueDateTime'
        elif nodeName_ == 'OPFGroupCopyStartDateTime':
            obj_ = OPFGroupCopyStartDateTimeType.factory()
            obj_.build(child_)
            self.OPFGroupCopyStartDateTime = obj_
            obj_.original_tagname_ = 'OPFGroupCopyStartDateTime'
        elif nodeName_ == 'OPFGroupCopyCategoryList':
            obj_ = OPFGroupCopyCategoryListType.factory()
            obj_.build(child_)
            self.OPFGroupCopyCategoryList = obj_
            obj_.original_tagname_ = 'OPFGroupCopyCategoryList'
        elif nodeName_ == 'OPFGroupCopyGetPrimaryCategory':
            obj_ = OPFGroupCopyGetPrimaryCategoryType.factory()
            obj_.build(child_)
            self.OPFGroupCopyGetPrimaryCategory = obj_
            obj_.original_tagname_ = 'OPFGroupCopyGetPrimaryCategory'
# end class groupType


class OPFGroupCopyDisplayNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupCopyDisplayNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupCopyDisplayNameType.subclass:
            return OPFGroupCopyDisplayNameType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupCopyDisplayNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupCopyDisplayNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupCopyDisplayNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupCopyDisplayNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupCopyDisplayNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupCopyDisplayNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupCopyDisplayNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFGroupCopyDisplayNameType


class OPFGroupCopyGetFlagStatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupCopyGetFlagStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupCopyGetFlagStatusType.subclass:
            return OPFGroupCopyGetFlagStatusType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupCopyGetFlagStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupCopyGetFlagStatusType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupCopyGetFlagStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupCopyGetFlagStatusType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupCopyGetFlagStatusType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupCopyGetFlagStatusType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupCopyGetFlagStatusType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFGroupCopyGetFlagStatusType


class OPFGroupCopyMemberListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, emailAddress=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        if emailAddress is None:
            self.emailAddress = []
        else:
            self.emailAddress = emailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupCopyMemberListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupCopyMemberListType.subclass:
            return OPFGroupCopyMemberListType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupCopyMemberListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_emailAddress(self): return self.emailAddress
    def set_emailAddress(self, emailAddress): self.emailAddress = emailAddress
    def add_emailAddress(self, value): self.emailAddress.append(value)
    def insert_emailAddress_at(self, index, value): self.emailAddress.insert(index, value)
    def replace_emailAddress_at(self, index, value): self.emailAddress[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.emailAddress
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupCopyMemberListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupCopyMemberListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupCopyMemberListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupCopyMemberListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupCopyMemberListType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupCopyMemberListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for emailAddress_ in self.emailAddress:
            emailAddress_.export(outfile, level, namespace_, name_='emailAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'emailAddress':
            obj_ = emailAddressType.factory()
            obj_.build(child_)
            self.emailAddress.append(obj_)
            obj_.original_tagname_ = 'emailAddress'
# end class OPFGroupCopyMemberListType


class emailAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFContactEmailAddressAddress=None, OPFContactEmailAddressName=None, OPFContactEmailAddressType=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFContactEmailAddressAddress = _cast(None, OPFContactEmailAddressAddress)
        self.OPFContactEmailAddressName = _cast(None, OPFContactEmailAddressName)
        self.OPFContactEmailAddressType = _cast(int, OPFContactEmailAddressType)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, emailAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if emailAddressType.subclass:
            return emailAddressType.subclass(*args_, **kwargs_)
        else:
            return emailAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_OPFContactEmailAddressAddress(self): return self.OPFContactEmailAddressAddress
    def set_OPFContactEmailAddressAddress(self, OPFContactEmailAddressAddress): self.OPFContactEmailAddressAddress = OPFContactEmailAddressAddress
    def get_OPFContactEmailAddressName(self): return self.OPFContactEmailAddressName
    def set_OPFContactEmailAddressName(self, OPFContactEmailAddressName): self.OPFContactEmailAddressName = OPFContactEmailAddressName
    def get_OPFContactEmailAddressType(self): return self.OPFContactEmailAddressType
    def set_OPFContactEmailAddressType(self, OPFContactEmailAddressType): self.OPFContactEmailAddressType = OPFContactEmailAddressType
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='emailAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('emailAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='emailAddressType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='emailAddressType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='emailAddressType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.OPFContactEmailAddressAddress is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            outfile.write(' OPFContactEmailAddressAddress=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFContactEmailAddressAddress), input_name='OPFContactEmailAddressAddress')), ))
        if self.OPFContactEmailAddressName is not None and 'OPFContactEmailAddressName' not in already_processed:
            already_processed.add('OPFContactEmailAddressName')
            outfile.write(' OPFContactEmailAddressName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFContactEmailAddressName), input_name='OPFContactEmailAddressName')), ))
        if self.OPFContactEmailAddressType is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            outfile.write(' OPFContactEmailAddressType="%s"' % self.gds_format_integer(self.OPFContactEmailAddressType, input_name='OPFContactEmailAddressType'))
    def exportChildren(self, outfile, level, namespace_='', name_='emailAddressType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('OPFContactEmailAddressAddress', node)
        if value is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            self.OPFContactEmailAddressAddress = value
        value = find_attr_value_('OPFContactEmailAddressName', node)
        if value is not None and 'OPFContactEmailAddressName' not in already_processed:
            already_processed.add('OPFContactEmailAddressName')
            self.OPFContactEmailAddressName = value
        value = find_attr_value_('OPFContactEmailAddressType', node)
        if value is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            try:
                self.OPFContactEmailAddressType = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class emailAddressType


class OPFGroupCopyModDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupCopyModDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupCopyModDateType.subclass:
            return OPFGroupCopyModDateType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupCopyModDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupCopyModDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupCopyModDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupCopyModDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupCopyModDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupCopyModDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupCopyModDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFGroupCopyModDateType


class OPFGroupSuppressNamesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupSuppressNamesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupSuppressNamesType.subclass:
            return OPFGroupSuppressNamesType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupSuppressNamesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupSuppressNamesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupSuppressNamesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupSuppressNamesType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupSuppressNamesType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupSuppressNamesType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupSuppressNamesType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFGroupSuppressNamesType


class OPFGroupCopyDueDateTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupCopyDueDateTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupCopyDueDateTimeType.subclass:
            return OPFGroupCopyDueDateTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupCopyDueDateTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupCopyDueDateTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupCopyDueDateTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupCopyDueDateTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupCopyDueDateTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupCopyDueDateTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupCopyDueDateTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFGroupCopyDueDateTimeType


class OPFGroupCopyStartDateTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupCopyStartDateTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupCopyStartDateTimeType.subclass:
            return OPFGroupCopyStartDateTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupCopyStartDateTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupCopyStartDateTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupCopyStartDateTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupCopyStartDateTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupCopyStartDateTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupCopyStartDateTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupCopyStartDateTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFGroupCopyStartDateTimeType


class OPFGroupCopyCategoryListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, category=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        if category is None:
            self.category = []
        else:
            self.category = category
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupCopyCategoryListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupCopyCategoryListType.subclass:
            return OPFGroupCopyCategoryListType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupCopyCategoryListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def add_category(self, value): self.category.append(value)
    def insert_category_at(self, index, value): self.category.insert(index, value)
    def replace_category_at(self, index, value): self.category[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.category
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupCopyCategoryListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupCopyCategoryListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupCopyCategoryListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupCopyCategoryListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupCopyCategoryListType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupCopyCategoryListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for category_ in self.category:
            category_.export(outfile, level, namespace_, name_='category', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'category':
            obj_ = categoryType.factory()
            obj_.build(child_)
            self.category.append(obj_)
            obj_.original_tagname_ = 'category'
# end class OPFGroupCopyCategoryListType


class categoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OPFCategoryCopyBackgroundColor=None, OPFCategoryCopyName=None, space=None):
        self.original_tagname_ = None
        self.OPFCategoryCopyBackgroundColor = _cast(None, OPFCategoryCopyBackgroundColor)
        self.OPFCategoryCopyName = _cast(None, OPFCategoryCopyName)
        self.space = _cast(None, space)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType.subclass:
            return categoryType.subclass(*args_, **kwargs_)
        else:
            return categoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCategoryCopyBackgroundColor(self): return self.OPFCategoryCopyBackgroundColor
    def set_OPFCategoryCopyBackgroundColor(self, OPFCategoryCopyBackgroundColor): self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
    def get_OPFCategoryCopyName(self): return self.OPFCategoryCopyName
    def set_OPFCategoryCopyName(self, OPFCategoryCopyName): self.OPFCategoryCopyName = OPFCategoryCopyName
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='categoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='categoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='categoryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='categoryType'):
        if self.OPFCategoryCopyBackgroundColor is not None and 'OPFCategoryCopyBackgroundColor' not in already_processed:
            already_processed.add('OPFCategoryCopyBackgroundColor')
            outfile.write(' OPFCategoryCopyBackgroundColor=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFCategoryCopyBackgroundColor), input_name='OPFCategoryCopyBackgroundColor')), ))
        if self.OPFCategoryCopyName is not None and 'OPFCategoryCopyName' not in already_processed:
            already_processed.add('OPFCategoryCopyName')
            outfile.write(' OPFCategoryCopyName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFCategoryCopyName), input_name='OPFCategoryCopyName')), ))
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='categoryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('OPFCategoryCopyBackgroundColor', node)
        if value is not None and 'OPFCategoryCopyBackgroundColor' not in already_processed:
            already_processed.add('OPFCategoryCopyBackgroundColor')
            self.OPFCategoryCopyBackgroundColor = value
        value = find_attr_value_('OPFCategoryCopyName', node)
        if value is not None and 'OPFCategoryCopyName' not in already_processed:
            already_processed.add('OPFCategoryCopyName')
            self.OPFCategoryCopyName = value
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class categoryType


class OPFGroupCopyGetPrimaryCategoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFCategoryCopyBackgroundColor=None, OPFCategoryCopyName=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
        self.OPFCategoryCopyName = OPFCategoryCopyName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFGroupCopyGetPrimaryCategoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFGroupCopyGetPrimaryCategoryType.subclass:
            return OPFGroupCopyGetPrimaryCategoryType.subclass(*args_, **kwargs_)
        else:
            return OPFGroupCopyGetPrimaryCategoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCategoryCopyBackgroundColor(self): return self.OPFCategoryCopyBackgroundColor
    def set_OPFCategoryCopyBackgroundColor(self, OPFCategoryCopyBackgroundColor): self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
    def get_OPFCategoryCopyName(self): return self.OPFCategoryCopyName
    def set_OPFCategoryCopyName(self, OPFCategoryCopyName): self.OPFCategoryCopyName = OPFCategoryCopyName
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFCategoryCopyBackgroundColor is not None or
            self.OPFCategoryCopyName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFGroupCopyGetPrimaryCategoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFGroupCopyGetPrimaryCategoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFGroupCopyGetPrimaryCategoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFGroupCopyGetPrimaryCategoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFGroupCopyGetPrimaryCategoryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFGroupCopyGetPrimaryCategoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFCategoryCopyBackgroundColor is not None:
            self.OPFCategoryCopyBackgroundColor.export(outfile, level, namespace_, name_='OPFCategoryCopyBackgroundColor', pretty_print=pretty_print)
        if self.OPFCategoryCopyName is not None:
            self.OPFCategoryCopyName.export(outfile, level, namespace_, name_='OPFCategoryCopyName', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFCategoryCopyBackgroundColor':
            obj_ = OPFCategoryCopyBackgroundColorType.factory()
            obj_.build(child_)
            self.OPFCategoryCopyBackgroundColor = obj_
            obj_.original_tagname_ = 'OPFCategoryCopyBackgroundColor'
        elif nodeName_ == 'OPFCategoryCopyName':
            obj_ = OPFCategoryCopyNameType.factory()
            obj_.build(child_)
            self.OPFCategoryCopyName = obj_
            obj_.original_tagname_ = 'OPFCategoryCopyName'
# end class OPFGroupCopyGetPrimaryCategoryType


class OPFCategoryCopyBackgroundColorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCategoryCopyBackgroundColorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCategoryCopyBackgroundColorType.subclass:
            return OPFCategoryCopyBackgroundColorType.subclass(*args_, **kwargs_)
        else:
            return OPFCategoryCopyBackgroundColorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCategoryCopyBackgroundColorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCategoryCopyBackgroundColorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCategoryCopyBackgroundColorType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCategoryCopyBackgroundColorType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCategoryCopyBackgroundColorType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCategoryCopyBackgroundColorType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCategoryCopyBackgroundColorType


class OPFCategoryCopyNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCategoryCopyNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCategoryCopyNameType.subclass:
            return OPFCategoryCopyNameType.subclass(*args_, **kwargs_)
        else:
            return OPFCategoryCopyNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCategoryCopyNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCategoryCopyNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCategoryCopyNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCategoryCopyNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCategoryCopyNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCategoryCopyNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCategoryCopyNameType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'groups'
        rootClass = groups
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'groups'
        rootClass = groups
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'groups'
        rootClass = groups
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'groups'
        rootClass = groups
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from groups import *\n\n')
        sys.stdout.write('import groups as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "OPFCategoryCopyBackgroundColorType",
    "OPFCategoryCopyNameType",
    "OPFGroupCopyCategoryListType",
    "OPFGroupCopyDisplayNameType",
    "OPFGroupCopyDueDateTimeType",
    "OPFGroupCopyGetFlagStatusType",
    "OPFGroupCopyGetPrimaryCategoryType",
    "OPFGroupCopyMemberListType",
    "OPFGroupCopyModDateType",
    "OPFGroupCopyStartDateTimeType",
    "OPFGroupSuppressNamesType",
    "categoryType",
    "emailAddressType",
    "groupType",
    "groups"
]
