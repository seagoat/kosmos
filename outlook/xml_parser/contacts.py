#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Aug  2 14:55:31 2018 by generateDS.py version 2.29.19.
# Python 3.5.4 |Anaconda custom (64-bit)| (default, Oct  5 2017, 02:58:14)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
#
# Command line options:
#   ('-o', 'contacts.py')
#
# Command line arguments:
#   ../../schema/contacts.xsd
#
# Command line:
#   /Users/brian/anaconda/bin/generateDS -o "contacts.py" ../../schema/contacts.xsd
#
# Current working directory (os.getcwd()):
#   parser
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class contacts(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, elementCount=None, contact=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.elementCount = _cast(int, elementCount)
        if contact is None:
            self.contact = []
        else:
            self.contact = contact
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contacts)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contacts.subclass:
            return contacts.subclass(*args_, **kwargs_)
        else:
            return contacts(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contact(self): return self.contact
    def set_contact(self, contact): self.contact = contact
    def add_contact(self, value): self.contact.append(value)
    def insert_contact_at(self, index, value): self.contact.insert(index, value)
    def replace_contact_at(self, index, value): self.contact[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_elementCount(self): return self.elementCount
    def set_elementCount(self, elementCount): self.elementCount = elementCount
    def hasContent_(self):
        if (
            self.contact
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contacts', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contacts')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contacts')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contacts', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contacts'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.elementCount is not None and 'elementCount' not in already_processed:
            already_processed.add('elementCount')
            outfile.write(' elementCount="%s"' % self.gds_format_integer(self.elementCount, input_name='elementCount'))
    def exportChildren(self, outfile, level, namespace_='', name_='contacts', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for contact_ in self.contact:
            contact_.export(outfile, level, namespace_, name_='contact', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('elementCount', node)
        if value is not None and 'elementCount' not in already_processed:
            already_processed.add('elementCount')
            try:
                self.elementCount = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contact':
            obj_ = contactType.factory()
            obj_.build(child_)
            self.contact.append(obj_)
            obj_.original_tagname_ = 'contact'
# end class contacts


class contactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFContactCopyCategoryList=None, OPFContactCopyPrimaryCategory=None, OPFContactCopyDueDateTime=None, OPFContactCopyStartDateTime=None, OPFContactCopyAnniversary=None, OPFContactCopyAssistantPhone=None, OPFContactCopyAstrologySign=None, OPFContactCopyBloodType=None, OPFContactCopyBusinessFax=None, OPFContactCopyBusinessHomePage=None, OPFContactCopyBusinessPhone2=None, OPFContactCanDelete=None, OPFContactCanEdit=None, OPFContactCopyAge=None, OPFContactCopyBirthday=None, OPFContactCopyBusinessCity=None, OPFContactCopyBusinessCompany=None, OPFContactCopyBusinessPhone=None, OPFContactCopyCellPhone=None, OPFContactCopyBusinessCountry=None, OPFContactCopyBusinessDepartment=None, OPFContactCopyBusinessOffice=None, OPFContactCopyBusinessState=None, OPFContactCopyBusinessStreetAddress=None, OPFContactCopyBusinessTitle=None, OPFContactCopyBusinessZip=None, OPFContactCopyContactImage=None, OPFContactCopyDefaultEmailAddress=None, OPFContactCopyDefaultIMAddress=None, OPFContactCopyDisplayName=None, OPFContactCopyEmailAddressList=None, OPFContactCopyEmailAddressList1=None, OPFContactCopyEmailAddressList2=None, OPFContactCopyFirstName=None, OPFContactCopyLastName=None, OPFContactCopyModDate=None, OPFContactCopyNotes=None, OPFContactCopyNotesPlain=None, OPFContactGetFlagStatus=None, OPFContactIsJapaneseContact=None, OPFContactType=None, OPFContactCopyHomeCity=None, OPFContactCopyHomeCountry=None, OPFContactCopyHomeState=None, OPFContactCopyHomeStreetAddress=None, OPFContactCopyHomeZip=None, OPFContactCopyIMAddressList=None, OPFContactCopyChildren=None, OPFContactCopyCustom1Data=None, OPFContactCopyCustom2Data=None, OPFContactCopyCustom3Data=None, OPFContactCopyCustom4Data=None, OPFContactCopyCustom5Data=None, OPFContactCopyCustomDate1=None, OPFContactCopyCustomDate2=None, OPFContactCopyCustomDate3=None, OPFContactCopyCustomPhone1=None, OPFContactCopyCustomPhone2=None, OPFContactCopyCustomPhone3=None, OPFContactCopyCustomPhone4=None, OPFContactCopyFuriganaChildrensNames=None, OPFContactCopyHomeFax=None, OPFContactCopyHomePhone=None, OPFContactCopyHomePhone2=None, OPFContactCopyHomeWebPage=None, OPFContactCopyInterests=None, OPFContactCopyMiddleName=None, OPFContactCopyNickName=None, OPFContactCopyOtherCity=None, OPFContactCopyOtherCountry=None, OPFContactCopyOtherFax=None, OPFContactCopyOtherPhone=None, OPFContactCopyOtherState=None, OPFContactCopyOtherStreetAddress=None, OPFContactCopyOtherZip=None, OPFContactCopyPager=None, OPFContactCopyRadioPhone=None, OPFContactCopySetNameSuffix=None, OPFContactCopySpousesName=None, OPFContactCopyTitle=None, OPFContactCustomData5=None, OPFContactCustomData6=None, OPFContactCustomData7=None, OPFContactCustomData8=None, OPFContactMainPhone=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFContactCopyCategoryList = OPFContactCopyCategoryList
        self.OPFContactCopyPrimaryCategory = OPFContactCopyPrimaryCategory
        self.OPFContactCopyDueDateTime = OPFContactCopyDueDateTime
        self.OPFContactCopyStartDateTime = OPFContactCopyStartDateTime
        self.OPFContactCopyAnniversary = OPFContactCopyAnniversary
        self.OPFContactCopyAssistantPhone = OPFContactCopyAssistantPhone
        self.OPFContactCopyAstrologySign = OPFContactCopyAstrologySign
        self.OPFContactCopyBloodType = OPFContactCopyBloodType
        self.OPFContactCopyBusinessFax = OPFContactCopyBusinessFax
        self.OPFContactCopyBusinessHomePage = OPFContactCopyBusinessHomePage
        self.OPFContactCopyBusinessPhone2 = OPFContactCopyBusinessPhone2
        self.OPFContactCanDelete = OPFContactCanDelete
        self.OPFContactCanEdit = OPFContactCanEdit
        self.OPFContactCopyAge = OPFContactCopyAge
        self.OPFContactCopyBirthday = OPFContactCopyBirthday
        self.OPFContactCopyBusinessCity = OPFContactCopyBusinessCity
        self.OPFContactCopyBusinessCompany = OPFContactCopyBusinessCompany
        self.OPFContactCopyBusinessPhone = OPFContactCopyBusinessPhone
        self.OPFContactCopyCellPhone = OPFContactCopyCellPhone
        self.OPFContactCopyBusinessCountry = OPFContactCopyBusinessCountry
        self.OPFContactCopyBusinessDepartment = OPFContactCopyBusinessDepartment
        self.OPFContactCopyBusinessOffice = OPFContactCopyBusinessOffice
        self.OPFContactCopyBusinessState = OPFContactCopyBusinessState
        self.OPFContactCopyBusinessStreetAddress = OPFContactCopyBusinessStreetAddress
        self.OPFContactCopyBusinessTitle = OPFContactCopyBusinessTitle
        self.OPFContactCopyBusinessZip = OPFContactCopyBusinessZip
        self.OPFContactCopyContactImage = OPFContactCopyContactImage
        self.OPFContactCopyDefaultEmailAddress = OPFContactCopyDefaultEmailAddress
        self.OPFContactCopyDefaultIMAddress = OPFContactCopyDefaultIMAddress
        self.OPFContactCopyDisplayName = OPFContactCopyDisplayName
        self.OPFContactCopyEmailAddressList = OPFContactCopyEmailAddressList
        self.OPFContactCopyEmailAddressList1 = OPFContactCopyEmailAddressList1
        self.OPFContactCopyEmailAddressList2 = OPFContactCopyEmailAddressList2
        self.OPFContactCopyFirstName = OPFContactCopyFirstName
        self.OPFContactCopyLastName = OPFContactCopyLastName
        self.OPFContactCopyModDate = OPFContactCopyModDate
        self.OPFContactCopyNotes = OPFContactCopyNotes
        self.OPFContactCopyNotesPlain = OPFContactCopyNotesPlain
        self.OPFContactGetFlagStatus = OPFContactGetFlagStatus
        self.OPFContactIsJapaneseContact = OPFContactIsJapaneseContact
        self.OPFContactType = OPFContactType
        self.OPFContactCopyHomeCity = OPFContactCopyHomeCity
        self.OPFContactCopyHomeCountry = OPFContactCopyHomeCountry
        self.OPFContactCopyHomeState = OPFContactCopyHomeState
        self.OPFContactCopyHomeStreetAddress = OPFContactCopyHomeStreetAddress
        self.OPFContactCopyHomeZip = OPFContactCopyHomeZip
        self.OPFContactCopyIMAddressList = OPFContactCopyIMAddressList
        self.OPFContactCopyChildren = OPFContactCopyChildren
        self.OPFContactCopyCustom1Data = OPFContactCopyCustom1Data
        self.OPFContactCopyCustom2Data = OPFContactCopyCustom2Data
        self.OPFContactCopyCustom3Data = OPFContactCopyCustom3Data
        self.OPFContactCopyCustom4Data = OPFContactCopyCustom4Data
        self.OPFContactCopyCustom5Data = OPFContactCopyCustom5Data
        self.OPFContactCopyCustomDate1 = OPFContactCopyCustomDate1
        self.OPFContactCopyCustomDate2 = OPFContactCopyCustomDate2
        self.OPFContactCopyCustomDate3 = OPFContactCopyCustomDate3
        self.OPFContactCopyCustomPhone1 = OPFContactCopyCustomPhone1
        self.OPFContactCopyCustomPhone2 = OPFContactCopyCustomPhone2
        self.OPFContactCopyCustomPhone3 = OPFContactCopyCustomPhone3
        self.OPFContactCopyCustomPhone4 = OPFContactCopyCustomPhone4
        self.OPFContactCopyFuriganaChildrensNames = OPFContactCopyFuriganaChildrensNames
        self.OPFContactCopyHomeFax = OPFContactCopyHomeFax
        self.OPFContactCopyHomePhone = OPFContactCopyHomePhone
        self.OPFContactCopyHomePhone2 = OPFContactCopyHomePhone2
        self.OPFContactCopyHomeWebPage = OPFContactCopyHomeWebPage
        self.OPFContactCopyInterests = OPFContactCopyInterests
        self.OPFContactCopyMiddleName = OPFContactCopyMiddleName
        self.OPFContactCopyNickName = OPFContactCopyNickName
        self.OPFContactCopyOtherCity = OPFContactCopyOtherCity
        self.OPFContactCopyOtherCountry = OPFContactCopyOtherCountry
        self.OPFContactCopyOtherFax = OPFContactCopyOtherFax
        self.OPFContactCopyOtherPhone = OPFContactCopyOtherPhone
        self.OPFContactCopyOtherState = OPFContactCopyOtherState
        self.OPFContactCopyOtherStreetAddress = OPFContactCopyOtherStreetAddress
        self.OPFContactCopyOtherZip = OPFContactCopyOtherZip
        self.OPFContactCopyPager = OPFContactCopyPager
        self.OPFContactCopyRadioPhone = OPFContactCopyRadioPhone
        self.OPFContactCopySetNameSuffix = OPFContactCopySetNameSuffix
        self.OPFContactCopySpousesName = OPFContactCopySpousesName
        self.OPFContactCopyTitle = OPFContactCopyTitle
        self.OPFContactCustomData5 = OPFContactCustomData5
        self.OPFContactCustomData6 = OPFContactCustomData6
        self.OPFContactCustomData7 = OPFContactCustomData7
        self.OPFContactCustomData8 = OPFContactCustomData8
        self.OPFContactMainPhone = OPFContactMainPhone
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contactType.subclass:
            return contactType.subclass(*args_, **kwargs_)
        else:
            return contactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFContactCopyCategoryList(self): return self.OPFContactCopyCategoryList
    def set_OPFContactCopyCategoryList(self, OPFContactCopyCategoryList): self.OPFContactCopyCategoryList = OPFContactCopyCategoryList
    def get_OPFContactCopyPrimaryCategory(self): return self.OPFContactCopyPrimaryCategory
    def set_OPFContactCopyPrimaryCategory(self, OPFContactCopyPrimaryCategory): self.OPFContactCopyPrimaryCategory = OPFContactCopyPrimaryCategory
    def get_OPFContactCopyDueDateTime(self): return self.OPFContactCopyDueDateTime
    def set_OPFContactCopyDueDateTime(self, OPFContactCopyDueDateTime): self.OPFContactCopyDueDateTime = OPFContactCopyDueDateTime
    def get_OPFContactCopyStartDateTime(self): return self.OPFContactCopyStartDateTime
    def set_OPFContactCopyStartDateTime(self, OPFContactCopyStartDateTime): self.OPFContactCopyStartDateTime = OPFContactCopyStartDateTime
    def get_OPFContactCopyAnniversary(self): return self.OPFContactCopyAnniversary
    def set_OPFContactCopyAnniversary(self, OPFContactCopyAnniversary): self.OPFContactCopyAnniversary = OPFContactCopyAnniversary
    def get_OPFContactCopyAssistantPhone(self): return self.OPFContactCopyAssistantPhone
    def set_OPFContactCopyAssistantPhone(self, OPFContactCopyAssistantPhone): self.OPFContactCopyAssistantPhone = OPFContactCopyAssistantPhone
    def get_OPFContactCopyAstrologySign(self): return self.OPFContactCopyAstrologySign
    def set_OPFContactCopyAstrologySign(self, OPFContactCopyAstrologySign): self.OPFContactCopyAstrologySign = OPFContactCopyAstrologySign
    def get_OPFContactCopyBloodType(self): return self.OPFContactCopyBloodType
    def set_OPFContactCopyBloodType(self, OPFContactCopyBloodType): self.OPFContactCopyBloodType = OPFContactCopyBloodType
    def get_OPFContactCopyBusinessFax(self): return self.OPFContactCopyBusinessFax
    def set_OPFContactCopyBusinessFax(self, OPFContactCopyBusinessFax): self.OPFContactCopyBusinessFax = OPFContactCopyBusinessFax
    def get_OPFContactCopyBusinessHomePage(self): return self.OPFContactCopyBusinessHomePage
    def set_OPFContactCopyBusinessHomePage(self, OPFContactCopyBusinessHomePage): self.OPFContactCopyBusinessHomePage = OPFContactCopyBusinessHomePage
    def get_OPFContactCopyBusinessPhone2(self): return self.OPFContactCopyBusinessPhone2
    def set_OPFContactCopyBusinessPhone2(self, OPFContactCopyBusinessPhone2): self.OPFContactCopyBusinessPhone2 = OPFContactCopyBusinessPhone2
    def get_OPFContactCanDelete(self): return self.OPFContactCanDelete
    def set_OPFContactCanDelete(self, OPFContactCanDelete): self.OPFContactCanDelete = OPFContactCanDelete
    def get_OPFContactCanEdit(self): return self.OPFContactCanEdit
    def set_OPFContactCanEdit(self, OPFContactCanEdit): self.OPFContactCanEdit = OPFContactCanEdit
    def get_OPFContactCopyAge(self): return self.OPFContactCopyAge
    def set_OPFContactCopyAge(self, OPFContactCopyAge): self.OPFContactCopyAge = OPFContactCopyAge
    def get_OPFContactCopyBirthday(self): return self.OPFContactCopyBirthday
    def set_OPFContactCopyBirthday(self, OPFContactCopyBirthday): self.OPFContactCopyBirthday = OPFContactCopyBirthday
    def get_OPFContactCopyBusinessCity(self): return self.OPFContactCopyBusinessCity
    def set_OPFContactCopyBusinessCity(self, OPFContactCopyBusinessCity): self.OPFContactCopyBusinessCity = OPFContactCopyBusinessCity
    def get_OPFContactCopyBusinessCompany(self): return self.OPFContactCopyBusinessCompany
    def set_OPFContactCopyBusinessCompany(self, OPFContactCopyBusinessCompany): self.OPFContactCopyBusinessCompany = OPFContactCopyBusinessCompany
    def get_OPFContactCopyBusinessPhone(self): return self.OPFContactCopyBusinessPhone
    def set_OPFContactCopyBusinessPhone(self, OPFContactCopyBusinessPhone): self.OPFContactCopyBusinessPhone = OPFContactCopyBusinessPhone
    def get_OPFContactCopyCellPhone(self): return self.OPFContactCopyCellPhone
    def set_OPFContactCopyCellPhone(self, OPFContactCopyCellPhone): self.OPFContactCopyCellPhone = OPFContactCopyCellPhone
    def get_OPFContactCopyBusinessCountry(self): return self.OPFContactCopyBusinessCountry
    def set_OPFContactCopyBusinessCountry(self, OPFContactCopyBusinessCountry): self.OPFContactCopyBusinessCountry = OPFContactCopyBusinessCountry
    def get_OPFContactCopyBusinessDepartment(self): return self.OPFContactCopyBusinessDepartment
    def set_OPFContactCopyBusinessDepartment(self, OPFContactCopyBusinessDepartment): self.OPFContactCopyBusinessDepartment = OPFContactCopyBusinessDepartment
    def get_OPFContactCopyBusinessOffice(self): return self.OPFContactCopyBusinessOffice
    def set_OPFContactCopyBusinessOffice(self, OPFContactCopyBusinessOffice): self.OPFContactCopyBusinessOffice = OPFContactCopyBusinessOffice
    def get_OPFContactCopyBusinessState(self): return self.OPFContactCopyBusinessState
    def set_OPFContactCopyBusinessState(self, OPFContactCopyBusinessState): self.OPFContactCopyBusinessState = OPFContactCopyBusinessState
    def get_OPFContactCopyBusinessStreetAddress(self): return self.OPFContactCopyBusinessStreetAddress
    def set_OPFContactCopyBusinessStreetAddress(self, OPFContactCopyBusinessStreetAddress): self.OPFContactCopyBusinessStreetAddress = OPFContactCopyBusinessStreetAddress
    def get_OPFContactCopyBusinessTitle(self): return self.OPFContactCopyBusinessTitle
    def set_OPFContactCopyBusinessTitle(self, OPFContactCopyBusinessTitle): self.OPFContactCopyBusinessTitle = OPFContactCopyBusinessTitle
    def get_OPFContactCopyBusinessZip(self): return self.OPFContactCopyBusinessZip
    def set_OPFContactCopyBusinessZip(self, OPFContactCopyBusinessZip): self.OPFContactCopyBusinessZip = OPFContactCopyBusinessZip
    def get_OPFContactCopyContactImage(self): return self.OPFContactCopyContactImage
    def set_OPFContactCopyContactImage(self, OPFContactCopyContactImage): self.OPFContactCopyContactImage = OPFContactCopyContactImage
    def get_OPFContactCopyDefaultEmailAddress(self): return self.OPFContactCopyDefaultEmailAddress
    def set_OPFContactCopyDefaultEmailAddress(self, OPFContactCopyDefaultEmailAddress): self.OPFContactCopyDefaultEmailAddress = OPFContactCopyDefaultEmailAddress
    def get_OPFContactCopyDefaultIMAddress(self): return self.OPFContactCopyDefaultIMAddress
    def set_OPFContactCopyDefaultIMAddress(self, OPFContactCopyDefaultIMAddress): self.OPFContactCopyDefaultIMAddress = OPFContactCopyDefaultIMAddress
    def get_OPFContactCopyDisplayName(self): return self.OPFContactCopyDisplayName
    def set_OPFContactCopyDisplayName(self, OPFContactCopyDisplayName): self.OPFContactCopyDisplayName = OPFContactCopyDisplayName
    def get_OPFContactCopyEmailAddressList(self): return self.OPFContactCopyEmailAddressList
    def set_OPFContactCopyEmailAddressList(self, OPFContactCopyEmailAddressList): self.OPFContactCopyEmailAddressList = OPFContactCopyEmailAddressList
    def get_OPFContactCopyEmailAddressList1(self): return self.OPFContactCopyEmailAddressList1
    def set_OPFContactCopyEmailAddressList1(self, OPFContactCopyEmailAddressList1): self.OPFContactCopyEmailAddressList1 = OPFContactCopyEmailAddressList1
    def get_OPFContactCopyEmailAddressList2(self): return self.OPFContactCopyEmailAddressList2
    def set_OPFContactCopyEmailAddressList2(self, OPFContactCopyEmailAddressList2): self.OPFContactCopyEmailAddressList2 = OPFContactCopyEmailAddressList2
    def get_OPFContactCopyFirstName(self): return self.OPFContactCopyFirstName
    def set_OPFContactCopyFirstName(self, OPFContactCopyFirstName): self.OPFContactCopyFirstName = OPFContactCopyFirstName
    def get_OPFContactCopyLastName(self): return self.OPFContactCopyLastName
    def set_OPFContactCopyLastName(self, OPFContactCopyLastName): self.OPFContactCopyLastName = OPFContactCopyLastName
    def get_OPFContactCopyModDate(self): return self.OPFContactCopyModDate
    def set_OPFContactCopyModDate(self, OPFContactCopyModDate): self.OPFContactCopyModDate = OPFContactCopyModDate
    def get_OPFContactCopyNotes(self): return self.OPFContactCopyNotes
    def set_OPFContactCopyNotes(self, OPFContactCopyNotes): self.OPFContactCopyNotes = OPFContactCopyNotes
    def get_OPFContactCopyNotesPlain(self): return self.OPFContactCopyNotesPlain
    def set_OPFContactCopyNotesPlain(self, OPFContactCopyNotesPlain): self.OPFContactCopyNotesPlain = OPFContactCopyNotesPlain
    def get_OPFContactGetFlagStatus(self): return self.OPFContactGetFlagStatus
    def set_OPFContactGetFlagStatus(self, OPFContactGetFlagStatus): self.OPFContactGetFlagStatus = OPFContactGetFlagStatus
    def get_OPFContactIsJapaneseContact(self): return self.OPFContactIsJapaneseContact
    def set_OPFContactIsJapaneseContact(self, OPFContactIsJapaneseContact): self.OPFContactIsJapaneseContact = OPFContactIsJapaneseContact
    def get_OPFContactType(self): return self.OPFContactType
    def set_OPFContactType(self, OPFContactType): self.OPFContactType = OPFContactType
    def get_OPFContactCopyHomeCity(self): return self.OPFContactCopyHomeCity
    def set_OPFContactCopyHomeCity(self, OPFContactCopyHomeCity): self.OPFContactCopyHomeCity = OPFContactCopyHomeCity
    def get_OPFContactCopyHomeCountry(self): return self.OPFContactCopyHomeCountry
    def set_OPFContactCopyHomeCountry(self, OPFContactCopyHomeCountry): self.OPFContactCopyHomeCountry = OPFContactCopyHomeCountry
    def get_OPFContactCopyHomeState(self): return self.OPFContactCopyHomeState
    def set_OPFContactCopyHomeState(self, OPFContactCopyHomeState): self.OPFContactCopyHomeState = OPFContactCopyHomeState
    def get_OPFContactCopyHomeStreetAddress(self): return self.OPFContactCopyHomeStreetAddress
    def set_OPFContactCopyHomeStreetAddress(self, OPFContactCopyHomeStreetAddress): self.OPFContactCopyHomeStreetAddress = OPFContactCopyHomeStreetAddress
    def get_OPFContactCopyHomeZip(self): return self.OPFContactCopyHomeZip
    def set_OPFContactCopyHomeZip(self, OPFContactCopyHomeZip): self.OPFContactCopyHomeZip = OPFContactCopyHomeZip
    def get_OPFContactCopyIMAddressList(self): return self.OPFContactCopyIMAddressList
    def set_OPFContactCopyIMAddressList(self, OPFContactCopyIMAddressList): self.OPFContactCopyIMAddressList = OPFContactCopyIMAddressList
    def get_OPFContactCopyChildren(self): return self.OPFContactCopyChildren
    def set_OPFContactCopyChildren(self, OPFContactCopyChildren): self.OPFContactCopyChildren = OPFContactCopyChildren
    def get_OPFContactCopyCustom1Data(self): return self.OPFContactCopyCustom1Data
    def set_OPFContactCopyCustom1Data(self, OPFContactCopyCustom1Data): self.OPFContactCopyCustom1Data = OPFContactCopyCustom1Data
    def get_OPFContactCopyCustom2Data(self): return self.OPFContactCopyCustom2Data
    def set_OPFContactCopyCustom2Data(self, OPFContactCopyCustom2Data): self.OPFContactCopyCustom2Data = OPFContactCopyCustom2Data
    def get_OPFContactCopyCustom3Data(self): return self.OPFContactCopyCustom3Data
    def set_OPFContactCopyCustom3Data(self, OPFContactCopyCustom3Data): self.OPFContactCopyCustom3Data = OPFContactCopyCustom3Data
    def get_OPFContactCopyCustom4Data(self): return self.OPFContactCopyCustom4Data
    def set_OPFContactCopyCustom4Data(self, OPFContactCopyCustom4Data): self.OPFContactCopyCustom4Data = OPFContactCopyCustom4Data
    def get_OPFContactCopyCustom5Data(self): return self.OPFContactCopyCustom5Data
    def set_OPFContactCopyCustom5Data(self, OPFContactCopyCustom5Data): self.OPFContactCopyCustom5Data = OPFContactCopyCustom5Data
    def get_OPFContactCopyCustomDate1(self): return self.OPFContactCopyCustomDate1
    def set_OPFContactCopyCustomDate1(self, OPFContactCopyCustomDate1): self.OPFContactCopyCustomDate1 = OPFContactCopyCustomDate1
    def get_OPFContactCopyCustomDate2(self): return self.OPFContactCopyCustomDate2
    def set_OPFContactCopyCustomDate2(self, OPFContactCopyCustomDate2): self.OPFContactCopyCustomDate2 = OPFContactCopyCustomDate2
    def get_OPFContactCopyCustomDate3(self): return self.OPFContactCopyCustomDate3
    def set_OPFContactCopyCustomDate3(self, OPFContactCopyCustomDate3): self.OPFContactCopyCustomDate3 = OPFContactCopyCustomDate3
    def get_OPFContactCopyCustomPhone1(self): return self.OPFContactCopyCustomPhone1
    def set_OPFContactCopyCustomPhone1(self, OPFContactCopyCustomPhone1): self.OPFContactCopyCustomPhone1 = OPFContactCopyCustomPhone1
    def get_OPFContactCopyCustomPhone2(self): return self.OPFContactCopyCustomPhone2
    def set_OPFContactCopyCustomPhone2(self, OPFContactCopyCustomPhone2): self.OPFContactCopyCustomPhone2 = OPFContactCopyCustomPhone2
    def get_OPFContactCopyCustomPhone3(self): return self.OPFContactCopyCustomPhone3
    def set_OPFContactCopyCustomPhone3(self, OPFContactCopyCustomPhone3): self.OPFContactCopyCustomPhone3 = OPFContactCopyCustomPhone3
    def get_OPFContactCopyCustomPhone4(self): return self.OPFContactCopyCustomPhone4
    def set_OPFContactCopyCustomPhone4(self, OPFContactCopyCustomPhone4): self.OPFContactCopyCustomPhone4 = OPFContactCopyCustomPhone4
    def get_OPFContactCopyFuriganaChildrensNames(self): return self.OPFContactCopyFuriganaChildrensNames
    def set_OPFContactCopyFuriganaChildrensNames(self, OPFContactCopyFuriganaChildrensNames): self.OPFContactCopyFuriganaChildrensNames = OPFContactCopyFuriganaChildrensNames
    def get_OPFContactCopyHomeFax(self): return self.OPFContactCopyHomeFax
    def set_OPFContactCopyHomeFax(self, OPFContactCopyHomeFax): self.OPFContactCopyHomeFax = OPFContactCopyHomeFax
    def get_OPFContactCopyHomePhone(self): return self.OPFContactCopyHomePhone
    def set_OPFContactCopyHomePhone(self, OPFContactCopyHomePhone): self.OPFContactCopyHomePhone = OPFContactCopyHomePhone
    def get_OPFContactCopyHomePhone2(self): return self.OPFContactCopyHomePhone2
    def set_OPFContactCopyHomePhone2(self, OPFContactCopyHomePhone2): self.OPFContactCopyHomePhone2 = OPFContactCopyHomePhone2
    def get_OPFContactCopyHomeWebPage(self): return self.OPFContactCopyHomeWebPage
    def set_OPFContactCopyHomeWebPage(self, OPFContactCopyHomeWebPage): self.OPFContactCopyHomeWebPage = OPFContactCopyHomeWebPage
    def get_OPFContactCopyInterests(self): return self.OPFContactCopyInterests
    def set_OPFContactCopyInterests(self, OPFContactCopyInterests): self.OPFContactCopyInterests = OPFContactCopyInterests
    def get_OPFContactCopyMiddleName(self): return self.OPFContactCopyMiddleName
    def set_OPFContactCopyMiddleName(self, OPFContactCopyMiddleName): self.OPFContactCopyMiddleName = OPFContactCopyMiddleName
    def get_OPFContactCopyNickName(self): return self.OPFContactCopyNickName
    def set_OPFContactCopyNickName(self, OPFContactCopyNickName): self.OPFContactCopyNickName = OPFContactCopyNickName
    def get_OPFContactCopyOtherCity(self): return self.OPFContactCopyOtherCity
    def set_OPFContactCopyOtherCity(self, OPFContactCopyOtherCity): self.OPFContactCopyOtherCity = OPFContactCopyOtherCity
    def get_OPFContactCopyOtherCountry(self): return self.OPFContactCopyOtherCountry
    def set_OPFContactCopyOtherCountry(self, OPFContactCopyOtherCountry): self.OPFContactCopyOtherCountry = OPFContactCopyOtherCountry
    def get_OPFContactCopyOtherFax(self): return self.OPFContactCopyOtherFax
    def set_OPFContactCopyOtherFax(self, OPFContactCopyOtherFax): self.OPFContactCopyOtherFax = OPFContactCopyOtherFax
    def get_OPFContactCopyOtherPhone(self): return self.OPFContactCopyOtherPhone
    def set_OPFContactCopyOtherPhone(self, OPFContactCopyOtherPhone): self.OPFContactCopyOtherPhone = OPFContactCopyOtherPhone
    def get_OPFContactCopyOtherState(self): return self.OPFContactCopyOtherState
    def set_OPFContactCopyOtherState(self, OPFContactCopyOtherState): self.OPFContactCopyOtherState = OPFContactCopyOtherState
    def get_OPFContactCopyOtherStreetAddress(self): return self.OPFContactCopyOtherStreetAddress
    def set_OPFContactCopyOtherStreetAddress(self, OPFContactCopyOtherStreetAddress): self.OPFContactCopyOtherStreetAddress = OPFContactCopyOtherStreetAddress
    def get_OPFContactCopyOtherZip(self): return self.OPFContactCopyOtherZip
    def set_OPFContactCopyOtherZip(self, OPFContactCopyOtherZip): self.OPFContactCopyOtherZip = OPFContactCopyOtherZip
    def get_OPFContactCopyPager(self): return self.OPFContactCopyPager
    def set_OPFContactCopyPager(self, OPFContactCopyPager): self.OPFContactCopyPager = OPFContactCopyPager
    def get_OPFContactCopyRadioPhone(self): return self.OPFContactCopyRadioPhone
    def set_OPFContactCopyRadioPhone(self, OPFContactCopyRadioPhone): self.OPFContactCopyRadioPhone = OPFContactCopyRadioPhone
    def get_OPFContactCopySetNameSuffix(self): return self.OPFContactCopySetNameSuffix
    def set_OPFContactCopySetNameSuffix(self, OPFContactCopySetNameSuffix): self.OPFContactCopySetNameSuffix = OPFContactCopySetNameSuffix
    def get_OPFContactCopySpousesName(self): return self.OPFContactCopySpousesName
    def set_OPFContactCopySpousesName(self, OPFContactCopySpousesName): self.OPFContactCopySpousesName = OPFContactCopySpousesName
    def get_OPFContactCopyTitle(self): return self.OPFContactCopyTitle
    def set_OPFContactCopyTitle(self, OPFContactCopyTitle): self.OPFContactCopyTitle = OPFContactCopyTitle
    def get_OPFContactCustomData5(self): return self.OPFContactCustomData5
    def set_OPFContactCustomData5(self, OPFContactCustomData5): self.OPFContactCustomData5 = OPFContactCustomData5
    def get_OPFContactCustomData6(self): return self.OPFContactCustomData6
    def set_OPFContactCustomData6(self, OPFContactCustomData6): self.OPFContactCustomData6 = OPFContactCustomData6
    def get_OPFContactCustomData7(self): return self.OPFContactCustomData7
    def set_OPFContactCustomData7(self, OPFContactCustomData7): self.OPFContactCustomData7 = OPFContactCustomData7
    def get_OPFContactCustomData8(self): return self.OPFContactCustomData8
    def set_OPFContactCustomData8(self, OPFContactCustomData8): self.OPFContactCustomData8 = OPFContactCustomData8
    def get_OPFContactMainPhone(self): return self.OPFContactMainPhone
    def set_OPFContactMainPhone(self, OPFContactMainPhone): self.OPFContactMainPhone = OPFContactMainPhone
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFContactCopyCategoryList is not None or
            self.OPFContactCopyPrimaryCategory is not None or
            self.OPFContactCopyDueDateTime is not None or
            self.OPFContactCopyStartDateTime is not None or
            self.OPFContactCopyAnniversary is not None or
            self.OPFContactCopyAssistantPhone is not None or
            self.OPFContactCopyAstrologySign is not None or
            self.OPFContactCopyBloodType is not None or
            self.OPFContactCopyBusinessFax is not None or
            self.OPFContactCopyBusinessHomePage is not None or
            self.OPFContactCopyBusinessPhone2 is not None or
            self.OPFContactCanDelete is not None or
            self.OPFContactCanEdit is not None or
            self.OPFContactCopyAge is not None or
            self.OPFContactCopyBirthday is not None or
            self.OPFContactCopyBusinessCity is not None or
            self.OPFContactCopyBusinessCompany is not None or
            self.OPFContactCopyBusinessPhone is not None or
            self.OPFContactCopyCellPhone is not None or
            self.OPFContactCopyBusinessCountry is not None or
            self.OPFContactCopyBusinessDepartment is not None or
            self.OPFContactCopyBusinessOffice is not None or
            self.OPFContactCopyBusinessState is not None or
            self.OPFContactCopyBusinessStreetAddress is not None or
            self.OPFContactCopyBusinessTitle is not None or
            self.OPFContactCopyBusinessZip is not None or
            self.OPFContactCopyContactImage is not None or
            self.OPFContactCopyDefaultEmailAddress is not None or
            self.OPFContactCopyDefaultIMAddress is not None or
            self.OPFContactCopyDisplayName is not None or
            self.OPFContactCopyEmailAddressList is not None or
            self.OPFContactCopyEmailAddressList1 is not None or
            self.OPFContactCopyEmailAddressList2 is not None or
            self.OPFContactCopyFirstName is not None or
            self.OPFContactCopyLastName is not None or
            self.OPFContactCopyModDate is not None or
            self.OPFContactCopyNotes is not None or
            self.OPFContactCopyNotesPlain is not None or
            self.OPFContactGetFlagStatus is not None or
            self.OPFContactIsJapaneseContact is not None or
            self.OPFContactType is not None or
            self.OPFContactCopyHomeCity is not None or
            self.OPFContactCopyHomeCountry is not None or
            self.OPFContactCopyHomeState is not None or
            self.OPFContactCopyHomeStreetAddress is not None or
            self.OPFContactCopyHomeZip is not None or
            self.OPFContactCopyIMAddressList is not None or
            self.OPFContactCopyChildren is not None or
            self.OPFContactCopyCustom1Data is not None or
            self.OPFContactCopyCustom2Data is not None or
            self.OPFContactCopyCustom3Data is not None or
            self.OPFContactCopyCustom4Data is not None or
            self.OPFContactCopyCustom5Data is not None or
            self.OPFContactCopyCustomDate1 is not None or
            self.OPFContactCopyCustomDate2 is not None or
            self.OPFContactCopyCustomDate3 is not None or
            self.OPFContactCopyCustomPhone1 is not None or
            self.OPFContactCopyCustomPhone2 is not None or
            self.OPFContactCopyCustomPhone3 is not None or
            self.OPFContactCopyCustomPhone4 is not None or
            self.OPFContactCopyFuriganaChildrensNames is not None or
            self.OPFContactCopyHomeFax is not None or
            self.OPFContactCopyHomePhone is not None or
            self.OPFContactCopyHomePhone2 is not None or
            self.OPFContactCopyHomeWebPage is not None or
            self.OPFContactCopyInterests is not None or
            self.OPFContactCopyMiddleName is not None or
            self.OPFContactCopyNickName is not None or
            self.OPFContactCopyOtherCity is not None or
            self.OPFContactCopyOtherCountry is not None or
            self.OPFContactCopyOtherFax is not None or
            self.OPFContactCopyOtherPhone is not None or
            self.OPFContactCopyOtherState is not None or
            self.OPFContactCopyOtherStreetAddress is not None or
            self.OPFContactCopyOtherZip is not None or
            self.OPFContactCopyPager is not None or
            self.OPFContactCopyRadioPhone is not None or
            self.OPFContactCopySetNameSuffix is not None or
            self.OPFContactCopySpousesName is not None or
            self.OPFContactCopyTitle is not None or
            self.OPFContactCustomData5 is not None or
            self.OPFContactCustomData6 is not None or
            self.OPFContactCustomData7 is not None or
            self.OPFContactCustomData8 is not None or
            self.OPFContactMainPhone is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contactType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contactType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='contactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFContactCopyCategoryList is not None:
            self.OPFContactCopyCategoryList.export(outfile, level, namespace_, name_='OPFContactCopyCategoryList', pretty_print=pretty_print)
        if self.OPFContactCopyPrimaryCategory is not None:
            self.OPFContactCopyPrimaryCategory.export(outfile, level, namespace_, name_='OPFContactCopyPrimaryCategory', pretty_print=pretty_print)
        if self.OPFContactCopyDueDateTime is not None:
            self.OPFContactCopyDueDateTime.export(outfile, level, namespace_, name_='OPFContactCopyDueDateTime', pretty_print=pretty_print)
        if self.OPFContactCopyStartDateTime is not None:
            self.OPFContactCopyStartDateTime.export(outfile, level, namespace_, name_='OPFContactCopyStartDateTime', pretty_print=pretty_print)
        if self.OPFContactCopyAnniversary is not None:
            self.OPFContactCopyAnniversary.export(outfile, level, namespace_, name_='OPFContactCopyAnniversary', pretty_print=pretty_print)
        if self.OPFContactCopyAssistantPhone is not None:
            self.OPFContactCopyAssistantPhone.export(outfile, level, namespace_, name_='OPFContactCopyAssistantPhone', pretty_print=pretty_print)
        if self.OPFContactCopyAstrologySign is not None:
            self.OPFContactCopyAstrologySign.export(outfile, level, namespace_, name_='OPFContactCopyAstrologySign', pretty_print=pretty_print)
        if self.OPFContactCopyBloodType is not None:
            self.OPFContactCopyBloodType.export(outfile, level, namespace_, name_='OPFContactCopyBloodType', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessFax is not None:
            self.OPFContactCopyBusinessFax.export(outfile, level, namespace_, name_='OPFContactCopyBusinessFax', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessHomePage is not None:
            self.OPFContactCopyBusinessHomePage.export(outfile, level, namespace_, name_='OPFContactCopyBusinessHomePage', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessPhone2 is not None:
            self.OPFContactCopyBusinessPhone2.export(outfile, level, namespace_, name_='OPFContactCopyBusinessPhone2', pretty_print=pretty_print)
        if self.OPFContactCanDelete is not None:
            self.OPFContactCanDelete.export(outfile, level, namespace_, name_='OPFContactCanDelete', pretty_print=pretty_print)
        if self.OPFContactCanEdit is not None:
            self.OPFContactCanEdit.export(outfile, level, namespace_, name_='OPFContactCanEdit', pretty_print=pretty_print)
        if self.OPFContactCopyAge is not None:
            self.OPFContactCopyAge.export(outfile, level, namespace_, name_='OPFContactCopyAge', pretty_print=pretty_print)
        if self.OPFContactCopyBirthday is not None:
            self.OPFContactCopyBirthday.export(outfile, level, namespace_, name_='OPFContactCopyBirthday', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessCity is not None:
            self.OPFContactCopyBusinessCity.export(outfile, level, namespace_, name_='OPFContactCopyBusinessCity', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessCompany is not None:
            self.OPFContactCopyBusinessCompany.export(outfile, level, namespace_, name_='OPFContactCopyBusinessCompany', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessPhone is not None:
            self.OPFContactCopyBusinessPhone.export(outfile, level, namespace_, name_='OPFContactCopyBusinessPhone', pretty_print=pretty_print)
        if self.OPFContactCopyCellPhone is not None:
            self.OPFContactCopyCellPhone.export(outfile, level, namespace_, name_='OPFContactCopyCellPhone', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessCountry is not None:
            self.OPFContactCopyBusinessCountry.export(outfile, level, namespace_, name_='OPFContactCopyBusinessCountry', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessDepartment is not None:
            self.OPFContactCopyBusinessDepartment.export(outfile, level, namespace_, name_='OPFContactCopyBusinessDepartment', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessOffice is not None:
            self.OPFContactCopyBusinessOffice.export(outfile, level, namespace_, name_='OPFContactCopyBusinessOffice', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessState is not None:
            self.OPFContactCopyBusinessState.export(outfile, level, namespace_, name_='OPFContactCopyBusinessState', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessStreetAddress is not None:
            self.OPFContactCopyBusinessStreetAddress.export(outfile, level, namespace_, name_='OPFContactCopyBusinessStreetAddress', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessTitle is not None:
            self.OPFContactCopyBusinessTitle.export(outfile, level, namespace_, name_='OPFContactCopyBusinessTitle', pretty_print=pretty_print)
        if self.OPFContactCopyBusinessZip is not None:
            self.OPFContactCopyBusinessZip.export(outfile, level, namespace_, name_='OPFContactCopyBusinessZip', pretty_print=pretty_print)
        if self.OPFContactCopyContactImage is not None:
            self.OPFContactCopyContactImage.export(outfile, level, namespace_, name_='OPFContactCopyContactImage', pretty_print=pretty_print)
        if self.OPFContactCopyDefaultEmailAddress is not None:
            self.OPFContactCopyDefaultEmailAddress.export(outfile, level, namespace_, name_='OPFContactCopyDefaultEmailAddress', pretty_print=pretty_print)
        if self.OPFContactCopyDefaultIMAddress is not None:
            self.OPFContactCopyDefaultIMAddress.export(outfile, level, namespace_, name_='OPFContactCopyDefaultIMAddress', pretty_print=pretty_print)
        if self.OPFContactCopyDisplayName is not None:
            self.OPFContactCopyDisplayName.export(outfile, level, namespace_, name_='OPFContactCopyDisplayName', pretty_print=pretty_print)
        if self.OPFContactCopyEmailAddressList is not None:
            self.OPFContactCopyEmailAddressList.export(outfile, level, namespace_, name_='OPFContactCopyEmailAddressList', pretty_print=pretty_print)
        if self.OPFContactCopyEmailAddressList1 is not None:
            self.OPFContactCopyEmailAddressList1.export(outfile, level, namespace_, name_='OPFContactCopyEmailAddressList1', pretty_print=pretty_print)
        if self.OPFContactCopyEmailAddressList2 is not None:
            self.OPFContactCopyEmailAddressList2.export(outfile, level, namespace_, name_='OPFContactCopyEmailAddressList2', pretty_print=pretty_print)
        if self.OPFContactCopyFirstName is not None:
            self.OPFContactCopyFirstName.export(outfile, level, namespace_, name_='OPFContactCopyFirstName', pretty_print=pretty_print)
        if self.OPFContactCopyLastName is not None:
            self.OPFContactCopyLastName.export(outfile, level, namespace_, name_='OPFContactCopyLastName', pretty_print=pretty_print)
        if self.OPFContactCopyModDate is not None:
            self.OPFContactCopyModDate.export(outfile, level, namespace_, name_='OPFContactCopyModDate', pretty_print=pretty_print)
        if self.OPFContactCopyNotes is not None:
            self.OPFContactCopyNotes.export(outfile, level, namespace_, name_='OPFContactCopyNotes', pretty_print=pretty_print)
        if self.OPFContactCopyNotesPlain is not None:
            self.OPFContactCopyNotesPlain.export(outfile, level, namespace_, name_='OPFContactCopyNotesPlain', pretty_print=pretty_print)
        if self.OPFContactGetFlagStatus is not None:
            self.OPFContactGetFlagStatus.export(outfile, level, namespace_, name_='OPFContactGetFlagStatus', pretty_print=pretty_print)
        if self.OPFContactIsJapaneseContact is not None:
            self.OPFContactIsJapaneseContact.export(outfile, level, namespace_, name_='OPFContactIsJapaneseContact', pretty_print=pretty_print)
        if self.OPFContactType is not None:
            self.OPFContactType.export(outfile, level, namespace_, name_='OPFContactType', pretty_print=pretty_print)
        if self.OPFContactCopyHomeCity is not None:
            self.OPFContactCopyHomeCity.export(outfile, level, namespace_, name_='OPFContactCopyHomeCity', pretty_print=pretty_print)
        if self.OPFContactCopyHomeCountry is not None:
            self.OPFContactCopyHomeCountry.export(outfile, level, namespace_, name_='OPFContactCopyHomeCountry', pretty_print=pretty_print)
        if self.OPFContactCopyHomeState is not None:
            self.OPFContactCopyHomeState.export(outfile, level, namespace_, name_='OPFContactCopyHomeState', pretty_print=pretty_print)
        if self.OPFContactCopyHomeStreetAddress is not None:
            self.OPFContactCopyHomeStreetAddress.export(outfile, level, namespace_, name_='OPFContactCopyHomeStreetAddress', pretty_print=pretty_print)
        if self.OPFContactCopyHomeZip is not None:
            self.OPFContactCopyHomeZip.export(outfile, level, namespace_, name_='OPFContactCopyHomeZip', pretty_print=pretty_print)
        if self.OPFContactCopyIMAddressList is not None:
            self.OPFContactCopyIMAddressList.export(outfile, level, namespace_, name_='OPFContactCopyIMAddressList', pretty_print=pretty_print)
        if self.OPFContactCopyChildren is not None:
            self.OPFContactCopyChildren.export(outfile, level, namespace_, name_='OPFContactCopyChildren', pretty_print=pretty_print)
        if self.OPFContactCopyCustom1Data is not None:
            self.OPFContactCopyCustom1Data.export(outfile, level, namespace_, name_='OPFContactCopyCustom1Data', pretty_print=pretty_print)
        if self.OPFContactCopyCustom2Data is not None:
            self.OPFContactCopyCustom2Data.export(outfile, level, namespace_, name_='OPFContactCopyCustom2Data', pretty_print=pretty_print)
        if self.OPFContactCopyCustom3Data is not None:
            self.OPFContactCopyCustom3Data.export(outfile, level, namespace_, name_='OPFContactCopyCustom3Data', pretty_print=pretty_print)
        if self.OPFContactCopyCustom4Data is not None:
            self.OPFContactCopyCustom4Data.export(outfile, level, namespace_, name_='OPFContactCopyCustom4Data', pretty_print=pretty_print)
        if self.OPFContactCopyCustom5Data is not None:
            self.OPFContactCopyCustom5Data.export(outfile, level, namespace_, name_='OPFContactCopyCustom5Data', pretty_print=pretty_print)
        if self.OPFContactCopyCustomDate1 is not None:
            self.OPFContactCopyCustomDate1.export(outfile, level, namespace_, name_='OPFContactCopyCustomDate1', pretty_print=pretty_print)
        if self.OPFContactCopyCustomDate2 is not None:
            self.OPFContactCopyCustomDate2.export(outfile, level, namespace_, name_='OPFContactCopyCustomDate2', pretty_print=pretty_print)
        if self.OPFContactCopyCustomDate3 is not None:
            self.OPFContactCopyCustomDate3.export(outfile, level, namespace_, name_='OPFContactCopyCustomDate3', pretty_print=pretty_print)
        if self.OPFContactCopyCustomPhone1 is not None:
            self.OPFContactCopyCustomPhone1.export(outfile, level, namespace_, name_='OPFContactCopyCustomPhone1', pretty_print=pretty_print)
        if self.OPFContactCopyCustomPhone2 is not None:
            self.OPFContactCopyCustomPhone2.export(outfile, level, namespace_, name_='OPFContactCopyCustomPhone2', pretty_print=pretty_print)
        if self.OPFContactCopyCustomPhone3 is not None:
            self.OPFContactCopyCustomPhone3.export(outfile, level, namespace_, name_='OPFContactCopyCustomPhone3', pretty_print=pretty_print)
        if self.OPFContactCopyCustomPhone4 is not None:
            self.OPFContactCopyCustomPhone4.export(outfile, level, namespace_, name_='OPFContactCopyCustomPhone4', pretty_print=pretty_print)
        if self.OPFContactCopyFuriganaChildrensNames is not None:
            self.OPFContactCopyFuriganaChildrensNames.export(outfile, level, namespace_, name_='OPFContactCopyFuriganaChildrensNames', pretty_print=pretty_print)
        if self.OPFContactCopyHomeFax is not None:
            self.OPFContactCopyHomeFax.export(outfile, level, namespace_, name_='OPFContactCopyHomeFax', pretty_print=pretty_print)
        if self.OPFContactCopyHomePhone is not None:
            self.OPFContactCopyHomePhone.export(outfile, level, namespace_, name_='OPFContactCopyHomePhone', pretty_print=pretty_print)
        if self.OPFContactCopyHomePhone2 is not None:
            self.OPFContactCopyHomePhone2.export(outfile, level, namespace_, name_='OPFContactCopyHomePhone2', pretty_print=pretty_print)
        if self.OPFContactCopyHomeWebPage is not None:
            self.OPFContactCopyHomeWebPage.export(outfile, level, namespace_, name_='OPFContactCopyHomeWebPage', pretty_print=pretty_print)
        if self.OPFContactCopyInterests is not None:
            self.OPFContactCopyInterests.export(outfile, level, namespace_, name_='OPFContactCopyInterests', pretty_print=pretty_print)
        if self.OPFContactCopyMiddleName is not None:
            self.OPFContactCopyMiddleName.export(outfile, level, namespace_, name_='OPFContactCopyMiddleName', pretty_print=pretty_print)
        if self.OPFContactCopyNickName is not None:
            self.OPFContactCopyNickName.export(outfile, level, namespace_, name_='OPFContactCopyNickName', pretty_print=pretty_print)
        if self.OPFContactCopyOtherCity is not None:
            self.OPFContactCopyOtherCity.export(outfile, level, namespace_, name_='OPFContactCopyOtherCity', pretty_print=pretty_print)
        if self.OPFContactCopyOtherCountry is not None:
            self.OPFContactCopyOtherCountry.export(outfile, level, namespace_, name_='OPFContactCopyOtherCountry', pretty_print=pretty_print)
        if self.OPFContactCopyOtherFax is not None:
            self.OPFContactCopyOtherFax.export(outfile, level, namespace_, name_='OPFContactCopyOtherFax', pretty_print=pretty_print)
        if self.OPFContactCopyOtherPhone is not None:
            self.OPFContactCopyOtherPhone.export(outfile, level, namespace_, name_='OPFContactCopyOtherPhone', pretty_print=pretty_print)
        if self.OPFContactCopyOtherState is not None:
            self.OPFContactCopyOtherState.export(outfile, level, namespace_, name_='OPFContactCopyOtherState', pretty_print=pretty_print)
        if self.OPFContactCopyOtherStreetAddress is not None:
            self.OPFContactCopyOtherStreetAddress.export(outfile, level, namespace_, name_='OPFContactCopyOtherStreetAddress', pretty_print=pretty_print)
        if self.OPFContactCopyOtherZip is not None:
            self.OPFContactCopyOtherZip.export(outfile, level, namespace_, name_='OPFContactCopyOtherZip', pretty_print=pretty_print)
        if self.OPFContactCopyPager is not None:
            self.OPFContactCopyPager.export(outfile, level, namespace_, name_='OPFContactCopyPager', pretty_print=pretty_print)
        if self.OPFContactCopyRadioPhone is not None:
            self.OPFContactCopyRadioPhone.export(outfile, level, namespace_, name_='OPFContactCopyRadioPhone', pretty_print=pretty_print)
        if self.OPFContactCopySetNameSuffix is not None:
            self.OPFContactCopySetNameSuffix.export(outfile, level, namespace_, name_='OPFContactCopySetNameSuffix', pretty_print=pretty_print)
        if self.OPFContactCopySpousesName is not None:
            self.OPFContactCopySpousesName.export(outfile, level, namespace_, name_='OPFContactCopySpousesName', pretty_print=pretty_print)
        if self.OPFContactCopyTitle is not None:
            self.OPFContactCopyTitle.export(outfile, level, namespace_, name_='OPFContactCopyTitle', pretty_print=pretty_print)
        if self.OPFContactCustomData5 is not None:
            self.OPFContactCustomData5.export(outfile, level, namespace_, name_='OPFContactCustomData5', pretty_print=pretty_print)
        if self.OPFContactCustomData6 is not None:
            self.OPFContactCustomData6.export(outfile, level, namespace_, name_='OPFContactCustomData6', pretty_print=pretty_print)
        if self.OPFContactCustomData7 is not None:
            self.OPFContactCustomData7.export(outfile, level, namespace_, name_='OPFContactCustomData7', pretty_print=pretty_print)
        if self.OPFContactCustomData8 is not None:
            self.OPFContactCustomData8.export(outfile, level, namespace_, name_='OPFContactCustomData8', pretty_print=pretty_print)
        if self.OPFContactMainPhone is not None:
            self.OPFContactMainPhone.export(outfile, level, namespace_, name_='OPFContactMainPhone', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFContactCopyCategoryList':
            obj_ = OPFContactCopyCategoryListType.factory()
            obj_.build(child_)
            self.OPFContactCopyCategoryList = obj_
            obj_.original_tagname_ = 'OPFContactCopyCategoryList'
        elif nodeName_ == 'OPFContactCopyPrimaryCategory':
            obj_ = OPFContactCopyPrimaryCategoryType.factory()
            obj_.build(child_)
            self.OPFContactCopyPrimaryCategory = obj_
            obj_.original_tagname_ = 'OPFContactCopyPrimaryCategory'
        elif nodeName_ == 'OPFContactCopyDueDateTime':
            obj_ = OPFContactCopyDueDateTimeType.factory()
            obj_.build(child_)
            self.OPFContactCopyDueDateTime = obj_
            obj_.original_tagname_ = 'OPFContactCopyDueDateTime'
        elif nodeName_ == 'OPFContactCopyStartDateTime':
            obj_ = OPFContactCopyStartDateTimeType.factory()
            obj_.build(child_)
            self.OPFContactCopyStartDateTime = obj_
            obj_.original_tagname_ = 'OPFContactCopyStartDateTime'
        elif nodeName_ == 'OPFContactCopyAnniversary':
            obj_ = OPFContactCopyAnniversaryType.factory()
            obj_.build(child_)
            self.OPFContactCopyAnniversary = obj_
            obj_.original_tagname_ = 'OPFContactCopyAnniversary'
        elif nodeName_ == 'OPFContactCopyAssistantPhone':
            obj_ = OPFContactCopyAssistantPhoneType.factory()
            obj_.build(child_)
            self.OPFContactCopyAssistantPhone = obj_
            obj_.original_tagname_ = 'OPFContactCopyAssistantPhone'
        elif nodeName_ == 'OPFContactCopyAstrologySign':
            obj_ = OPFContactCopyAstrologySignType.factory()
            obj_.build(child_)
            self.OPFContactCopyAstrologySign = obj_
            obj_.original_tagname_ = 'OPFContactCopyAstrologySign'
        elif nodeName_ == 'OPFContactCopyBloodType':
            obj_ = OPFContactCopyBloodTypeType.factory()
            obj_.build(child_)
            self.OPFContactCopyBloodType = obj_
            obj_.original_tagname_ = 'OPFContactCopyBloodType'
        elif nodeName_ == 'OPFContactCopyBusinessFax':
            obj_ = OPFContactCopyBusinessFaxType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessFax = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessFax'
        elif nodeName_ == 'OPFContactCopyBusinessHomePage':
            obj_ = OPFContactCopyBusinessHomePageType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessHomePage = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessHomePage'
        elif nodeName_ == 'OPFContactCopyBusinessPhone2':
            obj_ = OPFContactCopyBusinessPhone2Type.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessPhone2 = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessPhone2'
        elif nodeName_ == 'OPFContactCanDelete':
            obj_ = OPFContactCanDeleteType.factory()
            obj_.build(child_)
            self.OPFContactCanDelete = obj_
            obj_.original_tagname_ = 'OPFContactCanDelete'
        elif nodeName_ == 'OPFContactCanEdit':
            obj_ = OPFContactCanEditType.factory()
            obj_.build(child_)
            self.OPFContactCanEdit = obj_
            obj_.original_tagname_ = 'OPFContactCanEdit'
        elif nodeName_ == 'OPFContactCopyAge':
            obj_ = OPFContactCopyAgeType.factory()
            obj_.build(child_)
            self.OPFContactCopyAge = obj_
            obj_.original_tagname_ = 'OPFContactCopyAge'
        elif nodeName_ == 'OPFContactCopyBirthday':
            obj_ = OPFContactCopyBirthdayType.factory()
            obj_.build(child_)
            self.OPFContactCopyBirthday = obj_
            obj_.original_tagname_ = 'OPFContactCopyBirthday'
        elif nodeName_ == 'OPFContactCopyBusinessCity':
            obj_ = OPFContactCopyBusinessCityType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessCity = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessCity'
        elif nodeName_ == 'OPFContactCopyBusinessCompany':
            obj_ = OPFContactCopyBusinessCompanyType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessCompany = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessCompany'
        elif nodeName_ == 'OPFContactCopyBusinessPhone':
            obj_ = OPFContactCopyBusinessPhoneType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessPhone = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessPhone'
        elif nodeName_ == 'OPFContactCopyCellPhone':
            obj_ = OPFContactCopyCellPhoneType.factory()
            obj_.build(child_)
            self.OPFContactCopyCellPhone = obj_
            obj_.original_tagname_ = 'OPFContactCopyCellPhone'
        elif nodeName_ == 'OPFContactCopyBusinessCountry':
            obj_ = OPFContactCopyBusinessCountryType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessCountry = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessCountry'
        elif nodeName_ == 'OPFContactCopyBusinessDepartment':
            obj_ = OPFContactCopyBusinessDepartmentType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessDepartment = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessDepartment'
        elif nodeName_ == 'OPFContactCopyBusinessOffice':
            obj_ = OPFContactCopyBusinessOfficeType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessOffice = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessOffice'
        elif nodeName_ == 'OPFContactCopyBusinessState':
            obj_ = OPFContactCopyBusinessStateType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessState = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessState'
        elif nodeName_ == 'OPFContactCopyBusinessStreetAddress':
            obj_ = OPFContactCopyBusinessStreetAddressType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessStreetAddress = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessStreetAddress'
        elif nodeName_ == 'OPFContactCopyBusinessTitle':
            obj_ = OPFContactCopyBusinessTitleType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessTitle = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessTitle'
        elif nodeName_ == 'OPFContactCopyBusinessZip':
            obj_ = OPFContactCopyBusinessZipType.factory()
            obj_.build(child_)
            self.OPFContactCopyBusinessZip = obj_
            obj_.original_tagname_ = 'OPFContactCopyBusinessZip'
        elif nodeName_ == 'OPFContactCopyContactImage':
            obj_ = OPFContactCopyContactImageType.factory()
            obj_.build(child_)
            self.OPFContactCopyContactImage = obj_
            obj_.original_tagname_ = 'OPFContactCopyContactImage'
        elif nodeName_ == 'OPFContactCopyDefaultEmailAddress':
            obj_ = OPFContactCopyDefaultEmailAddressType.factory()
            obj_.build(child_)
            self.OPFContactCopyDefaultEmailAddress = obj_
            obj_.original_tagname_ = 'OPFContactCopyDefaultEmailAddress'
        elif nodeName_ == 'OPFContactCopyDefaultIMAddress':
            obj_ = OPFContactCopyDefaultIMAddressType.factory()
            obj_.build(child_)
            self.OPFContactCopyDefaultIMAddress = obj_
            obj_.original_tagname_ = 'OPFContactCopyDefaultIMAddress'
        elif nodeName_ == 'OPFContactCopyDisplayName':
            obj_ = OPFContactCopyDisplayNameType.factory()
            obj_.build(child_)
            self.OPFContactCopyDisplayName = obj_
            obj_.original_tagname_ = 'OPFContactCopyDisplayName'
        elif nodeName_ == 'OPFContactCopyEmailAddressList':
            obj_ = OPFContactCopyEmailAddressListType.factory()
            obj_.build(child_)
            self.OPFContactCopyEmailAddressList = obj_
            obj_.original_tagname_ = 'OPFContactCopyEmailAddressList'
        elif nodeName_ == 'OPFContactCopyEmailAddressList1':
            obj_ = OPFContactCopyEmailAddressList1Type.factory()
            obj_.build(child_)
            self.OPFContactCopyEmailAddressList1 = obj_
            obj_.original_tagname_ = 'OPFContactCopyEmailAddressList1'
        elif nodeName_ == 'OPFContactCopyEmailAddressList2':
            obj_ = OPFContactCopyEmailAddressList2Type.factory()
            obj_.build(child_)
            self.OPFContactCopyEmailAddressList2 = obj_
            obj_.original_tagname_ = 'OPFContactCopyEmailAddressList2'
        elif nodeName_ == 'OPFContactCopyFirstName':
            obj_ = OPFContactCopyFirstNameType.factory()
            obj_.build(child_)
            self.OPFContactCopyFirstName = obj_
            obj_.original_tagname_ = 'OPFContactCopyFirstName'
        elif nodeName_ == 'OPFContactCopyLastName':
            obj_ = OPFContactCopyLastNameType.factory()
            obj_.build(child_)
            self.OPFContactCopyLastName = obj_
            obj_.original_tagname_ = 'OPFContactCopyLastName'
        elif nodeName_ == 'OPFContactCopyModDate':
            obj_ = OPFContactCopyModDateType.factory()
            obj_.build(child_)
            self.OPFContactCopyModDate = obj_
            obj_.original_tagname_ = 'OPFContactCopyModDate'
        elif nodeName_ == 'OPFContactCopyNotes':
            obj_ = OPFContactCopyNotesType.factory()
            obj_.build(child_)
            self.OPFContactCopyNotes = obj_
            obj_.original_tagname_ = 'OPFContactCopyNotes'
        elif nodeName_ == 'OPFContactCopyNotesPlain':
            obj_ = OPFContactCopyNotesPlainType.factory()
            obj_.build(child_)
            self.OPFContactCopyNotesPlain = obj_
            obj_.original_tagname_ = 'OPFContactCopyNotesPlain'
        elif nodeName_ == 'OPFContactGetFlagStatus':
            obj_ = OPFContactGetFlagStatusType.factory()
            obj_.build(child_)
            self.OPFContactGetFlagStatus = obj_
            obj_.original_tagname_ = 'OPFContactGetFlagStatus'
        elif nodeName_ == 'OPFContactIsJapaneseContact':
            obj_ = OPFContactIsJapaneseContactType.factory()
            obj_.build(child_)
            self.OPFContactIsJapaneseContact = obj_
            obj_.original_tagname_ = 'OPFContactIsJapaneseContact'
        elif nodeName_ == 'OPFContactType':
            obj_ = OPFContactTypeType.factory()
            obj_.build(child_)
            self.OPFContactType = obj_
            obj_.original_tagname_ = 'OPFContactType'
        elif nodeName_ == 'OPFContactCopyHomeCity':
            obj_ = OPFContactCopyHomeCityType.factory()
            obj_.build(child_)
            self.OPFContactCopyHomeCity = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomeCity'
        elif nodeName_ == 'OPFContactCopyHomeCountry':
            obj_ = OPFContactCopyHomeCountryType.factory()
            obj_.build(child_)
            self.OPFContactCopyHomeCountry = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomeCountry'
        elif nodeName_ == 'OPFContactCopyHomeState':
            obj_ = OPFContactCopyHomeStateType.factory()
            obj_.build(child_)
            self.OPFContactCopyHomeState = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomeState'
        elif nodeName_ == 'OPFContactCopyHomeStreetAddress':
            obj_ = OPFContactCopyHomeStreetAddressType.factory()
            obj_.build(child_)
            self.OPFContactCopyHomeStreetAddress = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomeStreetAddress'
        elif nodeName_ == 'OPFContactCopyHomeZip':
            obj_ = OPFContactCopyHomeZipType.factory()
            obj_.build(child_)
            self.OPFContactCopyHomeZip = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomeZip'
        elif nodeName_ == 'OPFContactCopyIMAddressList':
            obj_ = OPFContactCopyIMAddressListType.factory()
            obj_.build(child_)
            self.OPFContactCopyIMAddressList = obj_
            obj_.original_tagname_ = 'OPFContactCopyIMAddressList'
        elif nodeName_ == 'OPFContactCopyChildren':
            obj_ = OPFContactCopyChildrenType.factory()
            obj_.build(child_)
            self.OPFContactCopyChildren = obj_
            obj_.original_tagname_ = 'OPFContactCopyChildren'
        elif nodeName_ == 'OPFContactCopyCustom1Data':
            obj_ = OPFContactCopyCustom1DataType.factory()
            obj_.build(child_)
            self.OPFContactCopyCustom1Data = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustom1Data'
        elif nodeName_ == 'OPFContactCopyCustom2Data':
            obj_ = OPFContactCopyCustom2DataType.factory()
            obj_.build(child_)
            self.OPFContactCopyCustom2Data = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustom2Data'
        elif nodeName_ == 'OPFContactCopyCustom3Data':
            obj_ = OPFContactCopyCustom3DataType.factory()
            obj_.build(child_)
            self.OPFContactCopyCustom3Data = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustom3Data'
        elif nodeName_ == 'OPFContactCopyCustom4Data':
            obj_ = OPFContactCopyCustom4DataType.factory()
            obj_.build(child_)
            self.OPFContactCopyCustom4Data = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustom4Data'
        elif nodeName_ == 'OPFContactCopyCustom5Data':
            obj_ = OPFContactCopyCustom5DataType.factory()
            obj_.build(child_)
            self.OPFContactCopyCustom5Data = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustom5Data'
        elif nodeName_ == 'OPFContactCopyCustomDate1':
            obj_ = OPFContactCopyCustomDate1Type.factory()
            obj_.build(child_)
            self.OPFContactCopyCustomDate1 = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustomDate1'
        elif nodeName_ == 'OPFContactCopyCustomDate2':
            obj_ = OPFContactCopyCustomDate2Type.factory()
            obj_.build(child_)
            self.OPFContactCopyCustomDate2 = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustomDate2'
        elif nodeName_ == 'OPFContactCopyCustomDate3':
            obj_ = OPFContactCopyCustomDate3Type.factory()
            obj_.build(child_)
            self.OPFContactCopyCustomDate3 = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustomDate3'
        elif nodeName_ == 'OPFContactCopyCustomPhone1':
            obj_ = OPFContactCopyCustomPhone1Type.factory()
            obj_.build(child_)
            self.OPFContactCopyCustomPhone1 = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustomPhone1'
        elif nodeName_ == 'OPFContactCopyCustomPhone2':
            obj_ = OPFContactCopyCustomPhone2Type.factory()
            obj_.build(child_)
            self.OPFContactCopyCustomPhone2 = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustomPhone2'
        elif nodeName_ == 'OPFContactCopyCustomPhone3':
            obj_ = OPFContactCopyCustomPhone3Type.factory()
            obj_.build(child_)
            self.OPFContactCopyCustomPhone3 = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustomPhone3'
        elif nodeName_ == 'OPFContactCopyCustomPhone4':
            obj_ = OPFContactCopyCustomPhone4Type.factory()
            obj_.build(child_)
            self.OPFContactCopyCustomPhone4 = obj_
            obj_.original_tagname_ = 'OPFContactCopyCustomPhone4'
        elif nodeName_ == 'OPFContactCopyFuriganaChildrensNames':
            obj_ = OPFContactCopyFuriganaChildrensNamesType.factory()
            obj_.build(child_)
            self.OPFContactCopyFuriganaChildrensNames = obj_
            obj_.original_tagname_ = 'OPFContactCopyFuriganaChildrensNames'
        elif nodeName_ == 'OPFContactCopyHomeFax':
            obj_ = OPFContactCopyHomeFaxType.factory()
            obj_.build(child_)
            self.OPFContactCopyHomeFax = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomeFax'
        elif nodeName_ == 'OPFContactCopyHomePhone':
            obj_ = OPFContactCopyHomePhoneType.factory()
            obj_.build(child_)
            self.OPFContactCopyHomePhone = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomePhone'
        elif nodeName_ == 'OPFContactCopyHomePhone2':
            obj_ = OPFContactCopyHomePhone2Type.factory()
            obj_.build(child_)
            self.OPFContactCopyHomePhone2 = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomePhone2'
        elif nodeName_ == 'OPFContactCopyHomeWebPage':
            obj_ = OPFContactCopyHomeWebPageType.factory()
            obj_.build(child_)
            self.OPFContactCopyHomeWebPage = obj_
            obj_.original_tagname_ = 'OPFContactCopyHomeWebPage'
        elif nodeName_ == 'OPFContactCopyInterests':
            obj_ = OPFContactCopyInterestsType.factory()
            obj_.build(child_)
            self.OPFContactCopyInterests = obj_
            obj_.original_tagname_ = 'OPFContactCopyInterests'
        elif nodeName_ == 'OPFContactCopyMiddleName':
            obj_ = OPFContactCopyMiddleNameType.factory()
            obj_.build(child_)
            self.OPFContactCopyMiddleName = obj_
            obj_.original_tagname_ = 'OPFContactCopyMiddleName'
        elif nodeName_ == 'OPFContactCopyNickName':
            obj_ = OPFContactCopyNickNameType.factory()
            obj_.build(child_)
            self.OPFContactCopyNickName = obj_
            obj_.original_tagname_ = 'OPFContactCopyNickName'
        elif nodeName_ == 'OPFContactCopyOtherCity':
            obj_ = OPFContactCopyOtherCityType.factory()
            obj_.build(child_)
            self.OPFContactCopyOtherCity = obj_
            obj_.original_tagname_ = 'OPFContactCopyOtherCity'
        elif nodeName_ == 'OPFContactCopyOtherCountry':
            obj_ = OPFContactCopyOtherCountryType.factory()
            obj_.build(child_)
            self.OPFContactCopyOtherCountry = obj_
            obj_.original_tagname_ = 'OPFContactCopyOtherCountry'
        elif nodeName_ == 'OPFContactCopyOtherFax':
            obj_ = OPFContactCopyOtherFaxType.factory()
            obj_.build(child_)
            self.OPFContactCopyOtherFax = obj_
            obj_.original_tagname_ = 'OPFContactCopyOtherFax'
        elif nodeName_ == 'OPFContactCopyOtherPhone':
            obj_ = OPFContactCopyOtherPhoneType.factory()
            obj_.build(child_)
            self.OPFContactCopyOtherPhone = obj_
            obj_.original_tagname_ = 'OPFContactCopyOtherPhone'
        elif nodeName_ == 'OPFContactCopyOtherState':
            obj_ = OPFContactCopyOtherStateType.factory()
            obj_.build(child_)
            self.OPFContactCopyOtherState = obj_
            obj_.original_tagname_ = 'OPFContactCopyOtherState'
        elif nodeName_ == 'OPFContactCopyOtherStreetAddress':
            obj_ = OPFContactCopyOtherStreetAddressType.factory()
            obj_.build(child_)
            self.OPFContactCopyOtherStreetAddress = obj_
            obj_.original_tagname_ = 'OPFContactCopyOtherStreetAddress'
        elif nodeName_ == 'OPFContactCopyOtherZip':
            obj_ = OPFContactCopyOtherZipType.factory()
            obj_.build(child_)
            self.OPFContactCopyOtherZip = obj_
            obj_.original_tagname_ = 'OPFContactCopyOtherZip'
        elif nodeName_ == 'OPFContactCopyPager':
            obj_ = OPFContactCopyPagerType.factory()
            obj_.build(child_)
            self.OPFContactCopyPager = obj_
            obj_.original_tagname_ = 'OPFContactCopyPager'
        elif nodeName_ == 'OPFContactCopyRadioPhone':
            obj_ = OPFContactCopyRadioPhoneType.factory()
            obj_.build(child_)
            self.OPFContactCopyRadioPhone = obj_
            obj_.original_tagname_ = 'OPFContactCopyRadioPhone'
        elif nodeName_ == 'OPFContactCopySetNameSuffix':
            obj_ = OPFContactCopySetNameSuffixType.factory()
            obj_.build(child_)
            self.OPFContactCopySetNameSuffix = obj_
            obj_.original_tagname_ = 'OPFContactCopySetNameSuffix'
        elif nodeName_ == 'OPFContactCopySpousesName':
            obj_ = OPFContactCopySpousesNameType.factory()
            obj_.build(child_)
            self.OPFContactCopySpousesName = obj_
            obj_.original_tagname_ = 'OPFContactCopySpousesName'
        elif nodeName_ == 'OPFContactCopyTitle':
            obj_ = OPFContactCopyTitleType.factory()
            obj_.build(child_)
            self.OPFContactCopyTitle = obj_
            obj_.original_tagname_ = 'OPFContactCopyTitle'
        elif nodeName_ == 'OPFContactCustomData5':
            obj_ = OPFContactCustomData5Type.factory()
            obj_.build(child_)
            self.OPFContactCustomData5 = obj_
            obj_.original_tagname_ = 'OPFContactCustomData5'
        elif nodeName_ == 'OPFContactCustomData6':
            obj_ = OPFContactCustomData6Type.factory()
            obj_.build(child_)
            self.OPFContactCustomData6 = obj_
            obj_.original_tagname_ = 'OPFContactCustomData6'
        elif nodeName_ == 'OPFContactCustomData7':
            obj_ = OPFContactCustomData7Type.factory()
            obj_.build(child_)
            self.OPFContactCustomData7 = obj_
            obj_.original_tagname_ = 'OPFContactCustomData7'
        elif nodeName_ == 'OPFContactCustomData8':
            obj_ = OPFContactCustomData8Type.factory()
            obj_.build(child_)
            self.OPFContactCustomData8 = obj_
            obj_.original_tagname_ = 'OPFContactCustomData8'
        elif nodeName_ == 'OPFContactMainPhone':
            obj_ = OPFContactMainPhoneType.factory()
            obj_.build(child_)
            self.OPFContactMainPhone = obj_
            obj_.original_tagname_ = 'OPFContactMainPhone'
# end class contactType


class OPFContactCopyCategoryListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, category=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        if category is None:
            self.category = []
        else:
            self.category = category
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCategoryListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCategoryListType.subclass:
            return OPFContactCopyCategoryListType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCategoryListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def add_category(self, value): self.category.append(value)
    def insert_category_at(self, index, value): self.category.insert(index, value)
    def replace_category_at(self, index, value): self.category[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.category
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCategoryListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCategoryListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCategoryListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCategoryListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCategoryListType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCategoryListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for category_ in self.category:
            category_.export(outfile, level, namespace_, name_='category', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'category':
            obj_ = categoryType.factory()
            obj_.build(child_)
            self.category.append(obj_)
            obj_.original_tagname_ = 'category'
# end class OPFContactCopyCategoryListType


class categoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OPFCategoryCopyBackgroundColor=None, OPFCategoryCopyName=None, space=None):
        self.original_tagname_ = None
        self.OPFCategoryCopyBackgroundColor = _cast(None, OPFCategoryCopyBackgroundColor)
        self.OPFCategoryCopyName = _cast(None, OPFCategoryCopyName)
        self.space = _cast(None, space)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType.subclass:
            return categoryType.subclass(*args_, **kwargs_)
        else:
            return categoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCategoryCopyBackgroundColor(self): return self.OPFCategoryCopyBackgroundColor
    def set_OPFCategoryCopyBackgroundColor(self, OPFCategoryCopyBackgroundColor): self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
    def get_OPFCategoryCopyName(self): return self.OPFCategoryCopyName
    def set_OPFCategoryCopyName(self, OPFCategoryCopyName): self.OPFCategoryCopyName = OPFCategoryCopyName
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='categoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='categoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='categoryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='categoryType'):
        if self.OPFCategoryCopyBackgroundColor is not None and 'OPFCategoryCopyBackgroundColor' not in already_processed:
            already_processed.add('OPFCategoryCopyBackgroundColor')
            outfile.write(' OPFCategoryCopyBackgroundColor=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFCategoryCopyBackgroundColor), input_name='OPFCategoryCopyBackgroundColor')), ))
        if self.OPFCategoryCopyName is not None and 'OPFCategoryCopyName' not in already_processed:
            already_processed.add('OPFCategoryCopyName')
            outfile.write(' OPFCategoryCopyName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFCategoryCopyName), input_name='OPFCategoryCopyName')), ))
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='categoryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('OPFCategoryCopyBackgroundColor', node)
        if value is not None and 'OPFCategoryCopyBackgroundColor' not in already_processed:
            already_processed.add('OPFCategoryCopyBackgroundColor')
            self.OPFCategoryCopyBackgroundColor = value
        value = find_attr_value_('OPFCategoryCopyName', node)
        if value is not None and 'OPFCategoryCopyName' not in already_processed:
            already_processed.add('OPFCategoryCopyName')
            self.OPFCategoryCopyName = value
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class categoryType


class OPFContactCopyPrimaryCategoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFCategoryCopyBackgroundColor=None, OPFCategoryCopyName=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
        self.OPFCategoryCopyName = OPFCategoryCopyName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyPrimaryCategoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyPrimaryCategoryType.subclass:
            return OPFContactCopyPrimaryCategoryType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyPrimaryCategoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCategoryCopyBackgroundColor(self): return self.OPFCategoryCopyBackgroundColor
    def set_OPFCategoryCopyBackgroundColor(self, OPFCategoryCopyBackgroundColor): self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
    def get_OPFCategoryCopyName(self): return self.OPFCategoryCopyName
    def set_OPFCategoryCopyName(self, OPFCategoryCopyName): self.OPFCategoryCopyName = OPFCategoryCopyName
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFCategoryCopyBackgroundColor is not None or
            self.OPFCategoryCopyName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyPrimaryCategoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyPrimaryCategoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyPrimaryCategoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyPrimaryCategoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyPrimaryCategoryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyPrimaryCategoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFCategoryCopyBackgroundColor is not None:
            self.OPFCategoryCopyBackgroundColor.export(outfile, level, namespace_, name_='OPFCategoryCopyBackgroundColor', pretty_print=pretty_print)
        if self.OPFCategoryCopyName is not None:
            self.OPFCategoryCopyName.export(outfile, level, namespace_, name_='OPFCategoryCopyName', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFCategoryCopyBackgroundColor':
            obj_ = OPFCategoryCopyBackgroundColorType.factory()
            obj_.build(child_)
            self.OPFCategoryCopyBackgroundColor = obj_
            obj_.original_tagname_ = 'OPFCategoryCopyBackgroundColor'
        elif nodeName_ == 'OPFCategoryCopyName':
            obj_ = OPFCategoryCopyNameType.factory()
            obj_.build(child_)
            self.OPFCategoryCopyName = obj_
            obj_.original_tagname_ = 'OPFCategoryCopyName'
# end class OPFContactCopyPrimaryCategoryType


class OPFCategoryCopyBackgroundColorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCategoryCopyBackgroundColorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCategoryCopyBackgroundColorType.subclass:
            return OPFCategoryCopyBackgroundColorType.subclass(*args_, **kwargs_)
        else:
            return OPFCategoryCopyBackgroundColorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCategoryCopyBackgroundColorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCategoryCopyBackgroundColorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCategoryCopyBackgroundColorType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCategoryCopyBackgroundColorType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCategoryCopyBackgroundColorType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCategoryCopyBackgroundColorType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCategoryCopyBackgroundColorType


class OPFCategoryCopyNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCategoryCopyNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCategoryCopyNameType.subclass:
            return OPFCategoryCopyNameType.subclass(*args_, **kwargs_)
        else:
            return OPFCategoryCopyNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCategoryCopyNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCategoryCopyNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCategoryCopyNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCategoryCopyNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCategoryCopyNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCategoryCopyNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCategoryCopyNameType


class OPFContactCopyDueDateTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyDueDateTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyDueDateTimeType.subclass:
            return OPFContactCopyDueDateTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyDueDateTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyDueDateTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyDueDateTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyDueDateTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyDueDateTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyDueDateTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyDueDateTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyDueDateTimeType


class OPFContactCopyStartDateTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyStartDateTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyStartDateTimeType.subclass:
            return OPFContactCopyStartDateTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyStartDateTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyStartDateTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyStartDateTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyStartDateTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyStartDateTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyStartDateTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyStartDateTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyStartDateTimeType


class OPFContactCopyAnniversaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyAnniversaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyAnniversaryType.subclass:
            return OPFContactCopyAnniversaryType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyAnniversaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyAnniversaryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyAnniversaryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyAnniversaryType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyAnniversaryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyAnniversaryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyAnniversaryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyAnniversaryType


class OPFContactCopyAssistantPhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyAssistantPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyAssistantPhoneType.subclass:
            return OPFContactCopyAssistantPhoneType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyAssistantPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyAssistantPhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyAssistantPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyAssistantPhoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyAssistantPhoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyAssistantPhoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyAssistantPhoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyAssistantPhoneType


class OPFContactCopyAstrologySignType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyAstrologySignType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyAstrologySignType.subclass:
            return OPFContactCopyAstrologySignType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyAstrologySignType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyAstrologySignType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyAstrologySignType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyAstrologySignType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyAstrologySignType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyAstrologySignType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyAstrologySignType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyAstrologySignType


class OPFContactCopyBloodTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBloodTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBloodTypeType.subclass:
            return OPFContactCopyBloodTypeType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBloodTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBloodTypeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBloodTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBloodTypeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBloodTypeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBloodTypeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBloodTypeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBloodTypeType


class OPFContactCopyBusinessFaxType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessFaxType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessFaxType.subclass:
            return OPFContactCopyBusinessFaxType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessFaxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessFaxType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessFaxType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessFaxType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessFaxType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessFaxType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessFaxType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessFaxType


class OPFContactCopyBusinessHomePageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessHomePageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessHomePageType.subclass:
            return OPFContactCopyBusinessHomePageType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessHomePageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessHomePageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessHomePageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessHomePageType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessHomePageType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessHomePageType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessHomePageType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessHomePageType


class OPFContactCopyBusinessPhone2Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessPhone2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessPhone2Type.subclass:
            return OPFContactCopyBusinessPhone2Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessPhone2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessPhone2Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessPhone2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessPhone2Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessPhone2Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessPhone2Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessPhone2Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessPhone2Type


class OPFContactCanDeleteType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCanDeleteType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCanDeleteType.subclass:
            return OPFContactCanDeleteType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCanDeleteType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCanDeleteType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCanDeleteType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCanDeleteType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCanDeleteType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCanDeleteType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCanDeleteType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCanDeleteType


class OPFContactCanEditType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCanEditType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCanEditType.subclass:
            return OPFContactCanEditType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCanEditType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCanEditType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCanEditType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCanEditType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCanEditType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCanEditType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCanEditType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCanEditType


class OPFContactCopyAgeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyAgeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyAgeType.subclass:
            return OPFContactCopyAgeType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyAgeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyAgeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyAgeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyAgeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyAgeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyAgeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyAgeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyAgeType


class OPFContactCopyBirthdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBirthdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBirthdayType.subclass:
            return OPFContactCopyBirthdayType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBirthdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBirthdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBirthdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBirthdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBirthdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBirthdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBirthdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBirthdayType


class OPFContactCopyBusinessCityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessCityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessCityType.subclass:
            return OPFContactCopyBusinessCityType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessCityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessCityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessCityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessCityType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessCityType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessCityType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessCityType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessCityType


class OPFContactCopyBusinessCompanyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessCompanyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessCompanyType.subclass:
            return OPFContactCopyBusinessCompanyType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessCompanyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessCompanyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessCompanyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessCompanyType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessCompanyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessCompanyType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessCompanyType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessCompanyType


class OPFContactCopyBusinessPhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessPhoneType.subclass:
            return OPFContactCopyBusinessPhoneType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessPhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessPhoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessPhoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessPhoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessPhoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessPhoneType


class OPFContactCopyCellPhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCellPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCellPhoneType.subclass:
            return OPFContactCopyCellPhoneType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCellPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCellPhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCellPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCellPhoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCellPhoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCellPhoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCellPhoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCellPhoneType


class OPFContactCopyBusinessCountryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessCountryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessCountryType.subclass:
            return OPFContactCopyBusinessCountryType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessCountryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessCountryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessCountryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessCountryType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessCountryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessCountryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessCountryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessCountryType


class OPFContactCopyBusinessDepartmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessDepartmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessDepartmentType.subclass:
            return OPFContactCopyBusinessDepartmentType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessDepartmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessDepartmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessDepartmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessDepartmentType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessDepartmentType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessDepartmentType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessDepartmentType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessDepartmentType


class OPFContactCopyBusinessOfficeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessOfficeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessOfficeType.subclass:
            return OPFContactCopyBusinessOfficeType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessOfficeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessOfficeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessOfficeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessOfficeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessOfficeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessOfficeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessOfficeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessOfficeType


class OPFContactCopyBusinessStateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessStateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessStateType.subclass:
            return OPFContactCopyBusinessStateType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessStateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessStateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessStateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessStateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessStateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessStateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessStateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessStateType


class OPFContactCopyBusinessStreetAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessStreetAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessStreetAddressType.subclass:
            return OPFContactCopyBusinessStreetAddressType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessStreetAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessStreetAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessStreetAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessStreetAddressType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessStreetAddressType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessStreetAddressType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessStreetAddressType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessStreetAddressType


class OPFContactCopyBusinessTitleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessTitleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessTitleType.subclass:
            return OPFContactCopyBusinessTitleType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessTitleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessTitleType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessTitleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessTitleType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessTitleType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessTitleType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessTitleType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessTitleType


class OPFContactCopyBusinessZipType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyBusinessZipType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyBusinessZipType.subclass:
            return OPFContactCopyBusinessZipType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyBusinessZipType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessZipType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyBusinessZipType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyBusinessZipType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyBusinessZipType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyBusinessZipType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyBusinessZipType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyBusinessZipType


class OPFContactCopyContactImageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyContactImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyContactImageType.subclass:
            return OPFContactCopyContactImageType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyContactImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyContactImageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyContactImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyContactImageType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyContactImageType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyContactImageType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyContactImageType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyContactImageType


class OPFContactCopyDefaultEmailAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, contactEmailAddress=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.contactEmailAddress = contactEmailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyDefaultEmailAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyDefaultEmailAddressType.subclass:
            return OPFContactCopyDefaultEmailAddressType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyDefaultEmailAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contactEmailAddress(self): return self.contactEmailAddress
    def set_contactEmailAddress(self, contactEmailAddress): self.contactEmailAddress = contactEmailAddress
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.contactEmailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyDefaultEmailAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyDefaultEmailAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyDefaultEmailAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyDefaultEmailAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyDefaultEmailAddressType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyDefaultEmailAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contactEmailAddress is not None:
            self.contactEmailAddress.export(outfile, level, namespace_, name_='contactEmailAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contactEmailAddress':
            obj_ = contactEmailAddressType.factory()
            obj_.build(child_)
            self.contactEmailAddress = obj_
            obj_.original_tagname_ = 'contactEmailAddress'
# end class OPFContactCopyDefaultEmailAddressType


class contactEmailAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFContactEmailAddressAddress=None, OPFContactEmailAddressIsDefault=None, OPFContactEmailAddressType=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFContactEmailAddressAddress = _cast(None, OPFContactEmailAddressAddress)
        self.OPFContactEmailAddressIsDefault = _cast(int, OPFContactEmailAddressIsDefault)
        self.OPFContactEmailAddressType = _cast(int, OPFContactEmailAddressType)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contactEmailAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contactEmailAddressType.subclass:
            return contactEmailAddressType.subclass(*args_, **kwargs_)
        else:
            return contactEmailAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_OPFContactEmailAddressAddress(self): return self.OPFContactEmailAddressAddress
    def set_OPFContactEmailAddressAddress(self, OPFContactEmailAddressAddress): self.OPFContactEmailAddressAddress = OPFContactEmailAddressAddress
    def get_OPFContactEmailAddressIsDefault(self): return self.OPFContactEmailAddressIsDefault
    def set_OPFContactEmailAddressIsDefault(self, OPFContactEmailAddressIsDefault): self.OPFContactEmailAddressIsDefault = OPFContactEmailAddressIsDefault
    def get_OPFContactEmailAddressType(self): return self.OPFContactEmailAddressType
    def set_OPFContactEmailAddressType(self, OPFContactEmailAddressType): self.OPFContactEmailAddressType = OPFContactEmailAddressType
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contactEmailAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contactEmailAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contactEmailAddressType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contactEmailAddressType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contactEmailAddressType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.OPFContactEmailAddressAddress is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            outfile.write(' OPFContactEmailAddressAddress=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFContactEmailAddressAddress), input_name='OPFContactEmailAddressAddress')), ))
        if self.OPFContactEmailAddressIsDefault is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            outfile.write(' OPFContactEmailAddressIsDefault="%s"' % self.gds_format_integer(self.OPFContactEmailAddressIsDefault, input_name='OPFContactEmailAddressIsDefault'))
        if self.OPFContactEmailAddressType is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            outfile.write(' OPFContactEmailAddressType="%s"' % self.gds_format_integer(self.OPFContactEmailAddressType, input_name='OPFContactEmailAddressType'))
    def exportChildren(self, outfile, level, namespace_='', name_='contactEmailAddressType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('OPFContactEmailAddressAddress', node)
        if value is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            self.OPFContactEmailAddressAddress = value
        value = find_attr_value_('OPFContactEmailAddressIsDefault', node)
        if value is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            try:
                self.OPFContactEmailAddressIsDefault = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('OPFContactEmailAddressType', node)
        if value is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            try:
                self.OPFContactEmailAddressType = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class contactEmailAddressType


class OPFContactCopyDefaultIMAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, contactEmailAddress=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.contactEmailAddress = contactEmailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyDefaultIMAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyDefaultIMAddressType.subclass:
            return OPFContactCopyDefaultIMAddressType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyDefaultIMAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contactEmailAddress(self): return self.contactEmailAddress
    def set_contactEmailAddress(self, contactEmailAddress): self.contactEmailAddress = contactEmailAddress
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.contactEmailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyDefaultIMAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyDefaultIMAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyDefaultIMAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyDefaultIMAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyDefaultIMAddressType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyDefaultIMAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contactEmailAddress is not None:
            self.contactEmailAddress.export(outfile, level, namespace_, name_='contactEmailAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contactEmailAddress':
            obj_ = contactEmailAddressType1.factory()
            obj_.build(child_)
            self.contactEmailAddress = obj_
            obj_.original_tagname_ = 'contactEmailAddress'
# end class OPFContactCopyDefaultIMAddressType


class contactEmailAddressType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFContactEmailAddressAddress=None, OPFContactEmailAddressIsDefault=None, OPFContactEmailAddressType=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFContactEmailAddressAddress = _cast(None, OPFContactEmailAddressAddress)
        self.OPFContactEmailAddressIsDefault = _cast(int, OPFContactEmailAddressIsDefault)
        self.OPFContactEmailAddressType = _cast(int, OPFContactEmailAddressType)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contactEmailAddressType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contactEmailAddressType1.subclass:
            return contactEmailAddressType1.subclass(*args_, **kwargs_)
        else:
            return contactEmailAddressType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_OPFContactEmailAddressAddress(self): return self.OPFContactEmailAddressAddress
    def set_OPFContactEmailAddressAddress(self, OPFContactEmailAddressAddress): self.OPFContactEmailAddressAddress = OPFContactEmailAddressAddress
    def get_OPFContactEmailAddressIsDefault(self): return self.OPFContactEmailAddressIsDefault
    def set_OPFContactEmailAddressIsDefault(self, OPFContactEmailAddressIsDefault): self.OPFContactEmailAddressIsDefault = OPFContactEmailAddressIsDefault
    def get_OPFContactEmailAddressType(self): return self.OPFContactEmailAddressType
    def set_OPFContactEmailAddressType(self, OPFContactEmailAddressType): self.OPFContactEmailAddressType = OPFContactEmailAddressType
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contactEmailAddressType1', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contactEmailAddressType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contactEmailAddressType1')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contactEmailAddressType1', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contactEmailAddressType1'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.OPFContactEmailAddressAddress is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            outfile.write(' OPFContactEmailAddressAddress=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFContactEmailAddressAddress), input_name='OPFContactEmailAddressAddress')), ))
        if self.OPFContactEmailAddressIsDefault is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            outfile.write(' OPFContactEmailAddressIsDefault="%s"' % self.gds_format_integer(self.OPFContactEmailAddressIsDefault, input_name='OPFContactEmailAddressIsDefault'))
        if self.OPFContactEmailAddressType is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            outfile.write(' OPFContactEmailAddressType="%s"' % self.gds_format_integer(self.OPFContactEmailAddressType, input_name='OPFContactEmailAddressType'))
    def exportChildren(self, outfile, level, namespace_='', name_='contactEmailAddressType1', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('OPFContactEmailAddressAddress', node)
        if value is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            self.OPFContactEmailAddressAddress = value
        value = find_attr_value_('OPFContactEmailAddressIsDefault', node)
        if value is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            try:
                self.OPFContactEmailAddressIsDefault = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('OPFContactEmailAddressType', node)
        if value is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            try:
                self.OPFContactEmailAddressType = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class contactEmailAddressType1


class OPFContactCopyDisplayNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyDisplayNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyDisplayNameType.subclass:
            return OPFContactCopyDisplayNameType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyDisplayNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyDisplayNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyDisplayNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyDisplayNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyDisplayNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyDisplayNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyDisplayNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyDisplayNameType


class OPFContactCopyEmailAddressListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, contactEmailAddress=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        if contactEmailAddress is None:
            self.contactEmailAddress = []
        else:
            self.contactEmailAddress = contactEmailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyEmailAddressListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyEmailAddressListType.subclass:
            return OPFContactCopyEmailAddressListType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyEmailAddressListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contactEmailAddress(self): return self.contactEmailAddress
    def set_contactEmailAddress(self, contactEmailAddress): self.contactEmailAddress = contactEmailAddress
    def add_contactEmailAddress(self, value): self.contactEmailAddress.append(value)
    def insert_contactEmailAddress_at(self, index, value): self.contactEmailAddress.insert(index, value)
    def replace_contactEmailAddress_at(self, index, value): self.contactEmailAddress[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.contactEmailAddress
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyEmailAddressListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyEmailAddressListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyEmailAddressListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyEmailAddressListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyEmailAddressListType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyEmailAddressListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for contactEmailAddress_ in self.contactEmailAddress:
            contactEmailAddress_.export(outfile, level, namespace_, name_='contactEmailAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contactEmailAddress':
            obj_ = contactEmailAddressType2.factory()
            obj_.build(child_)
            self.contactEmailAddress.append(obj_)
            obj_.original_tagname_ = 'contactEmailAddress'
# end class OPFContactCopyEmailAddressListType


class contactEmailAddressType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFContactEmailAddressAddress=None, OPFContactEmailAddressIsDefault=None, OPFContactEmailAddressType=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFContactEmailAddressAddress = _cast(None, OPFContactEmailAddressAddress)
        self.OPFContactEmailAddressIsDefault = _cast(int, OPFContactEmailAddressIsDefault)
        self.OPFContactEmailAddressType = _cast(int, OPFContactEmailAddressType)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contactEmailAddressType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contactEmailAddressType2.subclass:
            return contactEmailAddressType2.subclass(*args_, **kwargs_)
        else:
            return contactEmailAddressType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_OPFContactEmailAddressAddress(self): return self.OPFContactEmailAddressAddress
    def set_OPFContactEmailAddressAddress(self, OPFContactEmailAddressAddress): self.OPFContactEmailAddressAddress = OPFContactEmailAddressAddress
    def get_OPFContactEmailAddressIsDefault(self): return self.OPFContactEmailAddressIsDefault
    def set_OPFContactEmailAddressIsDefault(self, OPFContactEmailAddressIsDefault): self.OPFContactEmailAddressIsDefault = OPFContactEmailAddressIsDefault
    def get_OPFContactEmailAddressType(self): return self.OPFContactEmailAddressType
    def set_OPFContactEmailAddressType(self, OPFContactEmailAddressType): self.OPFContactEmailAddressType = OPFContactEmailAddressType
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contactEmailAddressType2', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contactEmailAddressType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contactEmailAddressType2')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contactEmailAddressType2', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contactEmailAddressType2'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.OPFContactEmailAddressAddress is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            outfile.write(' OPFContactEmailAddressAddress=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFContactEmailAddressAddress), input_name='OPFContactEmailAddressAddress')), ))
        if self.OPFContactEmailAddressIsDefault is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            outfile.write(' OPFContactEmailAddressIsDefault="%s"' % self.gds_format_integer(self.OPFContactEmailAddressIsDefault, input_name='OPFContactEmailAddressIsDefault'))
        if self.OPFContactEmailAddressType is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            outfile.write(' OPFContactEmailAddressType="%s"' % self.gds_format_integer(self.OPFContactEmailAddressType, input_name='OPFContactEmailAddressType'))
    def exportChildren(self, outfile, level, namespace_='', name_='contactEmailAddressType2', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('OPFContactEmailAddressAddress', node)
        if value is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            self.OPFContactEmailAddressAddress = value
        value = find_attr_value_('OPFContactEmailAddressIsDefault', node)
        if value is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            try:
                self.OPFContactEmailAddressIsDefault = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('OPFContactEmailAddressType', node)
        if value is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            try:
                self.OPFContactEmailAddressType = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class contactEmailAddressType2


class OPFContactCopyEmailAddressList1Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, contactEmailAddress=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.contactEmailAddress = contactEmailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyEmailAddressList1Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyEmailAddressList1Type.subclass:
            return OPFContactCopyEmailAddressList1Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyEmailAddressList1Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contactEmailAddress(self): return self.contactEmailAddress
    def set_contactEmailAddress(self, contactEmailAddress): self.contactEmailAddress = contactEmailAddress
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.contactEmailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyEmailAddressList1Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyEmailAddressList1Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyEmailAddressList1Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyEmailAddressList1Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyEmailAddressList1Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyEmailAddressList1Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contactEmailAddress is not None:
            self.contactEmailAddress.export(outfile, level, namespace_, name_='contactEmailAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contactEmailAddress':
            obj_ = contactEmailAddressType3.factory()
            obj_.build(child_)
            self.contactEmailAddress = obj_
            obj_.original_tagname_ = 'contactEmailAddress'
# end class OPFContactCopyEmailAddressList1Type


class contactEmailAddressType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFContactEmailAddressAddress=None, OPFContactEmailAddressIsDefault=None, OPFContactEmailAddressType=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFContactEmailAddressAddress = _cast(None, OPFContactEmailAddressAddress)
        self.OPFContactEmailAddressIsDefault = _cast(int, OPFContactEmailAddressIsDefault)
        self.OPFContactEmailAddressType = _cast(int, OPFContactEmailAddressType)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contactEmailAddressType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contactEmailAddressType3.subclass:
            return contactEmailAddressType3.subclass(*args_, **kwargs_)
        else:
            return contactEmailAddressType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_OPFContactEmailAddressAddress(self): return self.OPFContactEmailAddressAddress
    def set_OPFContactEmailAddressAddress(self, OPFContactEmailAddressAddress): self.OPFContactEmailAddressAddress = OPFContactEmailAddressAddress
    def get_OPFContactEmailAddressIsDefault(self): return self.OPFContactEmailAddressIsDefault
    def set_OPFContactEmailAddressIsDefault(self, OPFContactEmailAddressIsDefault): self.OPFContactEmailAddressIsDefault = OPFContactEmailAddressIsDefault
    def get_OPFContactEmailAddressType(self): return self.OPFContactEmailAddressType
    def set_OPFContactEmailAddressType(self, OPFContactEmailAddressType): self.OPFContactEmailAddressType = OPFContactEmailAddressType
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contactEmailAddressType3', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contactEmailAddressType3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contactEmailAddressType3')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contactEmailAddressType3', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contactEmailAddressType3'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.OPFContactEmailAddressAddress is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            outfile.write(' OPFContactEmailAddressAddress=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFContactEmailAddressAddress), input_name='OPFContactEmailAddressAddress')), ))
        if self.OPFContactEmailAddressIsDefault is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            outfile.write(' OPFContactEmailAddressIsDefault="%s"' % self.gds_format_integer(self.OPFContactEmailAddressIsDefault, input_name='OPFContactEmailAddressIsDefault'))
        if self.OPFContactEmailAddressType is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            outfile.write(' OPFContactEmailAddressType="%s"' % self.gds_format_integer(self.OPFContactEmailAddressType, input_name='OPFContactEmailAddressType'))
    def exportChildren(self, outfile, level, namespace_='', name_='contactEmailAddressType3', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('OPFContactEmailAddressAddress', node)
        if value is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            self.OPFContactEmailAddressAddress = value
        value = find_attr_value_('OPFContactEmailAddressIsDefault', node)
        if value is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            try:
                self.OPFContactEmailAddressIsDefault = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('OPFContactEmailAddressType', node)
        if value is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            try:
                self.OPFContactEmailAddressType = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class contactEmailAddressType3


class OPFContactCopyEmailAddressList2Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, contactEmailAddress=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.contactEmailAddress = contactEmailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyEmailAddressList2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyEmailAddressList2Type.subclass:
            return OPFContactCopyEmailAddressList2Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyEmailAddressList2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contactEmailAddress(self): return self.contactEmailAddress
    def set_contactEmailAddress(self, contactEmailAddress): self.contactEmailAddress = contactEmailAddress
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.contactEmailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyEmailAddressList2Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyEmailAddressList2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyEmailAddressList2Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyEmailAddressList2Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyEmailAddressList2Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyEmailAddressList2Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contactEmailAddress is not None:
            self.contactEmailAddress.export(outfile, level, namespace_, name_='contactEmailAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contactEmailAddress':
            obj_ = contactEmailAddressType4.factory()
            obj_.build(child_)
            self.contactEmailAddress = obj_
            obj_.original_tagname_ = 'contactEmailAddress'
# end class OPFContactCopyEmailAddressList2Type


class contactEmailAddressType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFContactEmailAddressAddress=None, OPFContactEmailAddressIsDefault=None, OPFContactEmailAddressType=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFContactEmailAddressAddress = _cast(None, OPFContactEmailAddressAddress)
        self.OPFContactEmailAddressIsDefault = _cast(int, OPFContactEmailAddressIsDefault)
        self.OPFContactEmailAddressType = _cast(int, OPFContactEmailAddressType)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contactEmailAddressType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contactEmailAddressType4.subclass:
            return contactEmailAddressType4.subclass(*args_, **kwargs_)
        else:
            return contactEmailAddressType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_OPFContactEmailAddressAddress(self): return self.OPFContactEmailAddressAddress
    def set_OPFContactEmailAddressAddress(self, OPFContactEmailAddressAddress): self.OPFContactEmailAddressAddress = OPFContactEmailAddressAddress
    def get_OPFContactEmailAddressIsDefault(self): return self.OPFContactEmailAddressIsDefault
    def set_OPFContactEmailAddressIsDefault(self, OPFContactEmailAddressIsDefault): self.OPFContactEmailAddressIsDefault = OPFContactEmailAddressIsDefault
    def get_OPFContactEmailAddressType(self): return self.OPFContactEmailAddressType
    def set_OPFContactEmailAddressType(self, OPFContactEmailAddressType): self.OPFContactEmailAddressType = OPFContactEmailAddressType
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contactEmailAddressType4', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contactEmailAddressType4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contactEmailAddressType4')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contactEmailAddressType4', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contactEmailAddressType4'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.OPFContactEmailAddressAddress is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            outfile.write(' OPFContactEmailAddressAddress=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFContactEmailAddressAddress), input_name='OPFContactEmailAddressAddress')), ))
        if self.OPFContactEmailAddressIsDefault is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            outfile.write(' OPFContactEmailAddressIsDefault="%s"' % self.gds_format_integer(self.OPFContactEmailAddressIsDefault, input_name='OPFContactEmailAddressIsDefault'))
        if self.OPFContactEmailAddressType is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            outfile.write(' OPFContactEmailAddressType="%s"' % self.gds_format_integer(self.OPFContactEmailAddressType, input_name='OPFContactEmailAddressType'))
    def exportChildren(self, outfile, level, namespace_='', name_='contactEmailAddressType4', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('OPFContactEmailAddressAddress', node)
        if value is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            self.OPFContactEmailAddressAddress = value
        value = find_attr_value_('OPFContactEmailAddressIsDefault', node)
        if value is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            try:
                self.OPFContactEmailAddressIsDefault = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('OPFContactEmailAddressType', node)
        if value is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            try:
                self.OPFContactEmailAddressType = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class contactEmailAddressType4


class OPFContactCopyFirstNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyFirstNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyFirstNameType.subclass:
            return OPFContactCopyFirstNameType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyFirstNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyFirstNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyFirstNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyFirstNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyFirstNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyFirstNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyFirstNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyFirstNameType


class OPFContactCopyLastNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyLastNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyLastNameType.subclass:
            return OPFContactCopyLastNameType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyLastNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyLastNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyLastNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyLastNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyLastNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyLastNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyLastNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyLastNameType


class OPFContactCopyModDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyModDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyModDateType.subclass:
            return OPFContactCopyModDateType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyModDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyModDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyModDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyModDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyModDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyModDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyModDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyModDateType


class OPFContactCopyNotesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyNotesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyNotesType.subclass:
            return OPFContactCopyNotesType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyNotesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyNotesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyNotesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyNotesType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyNotesType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyNotesType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyNotesType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyNotesType


class OPFContactCopyNotesPlainType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyNotesPlainType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyNotesPlainType.subclass:
            return OPFContactCopyNotesPlainType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyNotesPlainType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyNotesPlainType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyNotesPlainType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyNotesPlainType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyNotesPlainType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyNotesPlainType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyNotesPlainType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyNotesPlainType


class OPFContactGetFlagStatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactGetFlagStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactGetFlagStatusType.subclass:
            return OPFContactGetFlagStatusType.subclass(*args_, **kwargs_)
        else:
            return OPFContactGetFlagStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactGetFlagStatusType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactGetFlagStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactGetFlagStatusType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactGetFlagStatusType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactGetFlagStatusType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactGetFlagStatusType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactGetFlagStatusType


class OPFContactIsJapaneseContactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactIsJapaneseContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactIsJapaneseContactType.subclass:
            return OPFContactIsJapaneseContactType.subclass(*args_, **kwargs_)
        else:
            return OPFContactIsJapaneseContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactIsJapaneseContactType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactIsJapaneseContactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactIsJapaneseContactType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactIsJapaneseContactType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactIsJapaneseContactType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactIsJapaneseContactType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactIsJapaneseContactType


class OPFContactTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactTypeType.subclass:
            return OPFContactTypeType.subclass(*args_, **kwargs_)
        else:
            return OPFContactTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactTypeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactTypeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactTypeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactTypeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactTypeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactTypeType


class OPFContactCopyHomeCityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomeCityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomeCityType.subclass:
            return OPFContactCopyHomeCityType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomeCityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomeCityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomeCityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomeCityType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomeCityType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomeCityType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomeCityType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomeCityType


class OPFContactCopyHomeCountryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomeCountryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomeCountryType.subclass:
            return OPFContactCopyHomeCountryType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomeCountryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomeCountryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomeCountryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomeCountryType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomeCountryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomeCountryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomeCountryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomeCountryType


class OPFContactCopyHomeStateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomeStateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomeStateType.subclass:
            return OPFContactCopyHomeStateType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomeStateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomeStateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomeStateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomeStateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomeStateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomeStateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomeStateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomeStateType


class OPFContactCopyHomeStreetAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomeStreetAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomeStreetAddressType.subclass:
            return OPFContactCopyHomeStreetAddressType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomeStreetAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomeStreetAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomeStreetAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomeStreetAddressType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomeStreetAddressType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomeStreetAddressType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomeStreetAddressType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomeStreetAddressType


class OPFContactCopyHomeZipType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomeZipType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomeZipType.subclass:
            return OPFContactCopyHomeZipType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomeZipType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomeZipType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomeZipType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomeZipType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomeZipType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomeZipType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomeZipType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomeZipType


class OPFContactCopyIMAddressListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, contactEmailAddress=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.contactEmailAddress = contactEmailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyIMAddressListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyIMAddressListType.subclass:
            return OPFContactCopyIMAddressListType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyIMAddressListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contactEmailAddress(self): return self.contactEmailAddress
    def set_contactEmailAddress(self, contactEmailAddress): self.contactEmailAddress = contactEmailAddress
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.contactEmailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyIMAddressListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyIMAddressListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyIMAddressListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyIMAddressListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyIMAddressListType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyIMAddressListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contactEmailAddress is not None:
            self.contactEmailAddress.export(outfile, level, namespace_, name_='contactEmailAddress', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contactEmailAddress':
            obj_ = contactEmailAddressType5.factory()
            obj_.build(child_)
            self.contactEmailAddress = obj_
            obj_.original_tagname_ = 'contactEmailAddress'
# end class OPFContactCopyIMAddressListType


class contactEmailAddressType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFContactEmailAddressAddress=None, OPFContactEmailAddressIsDefault=None, OPFContactEmailAddressType=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFContactEmailAddressAddress = _cast(None, OPFContactEmailAddressAddress)
        self.OPFContactEmailAddressIsDefault = _cast(int, OPFContactEmailAddressIsDefault)
        self.OPFContactEmailAddressType = _cast(int, OPFContactEmailAddressType)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, contactEmailAddressType5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if contactEmailAddressType5.subclass:
            return contactEmailAddressType5.subclass(*args_, **kwargs_)
        else:
            return contactEmailAddressType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_OPFContactEmailAddressAddress(self): return self.OPFContactEmailAddressAddress
    def set_OPFContactEmailAddressAddress(self, OPFContactEmailAddressAddress): self.OPFContactEmailAddressAddress = OPFContactEmailAddressAddress
    def get_OPFContactEmailAddressIsDefault(self): return self.OPFContactEmailAddressIsDefault
    def set_OPFContactEmailAddressIsDefault(self, OPFContactEmailAddressIsDefault): self.OPFContactEmailAddressIsDefault = OPFContactEmailAddressIsDefault
    def get_OPFContactEmailAddressType(self): return self.OPFContactEmailAddressType
    def set_OPFContactEmailAddressType(self, OPFContactEmailAddressType): self.OPFContactEmailAddressType = OPFContactEmailAddressType
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='contactEmailAddressType5', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('contactEmailAddressType5')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contactEmailAddressType5')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='contactEmailAddressType5', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='contactEmailAddressType5'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.OPFContactEmailAddressAddress is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            outfile.write(' OPFContactEmailAddressAddress=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFContactEmailAddressAddress), input_name='OPFContactEmailAddressAddress')), ))
        if self.OPFContactEmailAddressIsDefault is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            outfile.write(' OPFContactEmailAddressIsDefault="%s"' % self.gds_format_integer(self.OPFContactEmailAddressIsDefault, input_name='OPFContactEmailAddressIsDefault'))
        if self.OPFContactEmailAddressType is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            outfile.write(' OPFContactEmailAddressType="%s"' % self.gds_format_integer(self.OPFContactEmailAddressType, input_name='OPFContactEmailAddressType'))
    def exportChildren(self, outfile, level, namespace_='', name_='contactEmailAddressType5', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('OPFContactEmailAddressAddress', node)
        if value is not None and 'OPFContactEmailAddressAddress' not in already_processed:
            already_processed.add('OPFContactEmailAddressAddress')
            self.OPFContactEmailAddressAddress = value
        value = find_attr_value_('OPFContactEmailAddressIsDefault', node)
        if value is not None and 'OPFContactEmailAddressIsDefault' not in already_processed:
            already_processed.add('OPFContactEmailAddressIsDefault')
            try:
                self.OPFContactEmailAddressIsDefault = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('OPFContactEmailAddressType', node)
        if value is not None and 'OPFContactEmailAddressType' not in already_processed:
            already_processed.add('OPFContactEmailAddressType')
            try:
                self.OPFContactEmailAddressType = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class contactEmailAddressType5


class OPFContactCopyChildrenType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, string=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.string = string
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyChildrenType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyChildrenType.subclass:
            return OPFContactCopyChildrenType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyChildrenType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_string(self): return self.string
    def set_string(self, string): self.string = string
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.string is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyChildrenType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyChildrenType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyChildrenType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyChildrenType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyChildrenType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyChildrenType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.string is not None:
            self.string.export(outfile, level, namespace_, name_='string', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'string':
            obj_ = stringType.factory()
            obj_.build(child_)
            self.string = obj_
            obj_.original_tagname_ = 'string'
# end class OPFContactCopyChildrenType


class stringType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, stringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if stringType.subclass:
            return stringType.subclass(*args_, **kwargs_)
        else:
            return stringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='stringType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('stringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='stringType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='stringType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='stringType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='stringType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class stringType


class OPFContactCopyCustom1DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustom1DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustom1DataType.subclass:
            return OPFContactCopyCustom1DataType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustom1DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustom1DataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustom1DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustom1DataType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustom1DataType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustom1DataType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustom1DataType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustom1DataType


class OPFContactCopyCustom2DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustom2DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustom2DataType.subclass:
            return OPFContactCopyCustom2DataType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustom2DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustom2DataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustom2DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustom2DataType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustom2DataType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustom2DataType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustom2DataType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustom2DataType


class OPFContactCopyCustom3DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustom3DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustom3DataType.subclass:
            return OPFContactCopyCustom3DataType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustom3DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustom3DataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustom3DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustom3DataType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustom3DataType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustom3DataType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustom3DataType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustom3DataType


class OPFContactCopyCustom4DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustom4DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustom4DataType.subclass:
            return OPFContactCopyCustom4DataType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustom4DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustom4DataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustom4DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustom4DataType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustom4DataType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustom4DataType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustom4DataType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustom4DataType


class OPFContactCopyCustom5DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustom5DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustom5DataType.subclass:
            return OPFContactCopyCustom5DataType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustom5DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustom5DataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustom5DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustom5DataType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustom5DataType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustom5DataType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustom5DataType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustom5DataType


class OPFContactCopyCustomDate1Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustomDate1Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustomDate1Type.subclass:
            return OPFContactCopyCustomDate1Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustomDate1Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustomDate1Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustomDate1Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustomDate1Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustomDate1Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustomDate1Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustomDate1Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustomDate1Type


class OPFContactCopyCustomDate2Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustomDate2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustomDate2Type.subclass:
            return OPFContactCopyCustomDate2Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustomDate2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustomDate2Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustomDate2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustomDate2Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustomDate2Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustomDate2Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustomDate2Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustomDate2Type


class OPFContactCopyCustomDate3Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustomDate3Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustomDate3Type.subclass:
            return OPFContactCopyCustomDate3Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustomDate3Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustomDate3Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustomDate3Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustomDate3Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustomDate3Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustomDate3Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustomDate3Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustomDate3Type


class OPFContactCopyCustomPhone1Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustomPhone1Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustomPhone1Type.subclass:
            return OPFContactCopyCustomPhone1Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustomPhone1Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustomPhone1Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustomPhone1Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustomPhone1Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustomPhone1Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustomPhone1Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustomPhone1Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustomPhone1Type


class OPFContactCopyCustomPhone2Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustomPhone2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustomPhone2Type.subclass:
            return OPFContactCopyCustomPhone2Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustomPhone2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustomPhone2Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustomPhone2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustomPhone2Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustomPhone2Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustomPhone2Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustomPhone2Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustomPhone2Type


class OPFContactCopyCustomPhone3Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustomPhone3Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustomPhone3Type.subclass:
            return OPFContactCopyCustomPhone3Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustomPhone3Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustomPhone3Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustomPhone3Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustomPhone3Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustomPhone3Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustomPhone3Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustomPhone3Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustomPhone3Type


class OPFContactCopyCustomPhone4Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyCustomPhone4Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyCustomPhone4Type.subclass:
            return OPFContactCopyCustomPhone4Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyCustomPhone4Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyCustomPhone4Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyCustomPhone4Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyCustomPhone4Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyCustomPhone4Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyCustomPhone4Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyCustomPhone4Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyCustomPhone4Type


class OPFContactCopyFuriganaChildrensNamesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, string=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.string = string
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyFuriganaChildrensNamesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyFuriganaChildrensNamesType.subclass:
            return OPFContactCopyFuriganaChildrensNamesType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyFuriganaChildrensNamesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_string(self): return self.string
    def set_string(self, string): self.string = string
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.string is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyFuriganaChildrensNamesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyFuriganaChildrensNamesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyFuriganaChildrensNamesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyFuriganaChildrensNamesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyFuriganaChildrensNamesType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyFuriganaChildrensNamesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.string is not None:
            self.string.export(outfile, level, namespace_, name_='string', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'string':
            obj_ = stringType6.factory()
            obj_.build(child_)
            self.string = obj_
            obj_.original_tagname_ = 'string'
# end class OPFContactCopyFuriganaChildrensNamesType


class stringType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, stringType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if stringType6.subclass:
            return stringType6.subclass(*args_, **kwargs_)
        else:
            return stringType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='stringType6', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('stringType6')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='stringType6')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='stringType6', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='stringType6'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='stringType6', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class stringType6


class OPFContactCopyHomeFaxType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomeFaxType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomeFaxType.subclass:
            return OPFContactCopyHomeFaxType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomeFaxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomeFaxType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomeFaxType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomeFaxType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomeFaxType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomeFaxType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomeFaxType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomeFaxType


class OPFContactCopyHomePhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomePhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomePhoneType.subclass:
            return OPFContactCopyHomePhoneType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomePhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomePhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomePhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomePhoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomePhoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomePhoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomePhoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomePhoneType


class OPFContactCopyHomePhone2Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomePhone2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomePhone2Type.subclass:
            return OPFContactCopyHomePhone2Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomePhone2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomePhone2Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomePhone2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomePhone2Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomePhone2Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomePhone2Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomePhone2Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomePhone2Type


class OPFContactCopyHomeWebPageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyHomeWebPageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyHomeWebPageType.subclass:
            return OPFContactCopyHomeWebPageType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyHomeWebPageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyHomeWebPageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyHomeWebPageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyHomeWebPageType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyHomeWebPageType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyHomeWebPageType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyHomeWebPageType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyHomeWebPageType


class OPFContactCopyInterestsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyInterestsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyInterestsType.subclass:
            return OPFContactCopyInterestsType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyInterestsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyInterestsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyInterestsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyInterestsType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyInterestsType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyInterestsType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyInterestsType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyInterestsType


class OPFContactCopyMiddleNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyMiddleNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyMiddleNameType.subclass:
            return OPFContactCopyMiddleNameType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyMiddleNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyMiddleNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyMiddleNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyMiddleNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyMiddleNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyMiddleNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyMiddleNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyMiddleNameType


class OPFContactCopyNickNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyNickNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyNickNameType.subclass:
            return OPFContactCopyNickNameType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyNickNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyNickNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyNickNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyNickNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyNickNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyNickNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyNickNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyNickNameType


class OPFContactCopyOtherCityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyOtherCityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyOtherCityType.subclass:
            return OPFContactCopyOtherCityType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyOtherCityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyOtherCityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyOtherCityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyOtherCityType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyOtherCityType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyOtherCityType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyOtherCityType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyOtherCityType


class OPFContactCopyOtherCountryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyOtherCountryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyOtherCountryType.subclass:
            return OPFContactCopyOtherCountryType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyOtherCountryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyOtherCountryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyOtherCountryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyOtherCountryType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyOtherCountryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyOtherCountryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyOtherCountryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyOtherCountryType


class OPFContactCopyOtherFaxType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyOtherFaxType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyOtherFaxType.subclass:
            return OPFContactCopyOtherFaxType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyOtherFaxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyOtherFaxType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyOtherFaxType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyOtherFaxType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyOtherFaxType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyOtherFaxType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyOtherFaxType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyOtherFaxType


class OPFContactCopyOtherPhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyOtherPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyOtherPhoneType.subclass:
            return OPFContactCopyOtherPhoneType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyOtherPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyOtherPhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyOtherPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyOtherPhoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyOtherPhoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyOtherPhoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyOtherPhoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyOtherPhoneType


class OPFContactCopyOtherStateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyOtherStateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyOtherStateType.subclass:
            return OPFContactCopyOtherStateType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyOtherStateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyOtherStateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyOtherStateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyOtherStateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyOtherStateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyOtherStateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyOtherStateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyOtherStateType


class OPFContactCopyOtherStreetAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyOtherStreetAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyOtherStreetAddressType.subclass:
            return OPFContactCopyOtherStreetAddressType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyOtherStreetAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyOtherStreetAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyOtherStreetAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyOtherStreetAddressType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyOtherStreetAddressType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyOtherStreetAddressType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyOtherStreetAddressType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyOtherStreetAddressType


class OPFContactCopyOtherZipType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyOtherZipType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyOtherZipType.subclass:
            return OPFContactCopyOtherZipType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyOtherZipType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyOtherZipType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyOtherZipType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyOtherZipType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyOtherZipType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyOtherZipType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyOtherZipType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyOtherZipType


class OPFContactCopyPagerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyPagerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyPagerType.subclass:
            return OPFContactCopyPagerType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyPagerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyPagerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyPagerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyPagerType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyPagerType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyPagerType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyPagerType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyPagerType


class OPFContactCopyRadioPhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyRadioPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyRadioPhoneType.subclass:
            return OPFContactCopyRadioPhoneType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyRadioPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyRadioPhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyRadioPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyRadioPhoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyRadioPhoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyRadioPhoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyRadioPhoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyRadioPhoneType


class OPFContactCopySetNameSuffixType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopySetNameSuffixType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopySetNameSuffixType.subclass:
            return OPFContactCopySetNameSuffixType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopySetNameSuffixType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopySetNameSuffixType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopySetNameSuffixType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopySetNameSuffixType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopySetNameSuffixType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopySetNameSuffixType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopySetNameSuffixType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopySetNameSuffixType


class OPFContactCopySpousesNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopySpousesNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopySpousesNameType.subclass:
            return OPFContactCopySpousesNameType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopySpousesNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopySpousesNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopySpousesNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopySpousesNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopySpousesNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopySpousesNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopySpousesNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopySpousesNameType


class OPFContactCopyTitleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCopyTitleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCopyTitleType.subclass:
            return OPFContactCopyTitleType.subclass(*args_, **kwargs_)
        else:
            return OPFContactCopyTitleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCopyTitleType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCopyTitleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCopyTitleType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCopyTitleType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCopyTitleType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCopyTitleType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCopyTitleType


class OPFContactCustomData5Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCustomData5Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCustomData5Type.subclass:
            return OPFContactCustomData5Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCustomData5Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCustomData5Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCustomData5Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCustomData5Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCustomData5Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCustomData5Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCustomData5Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCustomData5Type


class OPFContactCustomData6Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCustomData6Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCustomData6Type.subclass:
            return OPFContactCustomData6Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCustomData6Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCustomData6Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCustomData6Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCustomData6Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCustomData6Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCustomData6Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCustomData6Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCustomData6Type


class OPFContactCustomData7Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCustomData7Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCustomData7Type.subclass:
            return OPFContactCustomData7Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCustomData7Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCustomData7Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCustomData7Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCustomData7Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCustomData7Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCustomData7Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCustomData7Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCustomData7Type


class OPFContactCustomData8Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactCustomData8Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactCustomData8Type.subclass:
            return OPFContactCustomData8Type.subclass(*args_, **kwargs_)
        else:
            return OPFContactCustomData8Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactCustomData8Type', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactCustomData8Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactCustomData8Type')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactCustomData8Type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactCustomData8Type'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactCustomData8Type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactCustomData8Type


class OPFContactMainPhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFContactMainPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFContactMainPhoneType.subclass:
            return OPFContactMainPhoneType.subclass(*args_, **kwargs_)
        else:
            return OPFContactMainPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFContactMainPhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFContactMainPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFContactMainPhoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFContactMainPhoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFContactMainPhoneType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFContactMainPhoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFContactMainPhoneType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'contacts'
        rootClass = contacts
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'contacts'
        rootClass = contacts
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'contacts'
        rootClass = contacts
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'contacts'
        rootClass = contacts
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from contacts import *\n\n')
        sys.stdout.write('import contacts as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "OPFCategoryCopyBackgroundColorType",
    "OPFCategoryCopyNameType",
    "OPFContactCanDeleteType",
    "OPFContactCanEditType",
    "OPFContactCopyAgeType",
    "OPFContactCopyAnniversaryType",
    "OPFContactCopyAssistantPhoneType",
    "OPFContactCopyAstrologySignType",
    "OPFContactCopyBirthdayType",
    "OPFContactCopyBloodTypeType",
    "OPFContactCopyBusinessCityType",
    "OPFContactCopyBusinessCompanyType",
    "OPFContactCopyBusinessCountryType",
    "OPFContactCopyBusinessDepartmentType",
    "OPFContactCopyBusinessFaxType",
    "OPFContactCopyBusinessHomePageType",
    "OPFContactCopyBusinessOfficeType",
    "OPFContactCopyBusinessPhone2Type",
    "OPFContactCopyBusinessPhoneType",
    "OPFContactCopyBusinessStateType",
    "OPFContactCopyBusinessStreetAddressType",
    "OPFContactCopyBusinessTitleType",
    "OPFContactCopyBusinessZipType",
    "OPFContactCopyCategoryListType",
    "OPFContactCopyCellPhoneType",
    "OPFContactCopyChildrenType",
    "OPFContactCopyContactImageType",
    "OPFContactCopyCustom1DataType",
    "OPFContactCopyCustom2DataType",
    "OPFContactCopyCustom3DataType",
    "OPFContactCopyCustom4DataType",
    "OPFContactCopyCustom5DataType",
    "OPFContactCopyCustomDate1Type",
    "OPFContactCopyCustomDate2Type",
    "OPFContactCopyCustomDate3Type",
    "OPFContactCopyCustomPhone1Type",
    "OPFContactCopyCustomPhone2Type",
    "OPFContactCopyCustomPhone3Type",
    "OPFContactCopyCustomPhone4Type",
    "OPFContactCopyDefaultEmailAddressType",
    "OPFContactCopyDefaultIMAddressType",
    "OPFContactCopyDisplayNameType",
    "OPFContactCopyDueDateTimeType",
    "OPFContactCopyEmailAddressList1Type",
    "OPFContactCopyEmailAddressList2Type",
    "OPFContactCopyEmailAddressListType",
    "OPFContactCopyFirstNameType",
    "OPFContactCopyFuriganaChildrensNamesType",
    "OPFContactCopyHomeCityType",
    "OPFContactCopyHomeCountryType",
    "OPFContactCopyHomeFaxType",
    "OPFContactCopyHomePhone2Type",
    "OPFContactCopyHomePhoneType",
    "OPFContactCopyHomeStateType",
    "OPFContactCopyHomeStreetAddressType",
    "OPFContactCopyHomeWebPageType",
    "OPFContactCopyHomeZipType",
    "OPFContactCopyIMAddressListType",
    "OPFContactCopyInterestsType",
    "OPFContactCopyLastNameType",
    "OPFContactCopyMiddleNameType",
    "OPFContactCopyModDateType",
    "OPFContactCopyNickNameType",
    "OPFContactCopyNotesPlainType",
    "OPFContactCopyNotesType",
    "OPFContactCopyOtherCityType",
    "OPFContactCopyOtherCountryType",
    "OPFContactCopyOtherFaxType",
    "OPFContactCopyOtherPhoneType",
    "OPFContactCopyOtherStateType",
    "OPFContactCopyOtherStreetAddressType",
    "OPFContactCopyOtherZipType",
    "OPFContactCopyPagerType",
    "OPFContactCopyPrimaryCategoryType",
    "OPFContactCopyRadioPhoneType",
    "OPFContactCopySetNameSuffixType",
    "OPFContactCopySpousesNameType",
    "OPFContactCopyStartDateTimeType",
    "OPFContactCopyTitleType",
    "OPFContactCustomData5Type",
    "OPFContactCustomData6Type",
    "OPFContactCustomData7Type",
    "OPFContactCustomData8Type",
    "OPFContactGetFlagStatusType",
    "OPFContactIsJapaneseContactType",
    "OPFContactMainPhoneType",
    "OPFContactTypeType",
    "categoryType",
    "contactEmailAddressType",
    "contactEmailAddressType1",
    "contactEmailAddressType2",
    "contactEmailAddressType3",
    "contactEmailAddressType4",
    "contactEmailAddressType5",
    "contactType",
    "contacts",
    "stringType",
    "stringType6"
]
