#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Aug  2 14:56:59 2018 by generateDS.py version 2.29.19.
# Python 3.5.4 |Anaconda custom (64-bit)| (default, Oct  5 2017, 02:58:14)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
#
# Command line options:
#   ('-o', 'tasks.py')
#
# Command line arguments:
#   ../../schema/tasks.xsd
#
# Command line:
#   /Users/brian/anaconda/bin/generateDS -o "tasks.py" ../../schema/tasks.xsd
#
# Current working directory (os.getcwd()):
#   parser
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class tasks(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, elementCount=None, task=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.elementCount = _cast(int, elementCount)
        if task is None:
            self.task = []
        else:
            self.task = task
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tasks)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tasks.subclass:
            return tasks.subclass(*args_, **kwargs_)
        else:
            return tasks(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_task(self): return self.task
    def set_task(self, task): self.task = task
    def add_task(self, value): self.task.append(value)
    def insert_task_at(self, index, value): self.task.insert(index, value)
    def replace_task_at(self, index, value): self.task[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_elementCount(self): return self.elementCount
    def set_elementCount(self, elementCount): self.elementCount = elementCount
    def hasContent_(self):
        if (
            self.task
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tasks', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tasks')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tasks')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tasks', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tasks'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
        if self.elementCount is not None and 'elementCount' not in already_processed:
            already_processed.add('elementCount')
            outfile.write(' elementCount="%s"' % self.gds_format_integer(self.elementCount, input_name='elementCount'))
    def exportChildren(self, outfile, level, namespace_='', name_='tasks', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for task_ in self.task:
            task_.export(outfile, level, namespace_, name_='task', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
        value = find_attr_value_('elementCount', node)
        if value is not None and 'elementCount' not in already_processed:
            already_processed.add('elementCount')
            try:
                self.elementCount = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'task':
            obj_ = taskType.factory()
            obj_.build(child_)
            self.task.append(obj_)
            obj_.original_tagname_ = 'task'
# end class tasks


class taskType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFTaskCopyCategoryList=None, OPFTaskCopyPrimaryCategory=None, OPFTaskCopyReminderTime=None, OPFTaskCopyCompletedDateTime=None, OPFTaskCopyModDate=None, OPFTaskCopyName=None, OPFTaskCopyNote=None, OPFTaskCopyNotePlain=None, OPFTaskGetPriority=None, OPFTaskCopyDueDateTime=None, OPFTaskCopyStartDateTime=None, OPFTaskCopyRecurrence=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFTaskCopyCategoryList = OPFTaskCopyCategoryList
        self.OPFTaskCopyPrimaryCategory = OPFTaskCopyPrimaryCategory
        self.OPFTaskCopyReminderTime = OPFTaskCopyReminderTime
        self.OPFTaskCopyCompletedDateTime = OPFTaskCopyCompletedDateTime
        self.OPFTaskCopyModDate = OPFTaskCopyModDate
        self.OPFTaskCopyName = OPFTaskCopyName
        self.OPFTaskCopyNote = OPFTaskCopyNote
        self.OPFTaskCopyNotePlain = OPFTaskCopyNotePlain
        self.OPFTaskGetPriority = OPFTaskGetPriority
        self.OPFTaskCopyDueDateTime = OPFTaskCopyDueDateTime
        self.OPFTaskCopyStartDateTime = OPFTaskCopyStartDateTime
        self.OPFTaskCopyRecurrence = OPFTaskCopyRecurrence
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, taskType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if taskType.subclass:
            return taskType.subclass(*args_, **kwargs_)
        else:
            return taskType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFTaskCopyCategoryList(self): return self.OPFTaskCopyCategoryList
    def set_OPFTaskCopyCategoryList(self, OPFTaskCopyCategoryList): self.OPFTaskCopyCategoryList = OPFTaskCopyCategoryList
    def get_OPFTaskCopyPrimaryCategory(self): return self.OPFTaskCopyPrimaryCategory
    def set_OPFTaskCopyPrimaryCategory(self, OPFTaskCopyPrimaryCategory): self.OPFTaskCopyPrimaryCategory = OPFTaskCopyPrimaryCategory
    def get_OPFTaskCopyReminderTime(self): return self.OPFTaskCopyReminderTime
    def set_OPFTaskCopyReminderTime(self, OPFTaskCopyReminderTime): self.OPFTaskCopyReminderTime = OPFTaskCopyReminderTime
    def get_OPFTaskCopyCompletedDateTime(self): return self.OPFTaskCopyCompletedDateTime
    def set_OPFTaskCopyCompletedDateTime(self, OPFTaskCopyCompletedDateTime): self.OPFTaskCopyCompletedDateTime = OPFTaskCopyCompletedDateTime
    def get_OPFTaskCopyModDate(self): return self.OPFTaskCopyModDate
    def set_OPFTaskCopyModDate(self, OPFTaskCopyModDate): self.OPFTaskCopyModDate = OPFTaskCopyModDate
    def get_OPFTaskCopyName(self): return self.OPFTaskCopyName
    def set_OPFTaskCopyName(self, OPFTaskCopyName): self.OPFTaskCopyName = OPFTaskCopyName
    def get_OPFTaskCopyNote(self): return self.OPFTaskCopyNote
    def set_OPFTaskCopyNote(self, OPFTaskCopyNote): self.OPFTaskCopyNote = OPFTaskCopyNote
    def get_OPFTaskCopyNotePlain(self): return self.OPFTaskCopyNotePlain
    def set_OPFTaskCopyNotePlain(self, OPFTaskCopyNotePlain): self.OPFTaskCopyNotePlain = OPFTaskCopyNotePlain
    def get_OPFTaskGetPriority(self): return self.OPFTaskGetPriority
    def set_OPFTaskGetPriority(self, OPFTaskGetPriority): self.OPFTaskGetPriority = OPFTaskGetPriority
    def get_OPFTaskCopyDueDateTime(self): return self.OPFTaskCopyDueDateTime
    def set_OPFTaskCopyDueDateTime(self, OPFTaskCopyDueDateTime): self.OPFTaskCopyDueDateTime = OPFTaskCopyDueDateTime
    def get_OPFTaskCopyStartDateTime(self): return self.OPFTaskCopyStartDateTime
    def set_OPFTaskCopyStartDateTime(self, OPFTaskCopyStartDateTime): self.OPFTaskCopyStartDateTime = OPFTaskCopyStartDateTime
    def get_OPFTaskCopyRecurrence(self): return self.OPFTaskCopyRecurrence
    def set_OPFTaskCopyRecurrence(self, OPFTaskCopyRecurrence): self.OPFTaskCopyRecurrence = OPFTaskCopyRecurrence
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFTaskCopyCategoryList is not None or
            self.OPFTaskCopyPrimaryCategory is not None or
            self.OPFTaskCopyReminderTime is not None or
            self.OPFTaskCopyCompletedDateTime is not None or
            self.OPFTaskCopyModDate is not None or
            self.OPFTaskCopyName is not None or
            self.OPFTaskCopyNote is not None or
            self.OPFTaskCopyNotePlain is not None or
            self.OPFTaskGetPriority is not None or
            self.OPFTaskCopyDueDateTime is not None or
            self.OPFTaskCopyStartDateTime is not None or
            self.OPFTaskCopyRecurrence is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='taskType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('taskType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='taskType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='taskType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='taskType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='taskType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFTaskCopyCategoryList is not None:
            self.OPFTaskCopyCategoryList.export(outfile, level, namespace_, name_='OPFTaskCopyCategoryList', pretty_print=pretty_print)
        if self.OPFTaskCopyPrimaryCategory is not None:
            self.OPFTaskCopyPrimaryCategory.export(outfile, level, namespace_, name_='OPFTaskCopyPrimaryCategory', pretty_print=pretty_print)
        if self.OPFTaskCopyReminderTime is not None:
            self.OPFTaskCopyReminderTime.export(outfile, level, namespace_, name_='OPFTaskCopyReminderTime', pretty_print=pretty_print)
        if self.OPFTaskCopyCompletedDateTime is not None:
            self.OPFTaskCopyCompletedDateTime.export(outfile, level, namespace_, name_='OPFTaskCopyCompletedDateTime', pretty_print=pretty_print)
        if self.OPFTaskCopyModDate is not None:
            self.OPFTaskCopyModDate.export(outfile, level, namespace_, name_='OPFTaskCopyModDate', pretty_print=pretty_print)
        if self.OPFTaskCopyName is not None:
            self.OPFTaskCopyName.export(outfile, level, namespace_, name_='OPFTaskCopyName', pretty_print=pretty_print)
        if self.OPFTaskCopyNote is not None:
            self.OPFTaskCopyNote.export(outfile, level, namespace_, name_='OPFTaskCopyNote', pretty_print=pretty_print)
        if self.OPFTaskCopyNotePlain is not None:
            self.OPFTaskCopyNotePlain.export(outfile, level, namespace_, name_='OPFTaskCopyNotePlain', pretty_print=pretty_print)
        if self.OPFTaskGetPriority is not None:
            self.OPFTaskGetPriority.export(outfile, level, namespace_, name_='OPFTaskGetPriority', pretty_print=pretty_print)
        if self.OPFTaskCopyDueDateTime is not None:
            self.OPFTaskCopyDueDateTime.export(outfile, level, namespace_, name_='OPFTaskCopyDueDateTime', pretty_print=pretty_print)
        if self.OPFTaskCopyStartDateTime is not None:
            self.OPFTaskCopyStartDateTime.export(outfile, level, namespace_, name_='OPFTaskCopyStartDateTime', pretty_print=pretty_print)
        if self.OPFTaskCopyRecurrence is not None:
            self.OPFTaskCopyRecurrence.export(outfile, level, namespace_, name_='OPFTaskCopyRecurrence', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFTaskCopyCategoryList':
            obj_ = OPFTaskCopyCategoryListType.factory()
            obj_.build(child_)
            self.OPFTaskCopyCategoryList = obj_
            obj_.original_tagname_ = 'OPFTaskCopyCategoryList'
        elif nodeName_ == 'OPFTaskCopyPrimaryCategory':
            obj_ = OPFTaskCopyPrimaryCategoryType.factory()
            obj_.build(child_)
            self.OPFTaskCopyPrimaryCategory = obj_
            obj_.original_tagname_ = 'OPFTaskCopyPrimaryCategory'
        elif nodeName_ == 'OPFTaskCopyReminderTime':
            obj_ = OPFTaskCopyReminderTimeType.factory()
            obj_.build(child_)
            self.OPFTaskCopyReminderTime = obj_
            obj_.original_tagname_ = 'OPFTaskCopyReminderTime'
        elif nodeName_ == 'OPFTaskCopyCompletedDateTime':
            obj_ = OPFTaskCopyCompletedDateTimeType.factory()
            obj_.build(child_)
            self.OPFTaskCopyCompletedDateTime = obj_
            obj_.original_tagname_ = 'OPFTaskCopyCompletedDateTime'
        elif nodeName_ == 'OPFTaskCopyModDate':
            obj_ = OPFTaskCopyModDateType.factory()
            obj_.build(child_)
            self.OPFTaskCopyModDate = obj_
            obj_.original_tagname_ = 'OPFTaskCopyModDate'
        elif nodeName_ == 'OPFTaskCopyName':
            obj_ = OPFTaskCopyNameType.factory()
            obj_.build(child_)
            self.OPFTaskCopyName = obj_
            obj_.original_tagname_ = 'OPFTaskCopyName'
        elif nodeName_ == 'OPFTaskCopyNote':
            obj_ = OPFTaskCopyNoteType.factory()
            obj_.build(child_)
            self.OPFTaskCopyNote = obj_
            obj_.original_tagname_ = 'OPFTaskCopyNote'
        elif nodeName_ == 'OPFTaskCopyNotePlain':
            obj_ = OPFTaskCopyNotePlainType.factory()
            obj_.build(child_)
            self.OPFTaskCopyNotePlain = obj_
            obj_.original_tagname_ = 'OPFTaskCopyNotePlain'
        elif nodeName_ == 'OPFTaskGetPriority':
            obj_ = OPFTaskGetPriorityType.factory()
            obj_.build(child_)
            self.OPFTaskGetPriority = obj_
            obj_.original_tagname_ = 'OPFTaskGetPriority'
        elif nodeName_ == 'OPFTaskCopyDueDateTime':
            obj_ = OPFTaskCopyDueDateTimeType.factory()
            obj_.build(child_)
            self.OPFTaskCopyDueDateTime = obj_
            obj_.original_tagname_ = 'OPFTaskCopyDueDateTime'
        elif nodeName_ == 'OPFTaskCopyStartDateTime':
            obj_ = OPFTaskCopyStartDateTimeType.factory()
            obj_.build(child_)
            self.OPFTaskCopyStartDateTime = obj_
            obj_.original_tagname_ = 'OPFTaskCopyStartDateTime'
        elif nodeName_ == 'OPFTaskCopyRecurrence':
            obj_ = OPFTaskCopyRecurrenceType.factory()
            obj_.build(child_)
            self.OPFTaskCopyRecurrence = obj_
            obj_.original_tagname_ = 'OPFTaskCopyRecurrence'
# end class taskType


class OPFTaskCopyCategoryListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, category=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        if category is None:
            self.category = []
        else:
            self.category = category
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyCategoryListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyCategoryListType.subclass:
            return OPFTaskCopyCategoryListType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyCategoryListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def add_category(self, value): self.category.append(value)
    def insert_category_at(self, index, value): self.category.insert(index, value)
    def replace_category_at(self, index, value): self.category[index] = value
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.category
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyCategoryListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyCategoryListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyCategoryListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyCategoryListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyCategoryListType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyCategoryListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for category_ in self.category:
            category_.export(outfile, level, namespace_, name_='category', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'category':
            obj_ = categoryType.factory()
            obj_.build(child_)
            self.category.append(obj_)
            obj_.original_tagname_ = 'category'
# end class OPFTaskCopyCategoryListType


class categoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OPFCategoryCopyBackgroundColor=None, OPFCategoryCopyName=None, space=None):
        self.original_tagname_ = None
        self.OPFCategoryCopyBackgroundColor = _cast(None, OPFCategoryCopyBackgroundColor)
        self.OPFCategoryCopyName = _cast(None, OPFCategoryCopyName)
        self.space = _cast(None, space)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, categoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if categoryType.subclass:
            return categoryType.subclass(*args_, **kwargs_)
        else:
            return categoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCategoryCopyBackgroundColor(self): return self.OPFCategoryCopyBackgroundColor
    def set_OPFCategoryCopyBackgroundColor(self, OPFCategoryCopyBackgroundColor): self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
    def get_OPFCategoryCopyName(self): return self.OPFCategoryCopyName
    def set_OPFCategoryCopyName(self, OPFCategoryCopyName): self.OPFCategoryCopyName = OPFCategoryCopyName
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='categoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('categoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='categoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='categoryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='categoryType'):
        if self.OPFCategoryCopyBackgroundColor is not None and 'OPFCategoryCopyBackgroundColor' not in already_processed:
            already_processed.add('OPFCategoryCopyBackgroundColor')
            outfile.write(' OPFCategoryCopyBackgroundColor=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFCategoryCopyBackgroundColor), input_name='OPFCategoryCopyBackgroundColor')), ))
        if self.OPFCategoryCopyName is not None and 'OPFCategoryCopyName' not in already_processed:
            already_processed.add('OPFCategoryCopyName')
            outfile.write(' OPFCategoryCopyName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.OPFCategoryCopyName), input_name='OPFCategoryCopyName')), ))
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='categoryType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('OPFCategoryCopyBackgroundColor', node)
        if value is not None and 'OPFCategoryCopyBackgroundColor' not in already_processed:
            already_processed.add('OPFCategoryCopyBackgroundColor')
            self.OPFCategoryCopyBackgroundColor = value
        value = find_attr_value_('OPFCategoryCopyName', node)
        if value is not None and 'OPFCategoryCopyName' not in already_processed:
            already_processed.add('OPFCategoryCopyName')
            self.OPFCategoryCopyName = value
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class categoryType


class OPFTaskCopyPrimaryCategoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFCategoryCopyBackgroundColor=None, OPFCategoryCopyName=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
        self.OPFCategoryCopyName = OPFCategoryCopyName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyPrimaryCategoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyPrimaryCategoryType.subclass:
            return OPFTaskCopyPrimaryCategoryType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyPrimaryCategoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFCategoryCopyBackgroundColor(self): return self.OPFCategoryCopyBackgroundColor
    def set_OPFCategoryCopyBackgroundColor(self, OPFCategoryCopyBackgroundColor): self.OPFCategoryCopyBackgroundColor = OPFCategoryCopyBackgroundColor
    def get_OPFCategoryCopyName(self): return self.OPFCategoryCopyName
    def set_OPFCategoryCopyName(self, OPFCategoryCopyName): self.OPFCategoryCopyName = OPFCategoryCopyName
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFCategoryCopyBackgroundColor is not None or
            self.OPFCategoryCopyName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyPrimaryCategoryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyPrimaryCategoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyPrimaryCategoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyPrimaryCategoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyPrimaryCategoryType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyPrimaryCategoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFCategoryCopyBackgroundColor is not None:
            self.OPFCategoryCopyBackgroundColor.export(outfile, level, namespace_, name_='OPFCategoryCopyBackgroundColor', pretty_print=pretty_print)
        if self.OPFCategoryCopyName is not None:
            self.OPFCategoryCopyName.export(outfile, level, namespace_, name_='OPFCategoryCopyName', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFCategoryCopyBackgroundColor':
            obj_ = OPFCategoryCopyBackgroundColorType.factory()
            obj_.build(child_)
            self.OPFCategoryCopyBackgroundColor = obj_
            obj_.original_tagname_ = 'OPFCategoryCopyBackgroundColor'
        elif nodeName_ == 'OPFCategoryCopyName':
            obj_ = OPFCategoryCopyNameType.factory()
            obj_.build(child_)
            self.OPFCategoryCopyName = obj_
            obj_.original_tagname_ = 'OPFCategoryCopyName'
# end class OPFTaskCopyPrimaryCategoryType


class OPFCategoryCopyBackgroundColorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCategoryCopyBackgroundColorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCategoryCopyBackgroundColorType.subclass:
            return OPFCategoryCopyBackgroundColorType.subclass(*args_, **kwargs_)
        else:
            return OPFCategoryCopyBackgroundColorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCategoryCopyBackgroundColorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCategoryCopyBackgroundColorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCategoryCopyBackgroundColorType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCategoryCopyBackgroundColorType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCategoryCopyBackgroundColorType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCategoryCopyBackgroundColorType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCategoryCopyBackgroundColorType


class OPFCategoryCopyNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFCategoryCopyNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFCategoryCopyNameType.subclass:
            return OPFCategoryCopyNameType.subclass(*args_, **kwargs_)
        else:
            return OPFCategoryCopyNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFCategoryCopyNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFCategoryCopyNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFCategoryCopyNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFCategoryCopyNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFCategoryCopyNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFCategoryCopyNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFCategoryCopyNameType


class OPFTaskCopyReminderTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyReminderTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyReminderTimeType.subclass:
            return OPFTaskCopyReminderTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyReminderTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyReminderTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyReminderTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyReminderTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyReminderTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyReminderTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyReminderTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskCopyReminderTimeType


class OPFTaskCopyCompletedDateTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyCompletedDateTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyCompletedDateTimeType.subclass:
            return OPFTaskCopyCompletedDateTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyCompletedDateTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyCompletedDateTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyCompletedDateTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyCompletedDateTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyCompletedDateTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyCompletedDateTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyCompletedDateTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskCopyCompletedDateTimeType


class OPFTaskCopyModDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyModDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyModDateType.subclass:
            return OPFTaskCopyModDateType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyModDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyModDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyModDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyModDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyModDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyModDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyModDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskCopyModDateType


class OPFTaskCopyNameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyNameType.subclass:
            return OPFTaskCopyNameType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyNameType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyNameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyNameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyNameType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyNameType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskCopyNameType


class OPFTaskCopyNoteType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyNoteType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyNoteType.subclass:
            return OPFTaskCopyNoteType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyNoteType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyNoteType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyNoteType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyNoteType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyNoteType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyNoteType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyNoteType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskCopyNoteType


class OPFTaskCopyNotePlainType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyNotePlainType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyNotePlainType.subclass:
            return OPFTaskCopyNotePlainType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyNotePlainType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyNotePlainType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyNotePlainType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyNotePlainType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyNotePlainType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyNotePlainType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyNotePlainType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskCopyNotePlainType


class OPFTaskGetPriorityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskGetPriorityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskGetPriorityType.subclass:
            return OPFTaskGetPriorityType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskGetPriorityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskGetPriorityType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskGetPriorityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskGetPriorityType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskGetPriorityType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskGetPriorityType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskGetPriorityType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskGetPriorityType


class OPFTaskCopyDueDateTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyDueDateTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyDueDateTimeType.subclass:
            return OPFTaskCopyDueDateTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyDueDateTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyDueDateTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyDueDateTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyDueDateTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyDueDateTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyDueDateTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyDueDateTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskCopyDueDateTimeType


class OPFTaskCopyStartDateTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyStartDateTimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyStartDateTimeType.subclass:
            return OPFTaskCopyStartDateTimeType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyStartDateTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyStartDateTimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyStartDateTimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyStartDateTimeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyStartDateTimeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyStartDateTimeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyStartDateTimeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFTaskCopyStartDateTimeType


class OPFTaskCopyRecurrenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFRecurrenceCopyEndDate=None, OPFRecurrenceCopyStartDate=None, OPFRecurrenceGetOccurenceCount=None, OPFRecurrenceHasEndDate=None, OPFRecurrenceIsNoEnd=None, OPFRecurrenceIsNumbered=None, OPFRecurrencePattern=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFRecurrenceCopyEndDate = OPFRecurrenceCopyEndDate
        self.OPFRecurrenceCopyStartDate = OPFRecurrenceCopyStartDate
        self.OPFRecurrenceGetOccurenceCount = OPFRecurrenceGetOccurenceCount
        self.OPFRecurrenceHasEndDate = OPFRecurrenceHasEndDate
        self.OPFRecurrenceIsNoEnd = OPFRecurrenceIsNoEnd
        self.OPFRecurrenceIsNumbered = OPFRecurrenceIsNumbered
        self.OPFRecurrencePattern = OPFRecurrencePattern
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFTaskCopyRecurrenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFTaskCopyRecurrenceType.subclass:
            return OPFTaskCopyRecurrenceType.subclass(*args_, **kwargs_)
        else:
            return OPFTaskCopyRecurrenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFRecurrenceCopyEndDate(self): return self.OPFRecurrenceCopyEndDate
    def set_OPFRecurrenceCopyEndDate(self, OPFRecurrenceCopyEndDate): self.OPFRecurrenceCopyEndDate = OPFRecurrenceCopyEndDate
    def get_OPFRecurrenceCopyStartDate(self): return self.OPFRecurrenceCopyStartDate
    def set_OPFRecurrenceCopyStartDate(self, OPFRecurrenceCopyStartDate): self.OPFRecurrenceCopyStartDate = OPFRecurrenceCopyStartDate
    def get_OPFRecurrenceGetOccurenceCount(self): return self.OPFRecurrenceGetOccurenceCount
    def set_OPFRecurrenceGetOccurenceCount(self, OPFRecurrenceGetOccurenceCount): self.OPFRecurrenceGetOccurenceCount = OPFRecurrenceGetOccurenceCount
    def get_OPFRecurrenceHasEndDate(self): return self.OPFRecurrenceHasEndDate
    def set_OPFRecurrenceHasEndDate(self, OPFRecurrenceHasEndDate): self.OPFRecurrenceHasEndDate = OPFRecurrenceHasEndDate
    def get_OPFRecurrenceIsNoEnd(self): return self.OPFRecurrenceIsNoEnd
    def set_OPFRecurrenceIsNoEnd(self, OPFRecurrenceIsNoEnd): self.OPFRecurrenceIsNoEnd = OPFRecurrenceIsNoEnd
    def get_OPFRecurrenceIsNumbered(self): return self.OPFRecurrenceIsNumbered
    def set_OPFRecurrenceIsNumbered(self, OPFRecurrenceIsNumbered): self.OPFRecurrenceIsNumbered = OPFRecurrenceIsNumbered
    def get_OPFRecurrencePattern(self): return self.OPFRecurrencePattern
    def set_OPFRecurrencePattern(self, OPFRecurrencePattern): self.OPFRecurrencePattern = OPFRecurrencePattern
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFRecurrenceCopyEndDate is not None or
            self.OPFRecurrenceCopyStartDate is not None or
            self.OPFRecurrenceGetOccurenceCount is not None or
            self.OPFRecurrenceHasEndDate is not None or
            self.OPFRecurrenceIsNoEnd is not None or
            self.OPFRecurrenceIsNumbered is not None or
            self.OPFRecurrencePattern is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFTaskCopyRecurrenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFTaskCopyRecurrenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFTaskCopyRecurrenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFTaskCopyRecurrenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFTaskCopyRecurrenceType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFTaskCopyRecurrenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFRecurrenceCopyEndDate is not None:
            self.OPFRecurrenceCopyEndDate.export(outfile, level, namespace_, name_='OPFRecurrenceCopyEndDate', pretty_print=pretty_print)
        if self.OPFRecurrenceCopyStartDate is not None:
            self.OPFRecurrenceCopyStartDate.export(outfile, level, namespace_, name_='OPFRecurrenceCopyStartDate', pretty_print=pretty_print)
        if self.OPFRecurrenceGetOccurenceCount is not None:
            self.OPFRecurrenceGetOccurenceCount.export(outfile, level, namespace_, name_='OPFRecurrenceGetOccurenceCount', pretty_print=pretty_print)
        if self.OPFRecurrenceHasEndDate is not None:
            self.OPFRecurrenceHasEndDate.export(outfile, level, namespace_, name_='OPFRecurrenceHasEndDate', pretty_print=pretty_print)
        if self.OPFRecurrenceIsNoEnd is not None:
            self.OPFRecurrenceIsNoEnd.export(outfile, level, namespace_, name_='OPFRecurrenceIsNoEnd', pretty_print=pretty_print)
        if self.OPFRecurrenceIsNumbered is not None:
            self.OPFRecurrenceIsNumbered.export(outfile, level, namespace_, name_='OPFRecurrenceIsNumbered', pretty_print=pretty_print)
        if self.OPFRecurrencePattern is not None:
            self.OPFRecurrencePattern.export(outfile, level, namespace_, name_='OPFRecurrencePattern', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFRecurrenceCopyEndDate':
            obj_ = OPFRecurrenceCopyEndDateType.factory()
            obj_.build(child_)
            self.OPFRecurrenceCopyEndDate = obj_
            obj_.original_tagname_ = 'OPFRecurrenceCopyEndDate'
        elif nodeName_ == 'OPFRecurrenceCopyStartDate':
            obj_ = OPFRecurrenceCopyStartDateType.factory()
            obj_.build(child_)
            self.OPFRecurrenceCopyStartDate = obj_
            obj_.original_tagname_ = 'OPFRecurrenceCopyStartDate'
        elif nodeName_ == 'OPFRecurrenceGetOccurenceCount':
            obj_ = OPFRecurrenceGetOccurenceCountType.factory()
            obj_.build(child_)
            self.OPFRecurrenceGetOccurenceCount = obj_
            obj_.original_tagname_ = 'OPFRecurrenceGetOccurenceCount'
        elif nodeName_ == 'OPFRecurrenceHasEndDate':
            obj_ = OPFRecurrenceHasEndDateType.factory()
            obj_.build(child_)
            self.OPFRecurrenceHasEndDate = obj_
            obj_.original_tagname_ = 'OPFRecurrenceHasEndDate'
        elif nodeName_ == 'OPFRecurrenceIsNoEnd':
            obj_ = OPFRecurrenceIsNoEndType.factory()
            obj_.build(child_)
            self.OPFRecurrenceIsNoEnd = obj_
            obj_.original_tagname_ = 'OPFRecurrenceIsNoEnd'
        elif nodeName_ == 'OPFRecurrenceIsNumbered':
            obj_ = OPFRecurrenceIsNumberedType.factory()
            obj_.build(child_)
            self.OPFRecurrenceIsNumbered = obj_
            obj_.original_tagname_ = 'OPFRecurrenceIsNumbered'
        elif nodeName_ == 'OPFRecurrencePattern':
            obj_ = OPFRecurrencePatternType1.factory()
            obj_.build(child_)
            self.OPFRecurrencePattern = obj_
            obj_.original_tagname_ = 'OPFRecurrencePattern'
# end class OPFTaskCopyRecurrenceType


class OPFRecurrenceCopyEndDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceCopyEndDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceCopyEndDateType.subclass:
            return OPFRecurrenceCopyEndDateType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceCopyEndDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceCopyEndDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceCopyEndDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceCopyEndDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceCopyEndDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceCopyEndDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceCopyEndDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceCopyEndDateType


class OPFRecurrenceCopyStartDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceCopyStartDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceCopyStartDateType.subclass:
            return OPFRecurrenceCopyStartDateType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceCopyStartDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceCopyStartDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceCopyStartDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceCopyStartDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceCopyStartDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceCopyStartDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceCopyStartDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceCopyStartDateType


class OPFRecurrenceGetOccurenceCountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceGetOccurenceCountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceGetOccurenceCountType.subclass:
            return OPFRecurrenceGetOccurenceCountType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceGetOccurenceCountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceGetOccurenceCountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceGetOccurenceCountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceGetOccurenceCountType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceGetOccurenceCountType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceGetOccurenceCountType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceGetOccurenceCountType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceGetOccurenceCountType


class OPFRecurrenceHasEndDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceHasEndDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceHasEndDateType.subclass:
            return OPFRecurrenceHasEndDateType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceHasEndDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceHasEndDateType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceHasEndDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceHasEndDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceHasEndDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceHasEndDateType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceHasEndDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceHasEndDateType


class OPFRecurrenceIsNoEndType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceIsNoEndType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceIsNoEndType.subclass:
            return OPFRecurrenceIsNoEndType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceIsNoEndType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceIsNoEndType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceIsNoEndType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceIsNoEndType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceIsNoEndType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceIsNoEndType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceIsNoEndType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceIsNoEndType


class OPFRecurrenceIsNumberedType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrenceIsNumberedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrenceIsNumberedType.subclass:
            return OPFRecurrenceIsNumberedType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrenceIsNumberedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrenceIsNumberedType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrenceIsNumberedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrenceIsNumberedType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrenceIsNumberedType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrenceIsNumberedType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrenceIsNumberedType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrenceIsNumberedType


class OPFRecurrencePatternType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, OPFRecurrencePatternDaysOfWeek=None, OPFRecurrencePatternInterval=None, OPFRecurrencePatternType=None, OPFRecurrencePatternDayOfMonth=None, OPFRecurrencePatternMonth=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.OPFRecurrencePatternDaysOfWeek = OPFRecurrencePatternDaysOfWeek
        self.OPFRecurrencePatternInterval = OPFRecurrencePatternInterval
        self.OPFRecurrencePatternType = OPFRecurrencePatternType
        self.OPFRecurrencePatternDayOfMonth = OPFRecurrencePatternDayOfMonth
        self.OPFRecurrencePatternMonth = OPFRecurrencePatternMonth
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternType1.subclass:
            return OPFRecurrencePatternType1.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPFRecurrencePatternDaysOfWeek(self): return self.OPFRecurrencePatternDaysOfWeek
    def set_OPFRecurrencePatternDaysOfWeek(self, OPFRecurrencePatternDaysOfWeek): self.OPFRecurrencePatternDaysOfWeek = OPFRecurrencePatternDaysOfWeek
    def get_OPFRecurrencePatternInterval(self): return self.OPFRecurrencePatternInterval
    def set_OPFRecurrencePatternInterval(self, OPFRecurrencePatternInterval): self.OPFRecurrencePatternInterval = OPFRecurrencePatternInterval
    def get_OPFRecurrencePatternType(self): return self.OPFRecurrencePatternType
    def set_OPFRecurrencePatternType(self, OPFRecurrencePatternType): self.OPFRecurrencePatternType = OPFRecurrencePatternType
    def get_OPFRecurrencePatternDayOfMonth(self): return self.OPFRecurrencePatternDayOfMonth
    def set_OPFRecurrencePatternDayOfMonth(self, OPFRecurrencePatternDayOfMonth): self.OPFRecurrencePatternDayOfMonth = OPFRecurrencePatternDayOfMonth
    def get_OPFRecurrencePatternMonth(self): return self.OPFRecurrencePatternMonth
    def set_OPFRecurrencePatternMonth(self, OPFRecurrencePatternMonth): self.OPFRecurrencePatternMonth = OPFRecurrencePatternMonth
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.OPFRecurrencePatternDaysOfWeek is not None or
            self.OPFRecurrencePatternInterval is not None or
            self.OPFRecurrencePatternType is not None or
            self.OPFRecurrencePatternDayOfMonth is not None or
            self.OPFRecurrencePatternMonth is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternType1', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternType1'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPFRecurrencePatternDaysOfWeek is not None:
            self.OPFRecurrencePatternDaysOfWeek.export(outfile, level, namespace_, name_='OPFRecurrencePatternDaysOfWeek', pretty_print=pretty_print)
        if self.OPFRecurrencePatternInterval is not None:
            self.OPFRecurrencePatternInterval.export(outfile, level, namespace_, name_='OPFRecurrencePatternInterval', pretty_print=pretty_print)
        if self.OPFRecurrencePatternType is not None:
            self.OPFRecurrencePatternType.export(outfile, level, namespace_, name_='OPFRecurrencePatternType', pretty_print=pretty_print)
        if self.OPFRecurrencePatternDayOfMonth is not None:
            self.OPFRecurrencePatternDayOfMonth.export(outfile, level, namespace_, name_='OPFRecurrencePatternDayOfMonth', pretty_print=pretty_print)
        if self.OPFRecurrencePatternMonth is not None:
            self.OPFRecurrencePatternMonth.export(outfile, level, namespace_, name_='OPFRecurrencePatternMonth', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPFRecurrencePatternDaysOfWeek':
            obj_ = OPFRecurrencePatternDaysOfWeekType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternDaysOfWeek = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternDaysOfWeek'
        elif nodeName_ == 'OPFRecurrencePatternInterval':
            obj_ = OPFRecurrencePatternIntervalType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternInterval = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternInterval'
        elif nodeName_ == 'OPFRecurrencePatternType':
            obj_ = OPFRecurrencePatternTypeType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternType = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternType'
        elif nodeName_ == 'OPFRecurrencePatternDayOfMonth':
            obj_ = OPFRecurrencePatternDayOfMonthType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternDayOfMonth = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternDayOfMonth'
        elif nodeName_ == 'OPFRecurrencePatternMonth':
            obj_ = OPFRecurrencePatternMonthType.factory()
            obj_.build(child_)
            self.OPFRecurrencePatternMonth = obj_
            obj_.original_tagname_ = 'OPFRecurrencePatternMonth'
# end class OPFRecurrencePatternType1


class OPFRecurrencePatternDaysOfWeekType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, allDays=None, friday=None, monday=None, tuesday=None, wednesday=None, thursday=None, sunday=None, saturday=None, weekdays=None, weekenddays=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.allDays = allDays
        self.friday = friday
        self.monday = monday
        self.tuesday = tuesday
        self.wednesday = wednesday
        self.thursday = thursday
        self.sunday = sunday
        self.saturday = saturday
        self.weekdays = weekdays
        self.weekenddays = weekenddays
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternDaysOfWeekType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternDaysOfWeekType.subclass:
            return OPFRecurrencePatternDaysOfWeekType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternDaysOfWeekType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_allDays(self): return self.allDays
    def set_allDays(self, allDays): self.allDays = allDays
    def get_friday(self): return self.friday
    def set_friday(self, friday): self.friday = friday
    def get_monday(self): return self.monday
    def set_monday(self, monday): self.monday = monday
    def get_tuesday(self): return self.tuesday
    def set_tuesday(self, tuesday): self.tuesday = tuesday
    def get_wednesday(self): return self.wednesday
    def set_wednesday(self, wednesday): self.wednesday = wednesday
    def get_thursday(self): return self.thursday
    def set_thursday(self, thursday): self.thursday = thursday
    def get_sunday(self): return self.sunday
    def set_sunday(self, sunday): self.sunday = sunday
    def get_saturday(self): return self.saturday
    def set_saturday(self, saturday): self.saturday = saturday
    def get_weekdays(self): return self.weekdays
    def set_weekdays(self, weekdays): self.weekdays = weekdays
    def get_weekenddays(self): return self.weekenddays
    def set_weekenddays(self, weekenddays): self.weekenddays = weekenddays
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def hasContent_(self):
        if (
            self.allDays is not None or
            self.friday is not None or
            self.monday is not None or
            self.tuesday is not None or
            self.wednesday is not None or
            self.thursday is not None or
            self.sunday is not None or
            self.saturday is not None or
            self.weekdays is not None or
            self.weekenddays is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternDaysOfWeekType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternDaysOfWeekType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternDaysOfWeekType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternDaysOfWeekType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternDaysOfWeekType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternDaysOfWeekType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.allDays is not None:
            self.allDays.export(outfile, level, namespace_, name_='allDays', pretty_print=pretty_print)
        if self.friday is not None:
            self.friday.export(outfile, level, namespace_, name_='friday', pretty_print=pretty_print)
        if self.monday is not None:
            self.monday.export(outfile, level, namespace_, name_='monday', pretty_print=pretty_print)
        if self.tuesday is not None:
            self.tuesday.export(outfile, level, namespace_, name_='tuesday', pretty_print=pretty_print)
        if self.wednesday is not None:
            self.wednesday.export(outfile, level, namespace_, name_='wednesday', pretty_print=pretty_print)
        if self.thursday is not None:
            self.thursday.export(outfile, level, namespace_, name_='thursday', pretty_print=pretty_print)
        if self.sunday is not None:
            self.sunday.export(outfile, level, namespace_, name_='sunday', pretty_print=pretty_print)
        if self.saturday is not None:
            self.saturday.export(outfile, level, namespace_, name_='saturday', pretty_print=pretty_print)
        if self.weekdays is not None:
            self.weekdays.export(outfile, level, namespace_, name_='weekdays', pretty_print=pretty_print)
        if self.weekenddays is not None:
            self.weekenddays.export(outfile, level, namespace_, name_='weekenddays', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'allDays':
            obj_ = allDaysType.factory()
            obj_.build(child_)
            self.allDays = obj_
            obj_.original_tagname_ = 'allDays'
        elif nodeName_ == 'friday':
            obj_ = fridayType.factory()
            obj_.build(child_)
            self.friday = obj_
            obj_.original_tagname_ = 'friday'
        elif nodeName_ == 'monday':
            obj_ = mondayType.factory()
            obj_.build(child_)
            self.monday = obj_
            obj_.original_tagname_ = 'monday'
        elif nodeName_ == 'tuesday':
            obj_ = tuesdayType.factory()
            obj_.build(child_)
            self.tuesday = obj_
            obj_.original_tagname_ = 'tuesday'
        elif nodeName_ == 'wednesday':
            obj_ = wednesdayType.factory()
            obj_.build(child_)
            self.wednesday = obj_
            obj_.original_tagname_ = 'wednesday'
        elif nodeName_ == 'thursday':
            obj_ = thursdayType.factory()
            obj_.build(child_)
            self.thursday = obj_
            obj_.original_tagname_ = 'thursday'
        elif nodeName_ == 'sunday':
            obj_ = sundayType.factory()
            obj_.build(child_)
            self.sunday = obj_
            obj_.original_tagname_ = 'sunday'
        elif nodeName_ == 'saturday':
            obj_ = saturdayType.factory()
            obj_.build(child_)
            self.saturday = obj_
            obj_.original_tagname_ = 'saturday'
        elif nodeName_ == 'weekdays':
            obj_ = weekdaysType.factory()
            obj_.build(child_)
            self.weekdays = obj_
            obj_.original_tagname_ = 'weekdays'
        elif nodeName_ == 'weekenddays':
            obj_ = weekenddaysType.factory()
            obj_.build(child_)
            self.weekenddays = obj_
            obj_.original_tagname_ = 'weekenddays'
# end class OPFRecurrencePatternDaysOfWeekType


class allDaysType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, allDaysType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if allDaysType.subclass:
            return allDaysType.subclass(*args_, **kwargs_)
        else:
            return allDaysType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='allDaysType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('allDaysType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='allDaysType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='allDaysType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='allDaysType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='allDaysType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class allDaysType


class fridayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fridayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fridayType.subclass:
            return fridayType.subclass(*args_, **kwargs_)
        else:
            return fridayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='fridayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fridayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='fridayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='fridayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='fridayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='fridayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class fridayType


class mondayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, mondayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if mondayType.subclass:
            return mondayType.subclass(*args_, **kwargs_)
        else:
            return mondayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='mondayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('mondayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mondayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='mondayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='mondayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='mondayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class mondayType


class tuesdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tuesdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tuesdayType.subclass:
            return tuesdayType.subclass(*args_, **kwargs_)
        else:
            return tuesdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tuesdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tuesdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tuesdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tuesdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tuesdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='tuesdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tuesdayType


class wednesdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, wednesdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if wednesdayType.subclass:
            return wednesdayType.subclass(*args_, **kwargs_)
        else:
            return wednesdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='wednesdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('wednesdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='wednesdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='wednesdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='wednesdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='wednesdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class wednesdayType


class thursdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, thursdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if thursdayType.subclass:
            return thursdayType.subclass(*args_, **kwargs_)
        else:
            return thursdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='thursdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('thursdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='thursdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='thursdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='thursdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='thursdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class thursdayType


class sundayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, sundayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if sundayType.subclass:
            return sundayType.subclass(*args_, **kwargs_)
        else:
            return sundayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sundayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('sundayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sundayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='sundayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sundayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='sundayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class sundayType


class saturdayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, saturdayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if saturdayType.subclass:
            return saturdayType.subclass(*args_, **kwargs_)
        else:
            return saturdayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='saturdayType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('saturdayType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='saturdayType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='saturdayType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='saturdayType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='saturdayType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class saturdayType


class weekdaysType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, weekdaysType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if weekdaysType.subclass:
            return weekdaysType.subclass(*args_, **kwargs_)
        else:
            return weekdaysType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='weekdaysType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('weekdaysType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='weekdaysType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='weekdaysType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='weekdaysType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='weekdaysType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class weekdaysType


class weekenddaysType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, weekenddaysType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if weekenddaysType.subclass:
            return weekenddaysType.subclass(*args_, **kwargs_)
        else:
            return weekenddaysType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='weekenddaysType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('weekenddaysType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='weekenddaysType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='weekenddaysType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='weekenddaysType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='weekenddaysType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class weekenddaysType


class OPFRecurrencePatternIntervalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternIntervalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternIntervalType.subclass:
            return OPFRecurrencePatternIntervalType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternIntervalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternIntervalType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternIntervalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternIntervalType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternIntervalType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternIntervalType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternIntervalType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrencePatternIntervalType


class OPFRecurrencePatternTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternTypeType.subclass:
            return OPFRecurrencePatternTypeType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternTypeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternTypeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternTypeType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternTypeType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternTypeType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrencePatternTypeType


class OPFRecurrencePatternDayOfMonthType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternDayOfMonthType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternDayOfMonthType.subclass:
            return OPFRecurrencePatternDayOfMonthType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternDayOfMonthType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternDayOfMonthType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternDayOfMonthType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternDayOfMonthType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternDayOfMonthType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternDayOfMonthType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternDayOfMonthType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrencePatternDayOfMonthType


class OPFRecurrencePatternMonthType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, space=None, valueOf_=None):
        self.original_tagname_ = None
        self.space = _cast(None, space)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPFRecurrencePatternMonthType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPFRecurrencePatternMonthType.subclass:
            return OPFRecurrencePatternMonthType.subclass(*args_, **kwargs_)
        else:
            return OPFRecurrencePatternMonthType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_space(self): return self.space
    def set_space(self, space): self.space = space
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OPFRecurrencePatternMonthType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPFRecurrencePatternMonthType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPFRecurrencePatternMonthType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OPFRecurrencePatternMonthType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OPFRecurrencePatternMonthType'):
        if self.space is not None and 'space' not in already_processed:
            already_processed.add('space')
            outfile.write(' space=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.space), input_name='space')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OPFRecurrencePatternMonthType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('space', node)
        if value is not None and 'space' not in already_processed:
            already_processed.add('space')
            self.space = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OPFRecurrencePatternMonthType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tasks'
        rootClass = tasks
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tasks'
        rootClass = tasks
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tasks'
        rootClass = tasks
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tasks'
        rootClass = tasks
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from tasks import *\n\n')
        sys.stdout.write('import tasks as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "OPFCategoryCopyBackgroundColorType",
    "OPFCategoryCopyNameType",
    "OPFRecurrenceCopyEndDateType",
    "OPFRecurrenceCopyStartDateType",
    "OPFRecurrenceGetOccurenceCountType",
    "OPFRecurrenceHasEndDateType",
    "OPFRecurrenceIsNoEndType",
    "OPFRecurrenceIsNumberedType",
    "OPFRecurrencePatternDayOfMonthType",
    "OPFRecurrencePatternDaysOfWeekType",
    "OPFRecurrencePatternIntervalType",
    "OPFRecurrencePatternMonthType",
    "OPFRecurrencePatternType1",
    "OPFRecurrencePatternTypeType",
    "OPFTaskCopyCategoryListType",
    "OPFTaskCopyCompletedDateTimeType",
    "OPFTaskCopyDueDateTimeType",
    "OPFTaskCopyModDateType",
    "OPFTaskCopyNameType",
    "OPFTaskCopyNotePlainType",
    "OPFTaskCopyNoteType",
    "OPFTaskCopyPrimaryCategoryType",
    "OPFTaskCopyRecurrenceType",
    "OPFTaskCopyReminderTimeType",
    "OPFTaskCopyStartDateTimeType",
    "OPFTaskGetPriorityType",
    "allDaysType",
    "categoryType",
    "fridayType",
    "mondayType",
    "saturdayType",
    "sundayType",
    "taskType",
    "tasks",
    "thursdayType",
    "tuesdayType",
    "wednesdayType",
    "weekdaysType",
    "weekenddaysType"
]
